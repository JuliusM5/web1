{"version":3,"file":"static/js/805.aec3e14c.chunk.js","mappings":"iMAeO,MAAMA,EAAkBC,eAAOC,GAA6B,IAAvBC,EAAYC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAOxDG,QAAQC,IAAI,8BAA8BN,EAAKO,eAE/C,IAKE,aAHMC,EAAyBR,EAAMC,GAG9B,IAAIQ,KAAK,CAAC,mBAAqBT,EAAKO,aAAc,CAAEG,KAAM,mBACnE,CAAE,MAAOC,GAEP,MADAN,QAAQM,MAAM,wBAAyBA,GACjC,IAAIC,MAAM,yBAClB,CACF,EAQaC,EAAkBd,eAAOC,GAA6B,IAAvBC,EAAYC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAC1D,IAEE,MAAMY,EAAiBC,SAASC,cAAc,OAC9CF,EAAeG,UAAY,6EAC3BH,EAAeI,UAAY,uPAM3BH,SAASI,KAAKC,YAAYN,GAG1B,MAAMO,QAAgBvB,EAAgBE,EAAMC,GAGtCqB,EAAMC,IAAIC,gBAAgBH,GAC1BI,EAAIV,SAASC,cAAc,KAejC,OAdAS,EAAEC,KAAOJ,EACTG,EAAEE,SAAW,GAAG3B,EAAKO,YAAYqB,QAAQ,OAAQ,qBAGjDb,SAASI,KAAKC,YAAYK,GAC1BA,EAAEI,QAGFC,YAAW,KACTf,SAASI,KAAKY,YAAYN,GAC1BF,IAAIS,gBAAgBV,GACpBP,SAASI,KAAKY,YAAYjB,EAAe,GACxC,MAEI,CACT,CAAE,MAAOH,GAGP,OAFAN,QAAQM,MAAM,+BAAgCA,GAC9CsB,MAAM,oDACC,CACT,CACF,EAUaC,EAAmBnC,eAAOC,EAAMmC,GAA8B,IAAvBlC,EAAYC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,CAAC,EAClE,IAAKiC,IAAUC,EAAcD,GAE3B,OADAF,MAAM,uCACC,EAGT,IAEE,MAAMnB,EAAiBC,SAASC,cAAc,OAC9CF,EAAeG,UAAY,6EAC3BH,EAAeI,UAAY,sPAM3BH,SAASI,KAAKC,YAAYN,SAQJhB,EAAgBE,EAAMC,GAW5C,aARM,IAAIoC,SAAQC,GAAWR,WAAWQ,EAAS,QAGjDvB,SAASI,KAAKY,YAAYjB,GAG1BmB,MAAM,oBAAoBjC,EAAKO,uBAAuB4B,MAE/C,CACT,CAAE,MAAOxB,GAGP,OAFAN,QAAQM,MAAM,+BAAgCA,GAC9CsB,MAAM,4CACC,CACT,CACF,EAWMzB,EAA2BT,MAAOC,EAAMC,WAEtC,IAAIoC,SAAQC,GAAWR,WAAWQ,EAAS,OAGjDjC,QAAQC,IAAI,gBACZD,QAAQC,IAAI,gBACZD,QAAQC,IAAI,WAAWN,EAAKO,eAC5BF,QAAQC,IAAI,SAASN,EAAKuC,gBAAgBvC,EAAKwC,WAC/CnC,QAAQC,IAAI,YAAYN,EAAKyC,UAEzBzC,EAAK0C,kBACPrC,QAAQC,IAAI,qBACZqC,OAAOC,QAAQ5C,EAAK0C,iBAAiBG,SAAQC,IAAyB,IAAvBC,EAAUC,GAAOF,EAC9DzC,QAAQC,IAAI,KAAKyC,OAAcC,IAAS,KAIxChD,EAAKiD,YAAcjD,EAAKiD,WAAW9C,OAAS,IAC9CE,QAAQC,IAAI,mBACZN,EAAKiD,WAAWJ,SAAQK,IACtB7C,QAAQC,IAAI,KAAK4C,EAAUxC,SAASwC,EAAUC,WAAWD,EAAUE,KAAK,KAIxEpD,EAAKqD,OAASrD,EAAKqD,MAAMlD,OAAS,IACpCE,QAAQC,IAAI,UACZN,EAAKqD,MAAMR,SAAQS,IACjBjD,QAAQC,IAAI,KAAKgD,EAAKC,UAAY,SAAM,YAAOD,EAAKE,OAAO,IAE/D,EAWIpB,EAAiBD,GACV,mDACDsB,KAAKC,OAAOvB,GAAOwB,c","sources":["utils/enhancedPdfGenerator.js"],"sourcesContent":["/**\r\n * Enhanced PDF Generator utility for TravelEase\r\n * Provides functionality to export trip details as PDF\r\n */\r\n\r\n// In a real implementation, we would use libraries like jsPDF and html2canvas\r\n// For this implementation, we'll create the structure and mock the PDF generation\r\n\r\n/**\r\n * Generate a PDF for a trip\r\n * \r\n * @param {Object} trip The trip object to export\r\n * @param {Object} userSettings User settings for formatting\r\n * @returns {Promise<Blob>} A promise that resolves to a Blob containing the PDF\r\n */\r\nexport const generateTripPdf = async (trip, userSettings = {}) => {\r\n    // In a real implementation, we would:\r\n    // 1. Create a jsPDF instance\r\n    // 2. Add content to the PDF\r\n    // 3. Return a Blob containing the PDF\r\n  \r\n    // For this mock implementation, we'll log the process and return a mock Blob\r\n    console.log(`Generating PDF for trip to ${trip.destination}`);\r\n    \r\n    try {\r\n      // Mock PDF generation process\r\n      await mockPdfGenerationProcess(trip, userSettings);\r\n      \r\n      // Return a mock Blob (in real implementation, this would be the actual PDF)\r\n      return new Blob(['PDF content for ' + trip.destination], { type: 'application/pdf' });\r\n    } catch (error) {\r\n      console.error('Error generating PDF:', error);\r\n      throw new Error('Failed to generate PDF');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Export a trip as PDF and trigger download\r\n   * \r\n   * @param {Object} trip The trip to export\r\n   * @param {Object} userSettings User settings for formatting\r\n   */\r\n  export const exportTripToPDF = async (trip, userSettings = {}) => {\r\n    try {\r\n      // Show loading indicator\r\n      const loadingElement = document.createElement('div');\r\n      loadingElement.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\r\n      loadingElement.innerHTML = `\r\n        <div class=\"bg-white p-6 rounded-lg shadow-xl\">\r\n          <div class=\"animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500 mx-auto\"></div>\r\n          <p class=\"mt-4 text-center\">Generating PDF...</p>\r\n        </div>\r\n      `;\r\n      document.body.appendChild(loadingElement);\r\n  \r\n      // Generate the PDF\r\n      const pdfBlob = await generateTripPdf(trip, userSettings);\r\n      \r\n      // Create a download link\r\n      const url = URL.createObjectURL(pdfBlob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `${trip.destination.replace(/\\s+/g, '_')}_Trip_Plan.pdf`;\r\n      \r\n      // Trigger download\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      \r\n      // Clean up\r\n      setTimeout(() => {\r\n        document.body.removeChild(a);\r\n        URL.revokeObjectURL(url);\r\n        document.body.removeChild(loadingElement);\r\n      }, 100);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error exporting trip to PDF:', error);\r\n      alert('Failed to export trip to PDF. Please try again.');\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Email trip details as PDF\r\n   * \r\n   * @param {Object} trip The trip to email\r\n   * @param {string} email The recipient email address\r\n   * @param {Object} userSettings User settings for formatting\r\n   * @returns {Promise<boolean>} Whether the email was sent successfully\r\n   */\r\n  export const emailTripDetails = async (trip, email, userSettings = {}) => {\r\n    if (!email || !validateEmail(email)) {\r\n      alert('Please enter a valid email address');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      // Show loading indicator\r\n      const loadingElement = document.createElement('div');\r\n      loadingElement.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\r\n      loadingElement.innerHTML = `\r\n        <div class=\"bg-white p-6 rounded-lg shadow-xl\">\r\n          <div class=\"animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500 mx-auto\"></div>\r\n          <p class=\"mt-4 text-center\">Sending email...</p>\r\n        </div>\r\n      `;\r\n      document.body.appendChild(loadingElement);\r\n  \r\n      // In a real implementation, we would:\r\n      // 1. Generate the PDF\r\n      // 2. Send it to the server\r\n      // 3. Have the server send the email\r\n      \r\n      // For this mock implementation, we'll simulate the process\r\n      const pdfBlob = await generateTripPdf(trip, userSettings);\r\n      \r\n      // Simulate email sending delay\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      \r\n      // Remove loading indicator\r\n      document.body.removeChild(loadingElement);\r\n      \r\n      // Show success message\r\n      alert(`Trip details for ${trip.destination} sent to ${email}`);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error emailing trip details:', error);\r\n      alert('Failed to send email. Please try again.');\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Helper functions\r\n  \r\n  /**\r\n   * Mock PDF generation process\r\n   * \r\n   * @param {Object} trip The trip to export\r\n   * @param {Object} userSettings User settings for formatting\r\n   * @returns {Promise<void>}\r\n   */\r\n  const mockPdfGenerationProcess = async (trip, userSettings) => {\r\n    // Simulate processing time\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Log the content that would be included in the PDF\r\n    console.log('PDF Content:');\r\n    console.log('------------');\r\n    console.log(`Trip to ${trip.destination}`);\r\n    console.log(`Date: ${trip.startDate} to ${trip.endDate}`);\r\n    console.log(`Budget: $${trip.budget}`);\r\n    \r\n    if (trip.budgetBreakdown) {\r\n      console.log('Budget Breakdown:');\r\n      Object.entries(trip.budgetBreakdown).forEach(([category, amount]) => {\r\n        console.log(`  ${category}: $${amount}`);\r\n      });\r\n    }\r\n    \r\n    if (trip.transports && trip.transports.length > 0) {\r\n      console.log('Transportation:');\r\n      trip.transports.forEach(transport => {\r\n        console.log(`  ${transport.type}: ${transport.from} to ${transport.to}`);\r\n      });\r\n    }\r\n    \r\n    if (trip.tasks && trip.tasks.length > 0) {\r\n      console.log('Tasks:');\r\n      trip.tasks.forEach(task => {\r\n        console.log(`  ${task.completed ? '✓' : '○'} ${task.text}`);\r\n      });\r\n    }\r\n    \r\n    // In a real implementation, this would create the actual PDF content\r\n  };\r\n  \r\n  /**\r\n   * Validate an email address\r\n   * \r\n   * @param {string} email The email address to validate\r\n   * @returns {boolean} Whether the email is valid\r\n   */\r\n  const validateEmail = (email) => {\r\n    const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n    return re.test(String(email).toLowerCase());\r\n  };"],"names":["generateTripPdf","async","trip","userSettings","arguments","length","undefined","console","log","destination","mockPdfGenerationProcess","Blob","type","error","Error","exportTripToPDF","loadingElement","document","createElement","className","innerHTML","body","appendChild","pdfBlob","url","URL","createObjectURL","a","href","download","replace","click","setTimeout","removeChild","revokeObjectURL","alert","emailTripDetails","email","validateEmail","Promise","resolve","startDate","endDate","budget","budgetBreakdown","Object","entries","forEach","_ref","category","amount","transports","transport","from","to","tasks","task","completed","text","test","String","toLowerCase"],"sourceRoot":""}