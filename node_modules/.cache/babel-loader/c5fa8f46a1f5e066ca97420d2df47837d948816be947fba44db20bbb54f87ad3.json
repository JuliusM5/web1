{"ast":null,"code":"// src/services/offersService.js\n\n/**\r\n * Service for managing travel offers\r\n * Uses localStorage for persistence instead of mockup data\r\n */\n\n// Predefined categories for offers - these can be edited or expanded\nexport const offerCategories = {\n  destination: ['Beach', 'Mountain', 'City', 'Countryside', 'Island', 'Desert', 'Forest', 'Lake', 'River', 'National Park'],\n  activityType: ['Adventure', 'Relaxation', 'Cultural', 'Historical', 'Nightlife', 'Family', 'Romantic', 'Solo Travel', 'Group Tour', 'Educational'],\n  travelStyle: ['Luxury', 'Budget', 'Eco-friendly', 'All-inclusive', 'Self-guided', 'Backpacking', 'Wellness', 'Food & Wine', 'Photography', 'Wildlife'],\n  season: ['Spring', 'Summer', 'Fall', 'Winter', 'Year-round', 'Off-season', 'Peak Season', 'Holiday Season'],\n  duration: ['Weekend Getaway', 'Short Break', 'One Week', 'Two Weeks', 'Long-term']\n};\n\n// Initialize offers in localStorage if not present\nconst initializeOffers = () => {\n  if (!localStorage.getItem('travelOffers')) {\n    localStorage.setItem('travelOffers', JSON.stringify([]));\n  }\n};\n\n/**\r\n * Get all offers from storage\r\n * @returns {Array} Array of offer objects\r\n */\nconst getOffers = () => {\n  initializeOffers();\n  try {\n    return JSON.parse(localStorage.getItem('travelOffers')) || [];\n  } catch (error) {\n    console.error('Error retrieving offers:', error);\n    return [];\n  }\n};\n\n/**\r\n * Get featured offers\r\n * @returns {Array} Array of featured offer objects\r\n */\nconst getFeaturedOffers = () => {\n  const offers = getOffers();\n  return offers.filter(offer => offer.featured);\n};\n\n/**\r\n * Get a single offer by ID\r\n * @param {string|number} id Offer ID\r\n * @returns {Object|null} Offer object or null if not found\r\n */\nconst getOfferById = id => {\n  const offers = getOffers();\n  return offers.find(offer => offer.id.toString() === id.toString()) || null;\n};\n\n/**\r\n * Create a new offer\r\n * @param {Object} offerData Offer data\r\n * @returns {Object|boolean} Created offer or false if failed\r\n */\nconst createOffer = offerData => {\n  try {\n    const offers = getOffers();\n\n    // Generate a unique ID\n    const newOffer = {\n      ...offerData,\n      id: Date.now(),\n      // Simple unique ID generator\n      createdAt: new Date().toISOString()\n    };\n\n    // Add to offers\n    const updatedOffers = [...offers, newOffer];\n    localStorage.setItem('travelOffers', JSON.stringify(updatedOffers));\n    return newOffer;\n  } catch (error) {\n    console.error('Error creating offer:', error);\n    return false;\n  }\n};\n\n/**\r\n * Update an existing offer\r\n * @param {string|number} id Offer ID\r\n * @param {Object} offerData Updated offer data\r\n * @returns {Object|boolean} Updated offer or false if failed\r\n */\nconst updateOffer = (id, offerData) => {\n  try {\n    const offers = getOffers();\n    const index = offers.findIndex(offer => offer.id.toString() === id.toString());\n    if (index === -1) {\n      return false;\n    }\n\n    // Update the offer\n    const updatedOffer = {\n      ...offers[index],\n      ...offerData,\n      updatedAt: new Date().toISOString()\n    };\n    offers[index] = updatedOffer;\n    localStorage.setItem('travelOffers', JSON.stringify(offers));\n    return updatedOffer;\n  } catch (error) {\n    console.error('Error updating offer:', error);\n    return false;\n  }\n};\n\n/**\r\n * Delete an offer\r\n * @param {string|number} id Offer ID\r\n * @returns {boolean} Success status\r\n */\nconst deleteOffer = id => {\n  try {\n    const offers = getOffers();\n    const updatedOffers = offers.filter(offer => offer.id.toString() !== id.toString());\n\n    // If no offers were removed, the ID wasn't found\n    if (updatedOffers.length === offers.length) {\n      return false;\n    }\n    localStorage.setItem('travelOffers', JSON.stringify(updatedOffers));\n    return true;\n  } catch (error) {\n    console.error('Error deleting offer:', error);\n    return false;\n  }\n};\n\n/**\r\n * Search offers by query\r\n * @param {string} query Search query\r\n * @returns {Array} Matching offers\r\n */\nconst searchOffers = query => {\n  if (!query || typeof query !== 'string') {\n    return [];\n  }\n  const offers = getOffers();\n  const normalizedQuery = query.toLowerCase().trim();\n  return offers.filter(offer => {\n    var _offer$title, _offer$destination, _offer$description;\n    // Search in title, destination, and description\n    return ((_offer$title = offer.title) === null || _offer$title === void 0 ? void 0 : _offer$title.toLowerCase().includes(normalizedQuery)) || ((_offer$destination = offer.destination) === null || _offer$destination === void 0 ? void 0 : _offer$destination.toLowerCase().includes(normalizedQuery)) || ((_offer$description = offer.description) === null || _offer$description === void 0 ? void 0 : _offer$description.toLowerCase().includes(normalizedQuery));\n  });\n};\n\n/**\r\n * Get offers by category\r\n * @param {string} category Category to filter by\r\n * @returns {Array} Matching offers\r\n */\nconst getOffersByCategory = category => {\n  if (!category) {\n    return getOffers();\n  }\n  const offers = getOffers();\n  return offers.filter(offer => offer.categories && offer.categories.some(cat => cat.toLowerCase() === category.toLowerCase()));\n};\n\n/**\r\n * Clear all offers (for testing or reset)\r\n * @returns {boolean} Success status\r\n */\nconst clearAllOffers = () => {\n  try {\n    localStorage.setItem('travelOffers', JSON.stringify([]));\n    return true;\n  } catch (error) {\n    console.error('Error clearing offers:', error);\n    return false;\n  }\n};\nexport { initializeOffers, getOffers, getFeaturedOffers, getOfferById, createOffer, updateOffer, deleteOffer, searchOffers, getOffersByCategory, clearAllOffers };","map":{"version":3,"names":["offerCategories","destination","activityType","travelStyle","season","duration","initializeOffers","localStorage","getItem","setItem","JSON","stringify","getOffers","parse","error","console","getFeaturedOffers","offers","filter","offer","featured","getOfferById","id","find","toString","createOffer","offerData","newOffer","Date","now","createdAt","toISOString","updatedOffers","updateOffer","index","findIndex","updatedOffer","updatedAt","deleteOffer","length","searchOffers","query","normalizedQuery","toLowerCase","trim","_offer$title","_offer$destination","_offer$description","title","includes","description","getOffersByCategory","category","categories","some","cat","clearAllOffers"],"sources":["C:/Users/juliu/Desktop/web/src/services/offersService.js"],"sourcesContent":["// src/services/offersService.js\r\n\r\n/**\r\n * Service for managing travel offers\r\n * Uses localStorage for persistence instead of mockup data\r\n */\r\n\r\n// Predefined categories for offers - these can be edited or expanded\r\nexport const offerCategories = {\r\n  destination: [\r\n    'Beach', 'Mountain', 'City', 'Countryside', 'Island', 'Desert', 'Forest', \r\n    'Lake', 'River', 'National Park'\r\n  ],\r\n  activityType: [\r\n    'Adventure', 'Relaxation', 'Cultural', 'Historical', 'Nightlife', 'Family',\r\n    'Romantic', 'Solo Travel', 'Group Tour', 'Educational'\r\n  ],\r\n  travelStyle: [\r\n    'Luxury', 'Budget', 'Eco-friendly', 'All-inclusive', 'Self-guided',\r\n    'Backpacking', 'Wellness', 'Food & Wine', 'Photography', 'Wildlife'\r\n  ],\r\n  season: [\r\n    'Spring', 'Summer', 'Fall', 'Winter', 'Year-round', 'Off-season',\r\n    'Peak Season', 'Holiday Season'\r\n  ],\r\n  duration: [\r\n    'Weekend Getaway', 'Short Break', 'One Week', 'Two Weeks', 'Long-term'\r\n  ]\r\n};\r\n\r\n// Initialize offers in localStorage if not present\r\nconst initializeOffers = () => {\r\n  if (!localStorage.getItem('travelOffers')) {\r\n    localStorage.setItem('travelOffers', JSON.stringify([]));\r\n  }\r\n};\r\n\r\n/**\r\n * Get all offers from storage\r\n * @returns {Array} Array of offer objects\r\n */\r\nconst getOffers = () => {\r\n  initializeOffers();\r\n  try {\r\n    return JSON.parse(localStorage.getItem('travelOffers')) || [];\r\n  } catch (error) {\r\n    console.error('Error retrieving offers:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n/**\r\n * Get featured offers\r\n * @returns {Array} Array of featured offer objects\r\n */\r\nconst getFeaturedOffers = () => {\r\n  const offers = getOffers();\r\n  return offers.filter(offer => offer.featured);\r\n};\r\n\r\n/**\r\n * Get a single offer by ID\r\n * @param {string|number} id Offer ID\r\n * @returns {Object|null} Offer object or null if not found\r\n */\r\nconst getOfferById = (id) => {\r\n  const offers = getOffers();\r\n  return offers.find(offer => offer.id.toString() === id.toString()) || null;\r\n};\r\n\r\n/**\r\n * Create a new offer\r\n * @param {Object} offerData Offer data\r\n * @returns {Object|boolean} Created offer or false if failed\r\n */\r\nconst createOffer = (offerData) => {\r\n  try {\r\n    const offers = getOffers();\r\n    \r\n    // Generate a unique ID\r\n    const newOffer = {\r\n      ...offerData,\r\n      id: Date.now(), // Simple unique ID generator\r\n      createdAt: new Date().toISOString()\r\n    };\r\n    \r\n    // Add to offers\r\n    const updatedOffers = [...offers, newOffer];\r\n    localStorage.setItem('travelOffers', JSON.stringify(updatedOffers));\r\n    \r\n    return newOffer;\r\n  } catch (error) {\r\n    console.error('Error creating offer:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Update an existing offer\r\n * @param {string|number} id Offer ID\r\n * @param {Object} offerData Updated offer data\r\n * @returns {Object|boolean} Updated offer or false if failed\r\n */\r\nconst updateOffer = (id, offerData) => {\r\n  try {\r\n    const offers = getOffers();\r\n    const index = offers.findIndex(offer => offer.id.toString() === id.toString());\r\n    \r\n    if (index === -1) {\r\n      return false;\r\n    }\r\n    \r\n    // Update the offer\r\n    const updatedOffer = {\r\n      ...offers[index],\r\n      ...offerData,\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n    \r\n    offers[index] = updatedOffer;\r\n    localStorage.setItem('travelOffers', JSON.stringify(offers));\r\n    \r\n    return updatedOffer;\r\n  } catch (error) {\r\n    console.error('Error updating offer:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Delete an offer\r\n * @param {string|number} id Offer ID\r\n * @returns {boolean} Success status\r\n */\r\nconst deleteOffer = (id) => {\r\n  try {\r\n    const offers = getOffers();\r\n    const updatedOffers = offers.filter(offer => offer.id.toString() !== id.toString());\r\n    \r\n    // If no offers were removed, the ID wasn't found\r\n    if (updatedOffers.length === offers.length) {\r\n      return false;\r\n    }\r\n    \r\n    localStorage.setItem('travelOffers', JSON.stringify(updatedOffers));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting offer:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\n/**\r\n * Search offers by query\r\n * @param {string} query Search query\r\n * @returns {Array} Matching offers\r\n */\r\nconst searchOffers = (query) => {\r\n  if (!query || typeof query !== 'string') {\r\n    return [];\r\n  }\r\n  \r\n  const offers = getOffers();\r\n  const normalizedQuery = query.toLowerCase().trim();\r\n  \r\n  return offers.filter(offer => {\r\n    // Search in title, destination, and description\r\n    return (\r\n      offer.title?.toLowerCase().includes(normalizedQuery) ||\r\n      offer.destination?.toLowerCase().includes(normalizedQuery) ||\r\n      offer.description?.toLowerCase().includes(normalizedQuery)\r\n    );\r\n  });\r\n};\r\n\r\n/**\r\n * Get offers by category\r\n * @param {string} category Category to filter by\r\n * @returns {Array} Matching offers\r\n */\r\nconst getOffersByCategory = (category) => {\r\n  if (!category) {\r\n    return getOffers();\r\n  }\r\n  \r\n  const offers = getOffers();\r\n  return offers.filter(offer => \r\n    offer.categories && \r\n    offer.categories.some(cat => cat.toLowerCase() === category.toLowerCase())\r\n  );\r\n};\r\n\r\n/**\r\n * Clear all offers (for testing or reset)\r\n * @returns {boolean} Success status\r\n */\r\nconst clearAllOffers = () => {\r\n  try {\r\n    localStorage.setItem('travelOffers', JSON.stringify([]));\r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error clearing offers:', error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport {\r\n  initializeOffers,\r\n  getOffers,\r\n  getFeaturedOffers,\r\n  getOfferById,\r\n  createOffer,\r\n  updateOffer,\r\n  deleteOffer,\r\n  searchOffers,\r\n  getOffersByCategory,\r\n  clearAllOffers\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}