{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\context\\\\SubscriptionContext.jsx\",\n  _s = $RefreshSig$();\n// Enhanced SubscriptionContext.jsx\nimport React, { createContext, useEffect, useState } from 'react';\nimport SubscriptionService from '../services/SubscriptionService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SubscriptionContext = /*#__PURE__*/createContext();\nexport const SubscriptionProvider = ({\n  children\n}) => {\n  _s();\n  const [subscription, setSubscription] = useState({\n    isSubscribed: false,\n    isLoading: true,\n    plan: null,\n    expiresAt: null\n  });\n  useEffect(() => {\n    // Check subscription status on mount\n    verifySubscription();\n  }, []);\n  const verifySubscription = async () => {\n    setSubscription(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    const status = await SubscriptionService.verifySubscription();\n    setSubscription({\n      isSubscribed: status.isSubscribed,\n      plan: status.plan,\n      expiresAt: status.expiresAt,\n      isLoading: false\n    });\n  };\n  const purchaseSubscription = async (email, plan) => {\n    const result = await SubscriptionService.purchaseSubscription(email, plan);\n    if (result.success) {\n      await verifySubscription();\n    }\n    return result;\n  };\n  const activateTokenFromEmail = async token => {\n    const result = await SubscriptionService.activateTokenFromEmail(token);\n    if (result.success) {\n      await verifySubscription();\n    }\n    return result;\n  };\n  return /*#__PURE__*/_jsxDEV(SubscriptionContext.Provider, {\n    value: {\n      ...subscription,\n      purchaseSubscription,\n      activateTokenFromEmail,\n      refreshSubscription: verifySubscription\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(SubscriptionProvider, \"jIZu6G1h34v5p7MFKNDnxD2Irbs=\");\n_c = SubscriptionProvider;\nvar _c;\n$RefreshReg$(_c, \"SubscriptionProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","SubscriptionService","jsxDEV","_jsxDEV","SubscriptionContext","SubscriptionProvider","children","_s","subscription","setSubscription","isSubscribed","isLoading","plan","expiresAt","verifySubscription","prev","status","purchaseSubscription","email","result","success","activateTokenFromEmail","token","Provider","value","refreshSubscription","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/context/SubscriptionContext.jsx"],"sourcesContent":["// Enhanced SubscriptionContext.jsx\r\nimport React, { createContext, useEffect, useState } from 'react';\r\nimport SubscriptionService from '../services/SubscriptionService';\r\n\r\nexport const SubscriptionContext = createContext();\r\n\r\nexport const SubscriptionProvider = ({ children }) => {\r\n  const [subscription, setSubscription] = useState({\r\n    isSubscribed: false,\r\n    isLoading: true,\r\n    plan: null,\r\n    expiresAt: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Check subscription status on mount\r\n    verifySubscription();\r\n  }, []);\r\n\r\n  const verifySubscription = async () => {\r\n    setSubscription(prev => ({ ...prev, isLoading: true }));\r\n    const status = await SubscriptionService.verifySubscription();\r\n    setSubscription({\r\n      isSubscribed: status.isSubscribed,\r\n      plan: status.plan,\r\n      expiresAt: status.expiresAt,\r\n      isLoading: false\r\n    });\r\n  };\r\n\r\n  const purchaseSubscription = async (email, plan) => {\r\n    const result = await SubscriptionService.purchaseSubscription(email, plan);\r\n    if (result.success) {\r\n      await verifySubscription();\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const activateTokenFromEmail = async (token) => {\r\n    const result = await SubscriptionService.activateTokenFromEmail(token);\r\n    if (result.success) {\r\n      await verifySubscription();\r\n    }\r\n    return result;\r\n  };\r\n\r\n  return (\r\n    <SubscriptionContext.Provider value={{\r\n      ...subscription,\r\n      purchaseSubscription,\r\n      activateTokenFromEmail,\r\n      refreshSubscription: verifySubscription\r\n    }}>\r\n      {children}\r\n    </SubscriptionContext.Provider>\r\n  );\r\n};"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACjE,OAAOC,mBAAmB,MAAM,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,mBAAmB,gBAAGN,aAAa,CAAC,CAAC;AAElD,OAAO,MAAMO,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACpD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC;IAC/CU,YAAY,EAAE,KAAK;IACnBC,SAAS,EAAE,IAAI;IACfC,IAAI,EAAE,IAAI;IACVC,SAAS,EAAE;EACb,CAAC,CAAC;EAEFd,SAAS,CAAC,MAAM;IACd;IACAe,kBAAkB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrCL,eAAe,CAACM,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAEJ,SAAS,EAAE;IAAK,CAAC,CAAC,CAAC;IACvD,MAAMK,MAAM,GAAG,MAAMf,mBAAmB,CAACa,kBAAkB,CAAC,CAAC;IAC7DL,eAAe,CAAC;MACdC,YAAY,EAAEM,MAAM,CAACN,YAAY;MACjCE,IAAI,EAAEI,MAAM,CAACJ,IAAI;MACjBC,SAAS,EAAEG,MAAM,CAACH,SAAS;MAC3BF,SAAS,EAAE;IACb,CAAC,CAAC;EACJ,CAAC;EAED,MAAMM,oBAAoB,GAAG,MAAAA,CAAOC,KAAK,EAAEN,IAAI,KAAK;IAClD,MAAMO,MAAM,GAAG,MAAMlB,mBAAmB,CAACgB,oBAAoB,CAACC,KAAK,EAAEN,IAAI,CAAC;IAC1E,IAAIO,MAAM,CAACC,OAAO,EAAE;MAClB,MAAMN,kBAAkB,CAAC,CAAC;IAC5B;IACA,OAAOK,MAAM;EACf,CAAC;EAED,MAAME,sBAAsB,GAAG,MAAOC,KAAK,IAAK;IAC9C,MAAMH,MAAM,GAAG,MAAMlB,mBAAmB,CAACoB,sBAAsB,CAACC,KAAK,CAAC;IACtE,IAAIH,MAAM,CAACC,OAAO,EAAE;MAClB,MAAMN,kBAAkB,CAAC,CAAC;IAC5B;IACA,OAAOK,MAAM;EACf,CAAC;EAED,oBACEhB,OAAA,CAACC,mBAAmB,CAACmB,QAAQ;IAACC,KAAK,EAAE;MACnC,GAAGhB,YAAY;MACfS,oBAAoB;MACpBI,sBAAsB;MACtBI,mBAAmB,EAAEX;IACvB,CAAE;IAAAR,QAAA,EACCA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAEnC,CAAC;AAACtB,EAAA,CAlDWF,oBAAoB;AAAAyB,EAAA,GAApBzB,oBAAoB;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}