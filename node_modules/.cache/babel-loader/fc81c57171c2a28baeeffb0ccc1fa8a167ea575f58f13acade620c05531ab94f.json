{"ast":null,"code":"// src/services/flightDataSharingService.js\n\n/**\r\n * Service for efficiently sharing flight data across users\r\n */\nclass FlightDataSharingService {\n  constructor() {\n    this.cache = new Map();\n    this.signalUsage = new Map();\n\n    // Try to load signal usage from localStorage\n    try {\n      const storedUsage = localStorage.getItem('flight_signal_usage');\n      if (storedUsage) {\n        this.signalUsage = new Map(JSON.parse(storedUsage));\n      }\n    } catch (error) {\n      console.error('Error loading signal usage:', error);\n    }\n  }\n\n  /**\r\n   * Get flight data, using cache when possible\r\n   */\n  async getFlightData(originCode, destinationCode, originId, destinationId, flightService) {\n    // Create cache key\n    const cacheKey = `${originCode}-${destinationCode}`;\n\n    // Check cache first\n    const cachedData = this.cache.get(cacheKey);\n    if (cachedData && this.isCacheValid(cachedData.timestamp)) {\n      return cachedData.data;\n    }\n\n    // If not in cache, fetch from service\n    const flightData = await flightService.searchFlights(originId, destinationId);\n\n    // Store in cache\n    this.cache.set(cacheKey, {\n      data: flightData,\n      timestamp: Date.now()\n    });\n    return flightData;\n  }\n\n  /**\r\n   * Check if cached data is still valid (less than 6 hours old)\r\n   */\n  isCacheValid(timestamp) {\n    const SIX_HOURS = 6 * 60 * 60 * 1000;\n    return Date.now() - timestamp < SIX_HOURS;\n  }\n\n  /**\r\n   * Record signal usage for a user\r\n   */\n  recordSignalUsage(userId) {\n    const now = new Date();\n    const month = now.getMonth();\n    const year = now.getFullYear();\n    const monthKey = `${year}-${month}`;\n\n    // Get user's signals\n    const userKey = `user_${userId}`;\n    const userSignals = this.signalUsage.get(userKey) || {};\n\n    // Update or set the count for current month\n    userSignals[monthKey] = (userSignals[monthKey] || 0) + 1;\n\n    // Save back to the map\n    this.signalUsage.set(userKey, userSignals);\n\n    // Persist to localStorage\n    this.saveSignalUsage();\n    return userSignals[monthKey];\n  }\n\n  /**\r\n   * Get the number of signals used this month\r\n   */\n  getUsedSignalCount(userId) {\n    const now = new Date();\n    const month = now.getMonth();\n    const year = now.getFullYear();\n    const monthKey = `${year}-${month}`;\n    const userKey = `user_${userId}`;\n    const userSignals = this.signalUsage.get(userKey) || {};\n    return userSignals[monthKey] || 0;\n  }\n\n  /**\r\n   * Get the number of remaining free signals\r\n   */\n  getRemainingFreeSignals(userId) {\n    const usedCount = this.getUsedSignalCount(userId);\n    return Math.max(0, 3 - usedCount);\n  }\n\n  /**\r\n   * Save signal usage to localStorage\r\n   */\n  saveSignalUsage() {\n    try {\n      localStorage.setItem('flight_signal_usage', JSON.stringify(Array.from(this.signalUsage.entries())));\n    } catch (error) {\n      console.error('Error saving signal usage:', error);\n    }\n  }\n\n  /**\r\n   * Reset signal usage (for testing)\r\n   */\n  resetSignalUsage(userId) {\n    if (userId) {\n      // Reset for a specific user\n      const userKey = `user_${userId}`;\n      this.signalUsage.delete(userKey);\n    } else {\n      // Reset for all users\n      this.signalUsage.clear();\n    }\n    this.saveSignalUsage();\n  }\n}\nexport default new FlightDataSharingService();","map":{"version":3,"names":["FlightDataSharingService","constructor","cache","Map","signalUsage","storedUsage","localStorage","getItem","JSON","parse","error","console","getFlightData","originCode","destinationCode","originId","destinationId","flightService","cacheKey","cachedData","get","isCacheValid","timestamp","data","flightData","searchFlights","set","Date","now","SIX_HOURS","recordSignalUsage","userId","month","getMonth","year","getFullYear","monthKey","userKey","userSignals","saveSignalUsage","getUsedSignalCount","getRemainingFreeSignals","usedCount","Math","max","setItem","stringify","Array","from","entries","resetSignalUsage","delete","clear"],"sources":["C:/Users/juliu/Desktop/web/src/services/flightDataSharingService.js"],"sourcesContent":["// src/services/flightDataSharingService.js\r\n\r\n/**\r\n * Service for efficiently sharing flight data across users\r\n */\r\nclass FlightDataSharingService {\r\n  constructor() {\r\n    this.cache = new Map();\r\n    this.signalUsage = new Map();\r\n    \r\n    // Try to load signal usage from localStorage\r\n    try {\r\n      const storedUsage = localStorage.getItem('flight_signal_usage');\r\n      if (storedUsage) {\r\n        this.signalUsage = new Map(JSON.parse(storedUsage));\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading signal usage:', error);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Get flight data, using cache when possible\r\n   */\r\n  async getFlightData(originCode, destinationCode, originId, destinationId, flightService) {\r\n    // Create cache key\r\n    const cacheKey = `${originCode}-${destinationCode}`;\r\n    \r\n    // Check cache first\r\n    const cachedData = this.cache.get(cacheKey);\r\n    if (cachedData && this.isCacheValid(cachedData.timestamp)) {\r\n      return cachedData.data;\r\n    }\r\n    \r\n    // If not in cache, fetch from service\r\n    const flightData = await flightService.searchFlights(originId, destinationId);\r\n    \r\n    // Store in cache\r\n    this.cache.set(cacheKey, {\r\n      data: flightData,\r\n      timestamp: Date.now()\r\n    });\r\n    \r\n    return flightData;\r\n  }\r\n  \r\n  /**\r\n   * Check if cached data is still valid (less than 6 hours old)\r\n   */\r\n  isCacheValid(timestamp) {\r\n    const SIX_HOURS = 6 * 60 * 60 * 1000;\r\n    return (Date.now() - timestamp) < SIX_HOURS;\r\n  }\r\n  \r\n  /**\r\n   * Record signal usage for a user\r\n   */\r\n  recordSignalUsage(userId) {\r\n    const now = new Date();\r\n    const month = now.getMonth();\r\n    const year = now.getFullYear();\r\n    const monthKey = `${year}-${month}`;\r\n    \r\n    // Get user's signals\r\n    const userKey = `user_${userId}`;\r\n    const userSignals = this.signalUsage.get(userKey) || {};\r\n    \r\n    // Update or set the count for current month\r\n    userSignals[monthKey] = (userSignals[monthKey] || 0) + 1;\r\n    \r\n    // Save back to the map\r\n    this.signalUsage.set(userKey, userSignals);\r\n    \r\n    // Persist to localStorage\r\n    this.saveSignalUsage();\r\n    \r\n    return userSignals[monthKey];\r\n  }\r\n  \r\n  /**\r\n   * Get the number of signals used this month\r\n   */\r\n  getUsedSignalCount(userId) {\r\n    const now = new Date();\r\n    const month = now.getMonth();\r\n    const year = now.getFullYear();\r\n    const monthKey = `${year}-${month}`;\r\n    \r\n    const userKey = `user_${userId}`;\r\n    const userSignals = this.signalUsage.get(userKey) || {};\r\n    \r\n    return userSignals[monthKey] || 0;\r\n  }\r\n  \r\n  /**\r\n   * Get the number of remaining free signals\r\n   */\r\n  getRemainingFreeSignals(userId) {\r\n    const usedCount = this.getUsedSignalCount(userId);\r\n    return Math.max(0, 3 - usedCount);\r\n  }\r\n  \r\n  /**\r\n   * Save signal usage to localStorage\r\n   */\r\n  saveSignalUsage() {\r\n    try {\r\n      localStorage.setItem('flight_signal_usage', \r\n        JSON.stringify(Array.from(this.signalUsage.entries())));\r\n    } catch (error) {\r\n      console.error('Error saving signal usage:', error);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Reset signal usage (for testing)\r\n   */\r\n  resetSignalUsage(userId) {\r\n    if (userId) {\r\n      // Reset for a specific user\r\n      const userKey = `user_${userId}`;\r\n      this.signalUsage.delete(userKey);\r\n    } else {\r\n      // Reset for all users\r\n      this.signalUsage.clear();\r\n    }\r\n    \r\n    this.saveSignalUsage();\r\n  }\r\n}\r\n\r\nexport default new FlightDataSharingService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}