{"ast":null,"code":"/**\r\n * Settings Manager - A singleton to manage theme and accessibility settings\r\n * This prevents multiple components from applying the same settings simultaneously\r\n */\n\n// Track settings state\nlet currentSettings = {\n  appearance: null,\n  accessibility: null,\n  language: null\n};\n\n// Locks to prevent concurrent settings application\nlet isApplyingTheme = false;\nlet isApplyingAccessibility = false;\nlet pendingThemeChange = null;\nlet pendingAccessibilityChange = null;\n\n/**\r\n * Apply theme settings using a singleton pattern\r\n * @param {Object} settings The settings object\r\n * @returns {boolean} Success indicator\r\n */\nexport const applyThemeSettings = settings => {\n  if (!settings || !settings.appearance) {\n    console.error(\"Invalid settings object provided to applyThemeSettings\");\n    return false;\n  }\n  const {\n    fontSize,\n    colorScheme,\n    darkMode\n  } = settings.appearance;\n\n  // Skip if settings haven't changed\n  if (currentSettings.appearance && currentSettings.appearance.fontSize === fontSize && currentSettings.appearance.colorScheme === colorScheme && currentSettings.appearance.darkMode === darkMode) {\n    return true;\n  }\n\n  // If already applying settings, store this as pending and return\n  if (isApplyingTheme) {\n    pendingThemeChange = {\n      ...settings.appearance\n    };\n    return true;\n  }\n\n  // Lock to prevent concurrent calls\n  isApplyingTheme = true;\n  try {\n    console.log(\"Applying theme settings:\", {\n      fontSize,\n      colorScheme,\n      darkMode\n    });\n\n    // Apply font size\n    document.documentElement.classList.remove('text-sm', 'text-base', 'text-lg');\n    if (fontSize === 'small') {\n      document.documentElement.classList.add('text-sm');\n    } else if (fontSize === 'medium') {\n      document.documentElement.classList.add('text-base');\n    } else if (fontSize === 'large') {\n      document.documentElement.classList.add('text-lg');\n    }\n\n    // Apply color scheme\n    const colorSchemeClasses = ['theme-blue', 'theme-purple', 'theme-green', 'theme-red', 'theme-amber', 'theme-indigo'];\n    document.documentElement.classList.remove(...colorSchemeClasses);\n    const themeClass = `theme-${colorScheme}`;\n    document.documentElement.classList.add(themeClass);\n\n    // Apply dark mode\n    if (darkMode) {\n      document.documentElement.classList.add('dark-mode');\n      document.body.classList.add('dark-mode');\n      console.log(\"Dark mode classes applied\");\n    } else {\n      document.documentElement.classList.remove('dark-mode');\n      document.body.classList.remove('dark-mode');\n      console.log(\"Dark mode classes removed\");\n    }\n\n    // Set a custom property to track current theme\n    document.documentElement.style.setProperty('--current-theme', colorScheme);\n    document.documentElement.setAttribute('data-theme', darkMode ? 'dark' : 'light');\n\n    // Update current settings\n    currentSettings.appearance = {\n      fontSize,\n      colorScheme,\n      darkMode\n    };\n    console.log(`Applied theme: ${colorScheme}, font size: ${fontSize}, dark mode: ${darkMode}`);\n    return true;\n  } catch (error) {\n    console.error(\"Error applying theme settings:\", error);\n    return false;\n  } finally {\n    // Release lock\n    isApplyingTheme = false;\n\n    // Apply any pending changes\n    if (pendingThemeChange) {\n      const pending = pendingThemeChange;\n      pendingThemeChange = null;\n      setTimeout(() => {\n        applyThemeSettings({\n          appearance: pending\n        });\n      }, 50);\n    }\n  }\n};\n\n/**\r\n * Apply accessibility settings using a singleton pattern\r\n * @param {Object} settings The settings object\r\n * @returns {boolean} Success indicator\r\n */\nexport const applyAccessibilitySettings = settings => {\n  if (!settings || !settings.accessibility) return false;\n  const {\n    highContrast,\n    reducedMotion,\n    largerClickTargets,\n    textScaling,\n    screenReaderOptimized\n  } = settings.accessibility;\n\n  // Skip if settings haven't changed\n  if (currentSettings.accessibility && currentSettings.accessibility.highContrast === highContrast && currentSettings.accessibility.reducedMotion === reducedMotion && currentSettings.accessibility.largerClickTargets === largerClickTargets && currentSettings.accessibility.textScaling === textScaling && currentSettings.accessibility.screenReaderOptimized === screenReaderOptimized) {\n    return true;\n  }\n\n  // If already applying settings, store this as pending and return\n  if (isApplyingAccessibility) {\n    pendingAccessibilityChange = {\n      ...settings.accessibility\n    };\n    return true;\n  }\n\n  // Lock to prevent concurrent calls\n  isApplyingAccessibility = true;\n  try {\n    // Apply high contrast mode\n    if (highContrast) {\n      document.documentElement.classList.add('high-contrast');\n    } else {\n      document.documentElement.classList.remove('high-contrast');\n    }\n\n    // Apply reduced motion\n    if (reducedMotion) {\n      document.documentElement.classList.add('reduced-motion');\n    } else {\n      document.documentElement.classList.remove('reduced-motion');\n    }\n\n    // Apply larger click targets\n    if (largerClickTargets) {\n      document.documentElement.classList.add('larger-targets');\n    } else {\n      document.documentElement.classList.remove('larger-targets');\n    }\n\n    // Apply text scaling\n    if (textScaling && textScaling !== 100) {\n      document.documentElement.style.setProperty('--text-scale-ratio', `${textScaling / 100}`);\n      document.documentElement.classList.add('custom-text-scaling');\n    } else {\n      document.documentElement.classList.remove('custom-text-scaling');\n      document.documentElement.style.removeProperty('--text-scale-ratio');\n    }\n\n    // Apply screen reader optimizations\n    if (screenReaderOptimized) {\n      document.documentElement.setAttribute('data-screen-reader-optimized', 'true');\n    } else {\n      document.documentElement.removeAttribute('data-screen-reader-optimized');\n    }\n\n    // Update current settings\n    currentSettings.accessibility = {\n      highContrast,\n      reducedMotion,\n      largerClickTargets,\n      textScaling,\n      screenReaderOptimized\n    };\n    return true;\n  } catch (error) {\n    console.error(\"Error applying accessibility settings:\", error);\n    return false;\n  } finally {\n    // Release lock\n    isApplyingAccessibility = false;\n\n    // Apply any pending changes\n    if (pendingAccessibilityChange) {\n      const pending = pendingAccessibilityChange;\n      pendingAccessibilityChange = null;\n      setTimeout(() => {\n        applyAccessibilitySettings({\n          accessibility: pending\n        });\n      }, 50);\n    }\n  }\n};\n\n/**\r\n * Apply language settings\r\n * @param {string} language The language code\r\n * @returns {boolean} Success indicator\r\n */\nexport const applyLanguageSettings = language => {\n  if (!language) return false;\n\n  // Skip if language hasn't changed\n  if (currentSettings.language === language) {\n    return true;\n  }\n\n  // Apply language\n  document.documentElement.setAttribute('lang', language.split('-')[0]);\n\n  // Update current settings\n  currentSettings.language = language;\n  return true;\n};\n\n/**\r\n * Initialize settings manager\r\n * This loads the CSS needed for dark mode and accessibility\r\n */\nexport const initializeSettingsManager = () => {\n  // Load the CSS file for dark mode and accessibility if not already loaded\n  if (!document.getElementById('accessibility-darkmode-css')) {\n    const link = document.createElement('link');\n    link.id = 'accessibility-darkmode-css';\n    link.rel = 'stylesheet';\n    link.href = '/accessibility-darkmode.css';\n    document.head.appendChild(link);\n  }\n};\n\n// Auto-initialize on module import\ninitializeSettingsManager();\n\n// Export an object with all methods\nexport default {\n  applyThemeSettings,\n  applyAccessibilitySettings,\n  applyLanguageSettings,\n  initializeSettingsManager\n};","map":{"version":3,"names":["currentSettings","appearance","accessibility","language","isApplyingTheme","isApplyingAccessibility","pendingThemeChange","pendingAccessibilityChange","applyThemeSettings","settings","console","error","fontSize","colorScheme","darkMode","log","document","documentElement","classList","remove","add","colorSchemeClasses","themeClass","body","style","setProperty","setAttribute","pending","setTimeout","applyAccessibilitySettings","highContrast","reducedMotion","largerClickTargets","textScaling","screenReaderOptimized","removeProperty","removeAttribute","applyLanguageSettings","split","initializeSettingsManager","getElementById","link","createElement","id","rel","href","head","appendChild"],"sources":["C:/Users/juliu/Desktop/web/src/utils/settingsManager.js"],"sourcesContent":["/**\r\n * Settings Manager - A singleton to manage theme and accessibility settings\r\n * This prevents multiple components from applying the same settings simultaneously\r\n */\r\n\r\n// Track settings state\r\nlet currentSettings = {\r\n    appearance: null,\r\n    accessibility: null,\r\n    language: null\r\n  };\r\n  \r\n  // Locks to prevent concurrent settings application\r\n  let isApplyingTheme = false;\r\n  let isApplyingAccessibility = false;\r\n  let pendingThemeChange = null;\r\n  let pendingAccessibilityChange = null;\r\n  \r\n  /**\r\n   * Apply theme settings using a singleton pattern\r\n   * @param {Object} settings The settings object\r\n   * @returns {boolean} Success indicator\r\n   */\r\n  export const applyThemeSettings = (settings) => {\r\n    if (!settings || !settings.appearance) {\r\n      console.error(\"Invalid settings object provided to applyThemeSettings\");\r\n      return false;\r\n    }\r\n    \r\n    const { fontSize, colorScheme, darkMode } = settings.appearance;\r\n    \r\n    // Skip if settings haven't changed\r\n    if (currentSettings.appearance && \r\n        currentSettings.appearance.fontSize === fontSize &&\r\n        currentSettings.appearance.colorScheme === colorScheme && \r\n        currentSettings.appearance.darkMode === darkMode) {\r\n      return true;\r\n    }\r\n    \r\n    // If already applying settings, store this as pending and return\r\n    if (isApplyingTheme) {\r\n      pendingThemeChange = { ...settings.appearance };\r\n      return true;\r\n    }\r\n    \r\n    // Lock to prevent concurrent calls\r\n    isApplyingTheme = true;\r\n    \r\n    try {\r\n      console.log(\"Applying theme settings:\", { fontSize, colorScheme, darkMode });\r\n      \r\n      // Apply font size\r\n      document.documentElement.classList.remove('text-sm', 'text-base', 'text-lg');\r\n      if (fontSize === 'small') {\r\n        document.documentElement.classList.add('text-sm');\r\n      } else if (fontSize === 'medium') {\r\n        document.documentElement.classList.add('text-base');\r\n      } else if (fontSize === 'large') {\r\n        document.documentElement.classList.add('text-lg');\r\n      }\r\n      \r\n      // Apply color scheme\r\n      const colorSchemeClasses = [\r\n        'theme-blue', 'theme-purple', 'theme-green', \r\n        'theme-red', 'theme-amber', 'theme-indigo'\r\n      ];\r\n      document.documentElement.classList.remove(...colorSchemeClasses);\r\n      \r\n      const themeClass = `theme-${colorScheme}`;\r\n      document.documentElement.classList.add(themeClass);\r\n      \r\n      // Apply dark mode\r\n      if (darkMode) {\r\n        document.documentElement.classList.add('dark-mode');\r\n        document.body.classList.add('dark-mode');\r\n        console.log(\"Dark mode classes applied\");\r\n      } else {\r\n        document.documentElement.classList.remove('dark-mode');\r\n        document.body.classList.remove('dark-mode');\r\n        console.log(\"Dark mode classes removed\");\r\n      }\r\n      \r\n      // Set a custom property to track current theme\r\n      document.documentElement.style.setProperty('--current-theme', colorScheme);\r\n      document.documentElement.setAttribute('data-theme', darkMode ? 'dark' : 'light');\r\n      \r\n      // Update current settings\r\n      currentSettings.appearance = { fontSize, colorScheme, darkMode };\r\n      \r\n      console.log(`Applied theme: ${colorScheme}, font size: ${fontSize}, dark mode: ${darkMode}`);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error applying theme settings:\", error);\r\n      return false;\r\n    } finally {\r\n      // Release lock\r\n      isApplyingTheme = false;\r\n      \r\n      // Apply any pending changes\r\n      if (pendingThemeChange) {\r\n        const pending = pendingThemeChange;\r\n        pendingThemeChange = null;\r\n        setTimeout(() => {\r\n          applyThemeSettings({ appearance: pending });\r\n        }, 50);\r\n      }\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Apply accessibility settings using a singleton pattern\r\n   * @param {Object} settings The settings object\r\n   * @returns {boolean} Success indicator\r\n   */\r\n  export const applyAccessibilitySettings = (settings) => {\r\n    if (!settings || !settings.accessibility) return false;\r\n  \r\n    const { highContrast, reducedMotion, largerClickTargets, textScaling, screenReaderOptimized } = settings.accessibility;\r\n    \r\n    // Skip if settings haven't changed\r\n    if (currentSettings.accessibility && \r\n        currentSettings.accessibility.highContrast === highContrast &&\r\n        currentSettings.accessibility.reducedMotion === reducedMotion &&\r\n        currentSettings.accessibility.largerClickTargets === largerClickTargets &&\r\n        currentSettings.accessibility.textScaling === textScaling &&\r\n        currentSettings.accessibility.screenReaderOptimized === screenReaderOptimized) {\r\n      return true;\r\n    }\r\n    \r\n    // If already applying settings, store this as pending and return\r\n    if (isApplyingAccessibility) {\r\n      pendingAccessibilityChange = { ...settings.accessibility };\r\n      return true;\r\n    }\r\n    \r\n    // Lock to prevent concurrent calls\r\n    isApplyingAccessibility = true;\r\n    \r\n    try {\r\n      // Apply high contrast mode\r\n      if (highContrast) {\r\n        document.documentElement.classList.add('high-contrast');\r\n      } else {\r\n        document.documentElement.classList.remove('high-contrast');\r\n      }\r\n  \r\n      // Apply reduced motion\r\n      if (reducedMotion) {\r\n        document.documentElement.classList.add('reduced-motion');\r\n      } else {\r\n        document.documentElement.classList.remove('reduced-motion');\r\n      }\r\n  \r\n      // Apply larger click targets\r\n      if (largerClickTargets) {\r\n        document.documentElement.classList.add('larger-targets');\r\n      } else {\r\n        document.documentElement.classList.remove('larger-targets');\r\n      }\r\n  \r\n      // Apply text scaling\r\n      if (textScaling && textScaling !== 100) {\r\n        document.documentElement.style.setProperty('--text-scale-ratio', `${textScaling / 100}`);\r\n        document.documentElement.classList.add('custom-text-scaling');\r\n      } else {\r\n        document.documentElement.classList.remove('custom-text-scaling');\r\n        document.documentElement.style.removeProperty('--text-scale-ratio');\r\n      }\r\n  \r\n      // Apply screen reader optimizations\r\n      if (screenReaderOptimized) {\r\n        document.documentElement.setAttribute('data-screen-reader-optimized', 'true');\r\n      } else {\r\n        document.documentElement.removeAttribute('data-screen-reader-optimized');\r\n      }\r\n      \r\n      // Update current settings\r\n      currentSettings.accessibility = { highContrast, reducedMotion, largerClickTargets, textScaling, screenReaderOptimized };\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error applying accessibility settings:\", error);\r\n      return false;\r\n    } finally {\r\n      // Release lock\r\n      isApplyingAccessibility = false;\r\n      \r\n      // Apply any pending changes\r\n      if (pendingAccessibilityChange) {\r\n        const pending = pendingAccessibilityChange;\r\n        pendingAccessibilityChange = null;\r\n        setTimeout(() => {\r\n          applyAccessibilitySettings({ accessibility: pending });\r\n        }, 50);\r\n      }\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Apply language settings\r\n   * @param {string} language The language code\r\n   * @returns {boolean} Success indicator\r\n   */\r\n  export const applyLanguageSettings = (language) => {\r\n    if (!language) return false;\r\n    \r\n    // Skip if language hasn't changed\r\n    if (currentSettings.language === language) {\r\n      return true;\r\n    }\r\n    \r\n    // Apply language\r\n    document.documentElement.setAttribute('lang', language.split('-')[0]);\r\n    \r\n    // Update current settings\r\n    currentSettings.language = language;\r\n    \r\n    return true;\r\n  };\r\n  \r\n  /**\r\n   * Initialize settings manager\r\n   * This loads the CSS needed for dark mode and accessibility\r\n   */\r\n  export const initializeSettingsManager = () => {\r\n    // Load the CSS file for dark mode and accessibility if not already loaded\r\n    if (!document.getElementById('accessibility-darkmode-css')) {\r\n      const link = document.createElement('link');\r\n      link.id = 'accessibility-darkmode-css';\r\n      link.rel = 'stylesheet';\r\n      link.href = '/accessibility-darkmode.css';\r\n      document.head.appendChild(link);\r\n    }\r\n  };\r\n  \r\n  // Auto-initialize on module import\r\n  initializeSettingsManager();\r\n  \r\n  // Export an object with all methods\r\n  export default {\r\n    applyThemeSettings,\r\n    applyAccessibilitySettings,\r\n    applyLanguageSettings,\r\n    initializeSettingsManager\r\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}