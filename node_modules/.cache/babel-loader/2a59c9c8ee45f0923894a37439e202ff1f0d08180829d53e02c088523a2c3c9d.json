{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useSettings } from '../context/SettingsContext';\nimport { formatCurrency, formatDate, formatTemperature, formatDistance } from '../utils/settingsUtils';\n\n/**\r\n * Custom hook for accessing and using application settings\r\n * Provides formatted values based on user preferences\r\n * \r\n * @returns {Object} Utility functions and settings\r\n */\nexport const useAppSettings = () => {\n  _s();\n  const {\n    settings,\n    updateSettings,\n    resetSettings\n  } = useSettings();\n\n  /**\r\n   * Format currency according to user settings\r\n   * \r\n   * @param {number} amount Amount to format\r\n   * @returns {string} Formatted currency string\r\n   */\n  const currency = amount => formatCurrency(amount, settings);\n\n  /**\r\n   * Format date according to user settings\r\n   * \r\n   * @param {string|Date} date Date to format\r\n   * @returns {string} Formatted date string\r\n   */\n  const date = dateValue => formatDate(dateValue, settings);\n\n  /**\r\n   * Format temperature according to user settings\r\n   * \r\n   * @param {number} celsius Temperature in Celsius\r\n   * @returns {string} Formatted temperature string\r\n   */\n  const temperature = celsius => formatTemperature(celsius, settings);\n\n  /**\r\n   * Format distance according to user settings\r\n   * \r\n   * @param {number} kilometers Distance in kilometers\r\n   * @returns {string} Formatted distance string\r\n   */\n  const distance = kilometers => formatDistance(kilometers, settings);\n\n  /**\r\n   * Get current color scheme\r\n   * \r\n   * @returns {string} Current color scheme\r\n   */\n  const getColorScheme = () => settings.appearance.colorScheme;\n\n  /**\r\n   * Get current font size\r\n   * \r\n   * @returns {string} Current font size\r\n   */\n  const getFontSize = () => settings.appearance.fontSize;\n\n  /**\r\n   * Check if dark mode is enabled\r\n   * \r\n   * @returns {boolean} Whether dark mode is enabled\r\n   */\n  const isDarkMode = () => {\n    var _settings$appearance;\n    return ((_settings$appearance = settings.appearance) === null || _settings$appearance === void 0 ? void 0 : _settings$appearance.darkMode) || false;\n  };\n\n  /**\r\n   * Check if a notification type is enabled\r\n   * \r\n   * @param {string} type Notification type (tripReminders, taskReminders, budgetAlerts, emailNotifications)\r\n   * @returns {boolean} Whether the notification type is enabled\r\n   */\n  const isNotificationEnabled = type => {\n    if (!settings.notifications) return false;\n    return !!settings.notifications[type];\n  };\n\n  /**\r\n   * Get the email address for notifications\r\n   * \r\n   * @returns {string} Email address for notifications\r\n   */\n  const getNotificationEmail = () => {\n    var _settings$notificatio;\n    return ((_settings$notificatio = settings.notifications) === null || _settings$notificatio === void 0 ? void 0 : _settings$notificatio.emailAddress) || '';\n  };\n\n  /**\r\n   * Get the notification frequency\r\n   * \r\n   * @returns {string} Notification frequency (instant, daily, weekly)\r\n   */\n  const getNotificationFrequency = () => {\n    var _settings$notificatio2;\n    return ((_settings$notificatio2 = settings.notifications) === null || _settings$notificatio2 === void 0 ? void 0 : _settings$notificatio2.emailFrequency) || 'daily';\n  };\n\n  /**\r\n   * Get current language\r\n   * \r\n   * @returns {string} Current language code\r\n   */\n  const getLanguage = () => settings.preferences.language;\n\n  /**\r\n   * Check if an accessibility feature is enabled\r\n   * \r\n   * @param {string} feature Accessibility feature (highContrast, reducedMotion, largerClickTargets, screenReaderOptimized)\r\n   * @returns {boolean} Whether the feature is enabled\r\n   */\n  const isAccessibilityFeatureEnabled = feature => {\n    if (!settings.accessibility) return false;\n    return !!settings.accessibility[feature];\n  };\n\n  /**\r\n   * Get text scaling percentage\r\n   * \r\n   * @returns {number} Text scaling percentage (100-200)\r\n   */\n  const getTextScaling = () => {\n    var _settings$accessibili;\n    return ((_settings$accessibili = settings.accessibility) === null || _settings$accessibili === void 0 ? void 0 : _settings$accessibili.textScaling) || 100;\n  };\n\n  /**\r\n   * Check if location sharing is enabled\r\n   * \r\n   * @returns {boolean} Whether location sharing is enabled\r\n   */\n  const isLocationSharingEnabled = () => {\n    var _settings$privacy;\n    return ((_settings$privacy = settings.privacy) === null || _settings$privacy === void 0 ? void 0 : _settings$privacy.shareLocationData) || false;\n  };\n\n  /**\r\n   * Check if analytics collection is enabled\r\n   * \r\n   * @returns {boolean} Whether analytics collection is enabled\r\n   */\n  const isAnalyticsEnabled = () => {\n    var _settings$privacy2;\n    return ((_settings$privacy2 = settings.privacy) === null || _settings$privacy2 === void 0 ? void 0 : _settings$privacy2.collectAnalytics) || false;\n  };\n\n  /**\r\n   * Check if auto-save is enabled\r\n   * \r\n   * @returns {boolean} Whether auto-save is enabled\r\n   */\n  const isAutoSaveEnabled = () => {\n    var _settings$privacy3;\n    return ((_settings$privacy3 = settings.privacy) === null || _settings$privacy3 === void 0 ? void 0 : _settings$privacy3.autoSaveEnabled) || false;\n  };\n\n  /**\r\n   * Get data retention period\r\n   * \r\n   * @returns {string} Data retention period (1month, 3months, 6months, 1year, forever)\r\n   */\n  const getDataRetention = () => {\n    var _settings$privacy4;\n    return ((_settings$privacy4 = settings.privacy) === null || _settings$privacy4 === void 0 ? void 0 : _settings$privacy4.dataRetention) || 'forever';\n  };\n  return {\n    settings,\n    updateSettings,\n    resetSettings,\n    currency,\n    date,\n    temperature,\n    distance,\n    getColorScheme,\n    getFontSize,\n    isDarkMode,\n    isNotificationEnabled,\n    getNotificationEmail,\n    getNotificationFrequency,\n    getLanguage,\n    isAccessibilityFeatureEnabled,\n    getTextScaling,\n    isLocationSharingEnabled,\n    isAnalyticsEnabled,\n    isAutoSaveEnabled,\n    getDataRetention\n  };\n};\n_s(useAppSettings, \"9D/N5lgR6DOxiA3IK+hBcIu7eiY=\", false, function () {\n  return [useSettings];\n});\nexport default useAppSettings;","map":{"version":3,"names":["useSettings","formatCurrency","formatDate","formatTemperature","formatDistance","useAppSettings","_s","settings","updateSettings","resetSettings","currency","amount","date","dateValue","temperature","celsius","distance","kilometers","getColorScheme","appearance","colorScheme","getFontSize","fontSize","isDarkMode","_settings$appearance","darkMode","isNotificationEnabled","type","notifications","getNotificationEmail","_settings$notificatio","emailAddress","getNotificationFrequency","_settings$notificatio2","emailFrequency","getLanguage","preferences","language","isAccessibilityFeatureEnabled","feature","accessibility","getTextScaling","_settings$accessibili","textScaling","isLocationSharingEnabled","_settings$privacy","privacy","shareLocationData","isAnalyticsEnabled","_settings$privacy2","collectAnalytics","isAutoSaveEnabled","_settings$privacy3","autoSaveEnabled","getDataRetention","_settings$privacy4","dataRetention"],"sources":["C:/Users/juliu/Desktop/web/src/utils/useAppSettings.js"],"sourcesContent":["import { useSettings } from '../context/SettingsContext';\r\nimport { formatCurrency, formatDate, formatTemperature, formatDistance } from '../utils/settingsUtils';\r\n\r\n/**\r\n * Custom hook for accessing and using application settings\r\n * Provides formatted values based on user preferences\r\n * \r\n * @returns {Object} Utility functions and settings\r\n */\r\nexport const useAppSettings = () => {\r\n  const { settings, updateSettings, resetSettings } = useSettings();\r\n\r\n  /**\r\n   * Format currency according to user settings\r\n   * \r\n   * @param {number} amount Amount to format\r\n   * @returns {string} Formatted currency string\r\n   */\r\n  const currency = (amount) => formatCurrency(amount, settings);\r\n  \r\n  /**\r\n   * Format date according to user settings\r\n   * \r\n   * @param {string|Date} date Date to format\r\n   * @returns {string} Formatted date string\r\n   */\r\n  const date = (dateValue) => formatDate(dateValue, settings);\r\n  \r\n  /**\r\n   * Format temperature according to user settings\r\n   * \r\n   * @param {number} celsius Temperature in Celsius\r\n   * @returns {string} Formatted temperature string\r\n   */\r\n  const temperature = (celsius) => formatTemperature(celsius, settings);\r\n  \r\n  /**\r\n   * Format distance according to user settings\r\n   * \r\n   * @param {number} kilometers Distance in kilometers\r\n   * @returns {string} Formatted distance string\r\n   */\r\n  const distance = (kilometers) => formatDistance(kilometers, settings);\r\n  \r\n  /**\r\n   * Get current color scheme\r\n   * \r\n   * @returns {string} Current color scheme\r\n   */\r\n  const getColorScheme = () => settings.appearance.colorScheme;\r\n  \r\n  /**\r\n   * Get current font size\r\n   * \r\n   * @returns {string} Current font size\r\n   */\r\n  const getFontSize = () => settings.appearance.fontSize;\r\n  \r\n  /**\r\n   * Check if dark mode is enabled\r\n   * \r\n   * @returns {boolean} Whether dark mode is enabled\r\n   */\r\n  const isDarkMode = () => settings.appearance?.darkMode || false;\r\n  \r\n  /**\r\n   * Check if a notification type is enabled\r\n   * \r\n   * @param {string} type Notification type (tripReminders, taskReminders, budgetAlerts, emailNotifications)\r\n   * @returns {boolean} Whether the notification type is enabled\r\n   */\r\n  const isNotificationEnabled = (type) => {\r\n    if (!settings.notifications) return false;\r\n    return !!settings.notifications[type];\r\n  };\r\n  \r\n  /**\r\n   * Get the email address for notifications\r\n   * \r\n   * @returns {string} Email address for notifications\r\n   */\r\n  const getNotificationEmail = () => settings.notifications?.emailAddress || '';\r\n  \r\n  /**\r\n   * Get the notification frequency\r\n   * \r\n   * @returns {string} Notification frequency (instant, daily, weekly)\r\n   */\r\n  const getNotificationFrequency = () => settings.notifications?.emailFrequency || 'daily';\r\n  \r\n  /**\r\n   * Get current language\r\n   * \r\n   * @returns {string} Current language code\r\n   */\r\n  const getLanguage = () => settings.preferences.language;\r\n  \r\n  /**\r\n   * Check if an accessibility feature is enabled\r\n   * \r\n   * @param {string} feature Accessibility feature (highContrast, reducedMotion, largerClickTargets, screenReaderOptimized)\r\n   * @returns {boolean} Whether the feature is enabled\r\n   */\r\n  const isAccessibilityFeatureEnabled = (feature) => {\r\n    if (!settings.accessibility) return false;\r\n    return !!settings.accessibility[feature];\r\n  };\r\n  \r\n  /**\r\n   * Get text scaling percentage\r\n   * \r\n   * @returns {number} Text scaling percentage (100-200)\r\n   */\r\n  const getTextScaling = () => settings.accessibility?.textScaling || 100;\r\n  \r\n  /**\r\n   * Check if location sharing is enabled\r\n   * \r\n   * @returns {boolean} Whether location sharing is enabled\r\n   */\r\n  const isLocationSharingEnabled = () => settings.privacy?.shareLocationData || false;\r\n  \r\n  /**\r\n   * Check if analytics collection is enabled\r\n   * \r\n   * @returns {boolean} Whether analytics collection is enabled\r\n   */\r\n  const isAnalyticsEnabled = () => settings.privacy?.collectAnalytics || false;\r\n  \r\n  /**\r\n   * Check if auto-save is enabled\r\n   * \r\n   * @returns {boolean} Whether auto-save is enabled\r\n   */\r\n  const isAutoSaveEnabled = () => settings.privacy?.autoSaveEnabled || false;\r\n  \r\n  /**\r\n   * Get data retention period\r\n   * \r\n   * @returns {string} Data retention period (1month, 3months, 6months, 1year, forever)\r\n   */\r\n  const getDataRetention = () => settings.privacy?.dataRetention || 'forever';\r\n  \r\n  return {\r\n    settings,\r\n    updateSettings,\r\n    resetSettings,\r\n    currency,\r\n    date,\r\n    temperature,\r\n    distance,\r\n    getColorScheme,\r\n    getFontSize,\r\n    isDarkMode,\r\n    isNotificationEnabled,\r\n    getNotificationEmail,\r\n    getNotificationFrequency,\r\n    getLanguage,\r\n    isAccessibilityFeatureEnabled,\r\n    getTextScaling,\r\n    isLocationSharingEnabled,\r\n    isAnalyticsEnabled,\r\n    isAutoSaveEnabled,\r\n    getDataRetention\r\n  };\r\n};\r\n\r\nexport default useAppSettings;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}