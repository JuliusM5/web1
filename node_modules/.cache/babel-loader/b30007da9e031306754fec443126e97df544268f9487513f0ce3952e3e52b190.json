{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useMobileSubscription.js\n\nimport { useContext } from 'react';\nimport MobileSubscriptionContext from '../context/MobileSubscriptionContext';\n\n/**\r\n * Hook for accessing mobile subscription functionality\r\n * Specifically designed for mobile platforms (iOS/Android)\r\n */\nexport const useMobileSubscription = () => {\n  _s();\n  const context = useContext(MobileSubscriptionContext);\n  if (!context) {\n    throw new Error('useMobileSubscription must be used within a MobileSubscriptionProvider');\n  }\n  return {\n    // Subscription state\n    isSubscribed: context.isSubscribed,\n    isLoading: context.isLoading,\n    isProcessing: context.isProcessing,\n    products: context.products,\n    plan: context.plan,\n    expiresAt: context.expiresAt,\n    error: context.error,\n    // Subscription actions\n    purchaseSubscription: context.purchaseSubscription,\n    restorePurchases: context.restorePurchases,\n    activateWithCode: context.activateWithCode,\n    refreshSubscription: context.refreshSubscription,\n    clearError: context.clearError,\n    // Helper functions\n    isPremiumFeatureAvailable: featureName => {\n      var _context$plan, _context$plan2;\n      // If not subscribed, check if it's a free feature\n      if (!context.isSubscribed) {\n        const freeFeatures = ['basic_search', 'limited_alerts'];\n        return freeFeatures.includes(featureName);\n      }\n\n      // If subscribed, check if the feature is available in their plan\n      // Note: In mobile we use full product IDs like 'com.yourapp.monthly_premium'\n      const planType = (_context$plan = context.plan) !== null && _context$plan !== void 0 && _context$plan.includes('monthly') ? 'monthly' : (_context$plan2 = context.plan) !== null && _context$plan2 !== void 0 && _context$plan2.includes('yearly') ? 'yearly' : null;\n      const featureMap = {\n        monthly: ['premium_deals', 'unlimited_alerts', 'priority_notifications', 'full_search'],\n        yearly: ['premium_deals', 'unlimited_alerts', 'priority_notifications', 'full_search', 'historical_data', 'price_predictions']\n      };\n\n      // Allow access if subscribed and feature exists in their plan type\n      return planType && featureMap[planType] && featureMap[planType].includes(featureName);\n    },\n    // Get formatted product price\n    getFormattedPrice: productId => {\n      const product = context.products.find(p => p.productId === productId);\n      return product ? product.localizedPrice : '';\n    },\n    // Get the days remaining in subscription\n    getDaysRemaining: () => {\n      if (!context.isSubscribed || !context.expiresAt) return 0;\n      const now = new Date();\n      const expiry = new Date(context.expiresAt);\n      const diffTime = expiry - now;\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      return Math.max(0, diffDays);\n    },\n    // Format expiry date for display\n    getFormattedExpiryDate: () => {\n      if (!context.expiresAt) return 'N/A';\n      const date = new Date(context.expiresAt);\n      return date.toLocaleDateString(undefined, {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    }\n  };\n};\n_s(useMobileSubscription, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default useMobileSubscription;","map":{"version":3,"names":["useContext","MobileSubscriptionContext","useMobileSubscription","_s","context","Error","isSubscribed","isLoading","isProcessing","products","plan","expiresAt","error","purchaseSubscription","restorePurchases","activateWithCode","refreshSubscription","clearError","isPremiumFeatureAvailable","featureName","_context$plan","_context$plan2","freeFeatures","includes","planType","featureMap","monthly","yearly","getFormattedPrice","productId","product","find","p","localizedPrice","getDaysRemaining","now","Date","expiry","diffTime","diffDays","Math","ceil","max","getFormattedExpiryDate","date","toLocaleDateString","undefined","year","month","day"],"sources":["C:/Users/juliu/Desktop/web/src/hooks/useMobileSubscription.js"],"sourcesContent":["// src/hooks/useMobileSubscription.js\r\n\r\nimport { useContext } from 'react';\r\nimport MobileSubscriptionContext from '../context/MobileSubscriptionContext';\r\n\r\n/**\r\n * Hook for accessing mobile subscription functionality\r\n * Specifically designed for mobile platforms (iOS/Android)\r\n */\r\nexport const useMobileSubscription = () => {\r\n  const context = useContext(MobileSubscriptionContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('useMobileSubscription must be used within a MobileSubscriptionProvider');\r\n  }\r\n  \r\n  return {\r\n    // Subscription state\r\n    isSubscribed: context.isSubscribed,\r\n    isLoading: context.isLoading,\r\n    isProcessing: context.isProcessing,\r\n    products: context.products,\r\n    plan: context.plan,\r\n    expiresAt: context.expiresAt,\r\n    error: context.error,\r\n    \r\n    // Subscription actions\r\n    purchaseSubscription: context.purchaseSubscription,\r\n    restorePurchases: context.restorePurchases,\r\n    activateWithCode: context.activateWithCode,\r\n    refreshSubscription: context.refreshSubscription,\r\n    clearError: context.clearError,\r\n    \r\n    // Helper functions\r\n    isPremiumFeatureAvailable: (featureName) => {\r\n      // If not subscribed, check if it's a free feature\r\n      if (!context.isSubscribed) {\r\n        const freeFeatures = ['basic_search', 'limited_alerts'];\r\n        return freeFeatures.includes(featureName);\r\n      }\r\n      \r\n      // If subscribed, check if the feature is available in their plan\r\n      // Note: In mobile we use full product IDs like 'com.yourapp.monthly_premium'\r\n      const planType = context.plan?.includes('monthly') \r\n        ? 'monthly' \r\n        : context.plan?.includes('yearly') \r\n          ? 'yearly' \r\n          : null;\r\n      \r\n      const featureMap = {\r\n        monthly: [\r\n          'premium_deals',\r\n          'unlimited_alerts',\r\n          'priority_notifications',\r\n          'full_search',\r\n        ],\r\n        yearly: [\r\n          'premium_deals',\r\n          'unlimited_alerts', \r\n          'priority_notifications',\r\n          'full_search',\r\n          'historical_data',\r\n          'price_predictions'\r\n        ]\r\n      };\r\n      \r\n      // Allow access if subscribed and feature exists in their plan type\r\n      return planType && \r\n             featureMap[planType] && \r\n             featureMap[planType].includes(featureName);\r\n    },\r\n    \r\n    // Get formatted product price\r\n    getFormattedPrice: (productId) => {\r\n      const product = context.products.find(p => p.productId === productId);\r\n      return product ? product.localizedPrice : '';\r\n    },\r\n    \r\n    // Get the days remaining in subscription\r\n    getDaysRemaining: () => {\r\n      if (!context.isSubscribed || !context.expiresAt) return 0;\r\n      \r\n      const now = new Date();\r\n      const expiry = new Date(context.expiresAt);\r\n      const diffTime = expiry - now;\r\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n      \r\n      return Math.max(0, diffDays);\r\n    },\r\n    \r\n    // Format expiry date for display\r\n    getFormattedExpiryDate: () => {\r\n      if (!context.expiresAt) return 'N/A';\r\n      \r\n      const date = new Date(context.expiresAt);\r\n      return date.toLocaleDateString(undefined, {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\nexport default useMobileSubscription;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}