{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\components\\\\UI\\\\AppSettingsWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useCallback } from 'react';\nimport { useSettings } from '../../context/SettingsContext';\nimport { applyThemeSettings, applyAccessibilitySettings } from '../../utils/settingsUtils';\n\n/**\r\n * Component that wraps the application and applies the current theme and settings\r\n * \r\n * @param {Object} props Component props\r\n * @param {React.ReactNode} props.children Child components\r\n * @returns {React.ReactNode} Wrapped children\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AppSettingsWrapper({\n  children\n}) {\n  _s();\n  const {\n    settings\n  } = useSettings();\n  // Store settings in a ref to avoid unnecessary re-renders\n  const settingsRef = useRef(settings);\n  // Track initialization state\n  const isInitialized = useRef(false);\n\n  // Function to deeply compare objects\n  const isEqual = useCallback((obj1, obj2) => {\n    if (obj1 === obj2) return true;\n    if (!obj1 || !obj2) return false;\n\n    // Compare primitive values\n    if (typeof obj1 !== 'object' && typeof obj2 !== 'object') {\n      return obj1 === obj2;\n    }\n    const keys1 = Object.keys(obj1);\n    const keys2 = Object.keys(obj2);\n    if (keys1.length !== keys2.length) return false;\n    return keys1.every(key => {\n      if (typeof obj1[key] === 'object' && obj1[key] !== null && typeof obj2[key] === 'object' && obj2[key] !== null) {\n        return isEqual(obj1[key], obj2[key]);\n      }\n      return obj1[key] === obj2[key];\n    });\n  }, []);\n\n  // Run this effect only once to set up CSS\n  useEffect(() => {\n    // Load the CSS file for dark mode and accessibility\n    if (!document.getElementById('accessibility-darkmode-css')) {\n      const link = document.createElement('link');\n      link.id = 'accessibility-darkmode-css';\n      link.rel = 'stylesheet';\n      link.href = '/accessibility-darkmode.css';\n      document.head.appendChild(link);\n    }\n  }, []);\n\n  // Handle settings updates\n  useEffect(() => {\n    var _settingsRef$current, _settingsRef$current2, _settingsRef$current3, _settingsRef$current4, _settings$preferences;\n    if (!settings) return;\n\n    // Skip if settings haven't changed (deep comparison)\n    if (isInitialized.current && isEqual((_settingsRef$current = settingsRef.current) === null || _settingsRef$current === void 0 ? void 0 : _settingsRef$current.appearance, settings.appearance) && isEqual((_settingsRef$current2 = settingsRef.current) === null || _settingsRef$current2 === void 0 ? void 0 : _settingsRef$current2.accessibility, settings.accessibility) && ((_settingsRef$current3 = settingsRef.current) === null || _settingsRef$current3 === void 0 ? void 0 : (_settingsRef$current4 = _settingsRef$current3.preferences) === null || _settingsRef$current4 === void 0 ? void 0 : _settingsRef$current4.language) === ((_settings$preferences = settings.preferences) === null || _settings$preferences === void 0 ? void 0 : _settings$preferences.language)) {\n      return;\n    }\n\n    // Apply settings only when they've changed\n    const applySettings = () => {\n      // Apply theme first (which includes dark mode)\n      applyThemeSettings(settings);\n\n      // Apply accessibility settings separately\n      applyAccessibilitySettings(settings);\n\n      // Apply language\n      if (settings.preferences && settings.preferences.language) {\n        document.documentElement.setAttribute('lang', settings.preferences.language.split('-')[0]);\n      }\n    };\n\n    // On first run, initialize immediately\n    if (!isInitialized.current) {\n      applySettings();\n      isInitialized.current = true;\n    } else {\n      // Otherwise, debounce application\n      const timeoutId = setTimeout(applySettings, 50);\n      return () => clearTimeout(timeoutId);\n    }\n\n    // Update stored reference\n    settingsRef.current = {\n      ...settings\n    };\n  }, [settings, isEqual]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(AppSettingsWrapper, \"ZI/UeHg9l/G73PKpIMQq+G0BIfo=\", false, function () {\n  return [useSettings];\n});\n_c = AppSettingsWrapper;\nexport default AppSettingsWrapper;\nvar _c;\n$RefreshReg$(_c, \"AppSettingsWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useCallback","useSettings","applyThemeSettings","applyAccessibilitySettings","jsxDEV","_jsxDEV","AppSettingsWrapper","children","_s","settings","settingsRef","isInitialized","isEqual","obj1","obj2","keys1","Object","keys","keys2","length","every","key","document","getElementById","link","createElement","id","rel","href","head","appendChild","_settingsRef$current","_settingsRef$current2","_settingsRef$current3","_settingsRef$current4","_settings$preferences","current","appearance","accessibility","preferences","language","applySettings","documentElement","setAttribute","split","timeoutId","setTimeout","clearTimeout","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/components/UI/AppSettingsWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef, useCallback } from 'react';\r\nimport { useSettings } from '../../context/SettingsContext';\r\nimport { applyThemeSettings, applyAccessibilitySettings } from '../../utils/settingsUtils';\r\n\r\n/**\r\n * Component that wraps the application and applies the current theme and settings\r\n * \r\n * @param {Object} props Component props\r\n * @param {React.ReactNode} props.children Child components\r\n * @returns {React.ReactNode} Wrapped children\r\n */\r\nfunction AppSettingsWrapper({ children }) {\r\n  const { settings } = useSettings();\r\n  // Store settings in a ref to avoid unnecessary re-renders\r\n  const settingsRef = useRef(settings);\r\n  // Track initialization state\r\n  const isInitialized = useRef(false);\r\n  \r\n  // Function to deeply compare objects\r\n  const isEqual = useCallback((obj1, obj2) => {\r\n    if (obj1 === obj2) return true;\r\n    if (!obj1 || !obj2) return false;\r\n    \r\n    // Compare primitive values\r\n    if (typeof obj1 !== 'object' && typeof obj2 !== 'object') {\r\n      return obj1 === obj2;\r\n    }\r\n    \r\n    const keys1 = Object.keys(obj1);\r\n    const keys2 = Object.keys(obj2);\r\n    \r\n    if (keys1.length !== keys2.length) return false;\r\n    \r\n    return keys1.every(key => {\r\n      if (typeof obj1[key] === 'object' && obj1[key] !== null && \r\n          typeof obj2[key] === 'object' && obj2[key] !== null) {\r\n        return isEqual(obj1[key], obj2[key]);\r\n      }\r\n      return obj1[key] === obj2[key];\r\n    });\r\n  }, []);\r\n  \r\n  // Run this effect only once to set up CSS\r\n  useEffect(() => {\r\n    // Load the CSS file for dark mode and accessibility\r\n    if (!document.getElementById('accessibility-darkmode-css')) {\r\n      const link = document.createElement('link');\r\n      link.id = 'accessibility-darkmode-css';\r\n      link.rel = 'stylesheet';\r\n      link.href = '/accessibility-darkmode.css';\r\n      document.head.appendChild(link);\r\n    }\r\n  }, []);\r\n  \r\n  // Handle settings updates\r\n  useEffect(() => {\r\n    if (!settings) return;\r\n    \r\n    // Skip if settings haven't changed (deep comparison)\r\n    if (isInitialized.current && \r\n        isEqual(settingsRef.current?.appearance, settings.appearance) &&\r\n        isEqual(settingsRef.current?.accessibility, settings.accessibility) &&\r\n        settingsRef.current?.preferences?.language === settings.preferences?.language) {\r\n      return;\r\n    }\r\n    \r\n    // Apply settings only when they've changed\r\n    const applySettings = () => {\r\n      // Apply theme first (which includes dark mode)\r\n      applyThemeSettings(settings);\r\n      \r\n      // Apply accessibility settings separately\r\n      applyAccessibilitySettings(settings);\r\n      \r\n      // Apply language\r\n      if (settings.preferences && settings.preferences.language) {\r\n        document.documentElement.setAttribute('lang', settings.preferences.language.split('-')[0]);\r\n      }\r\n    };\r\n    \r\n    // On first run, initialize immediately\r\n    if (!isInitialized.current) {\r\n      applySettings();\r\n      isInitialized.current = true;\r\n    } else {\r\n      // Otherwise, debounce application\r\n      const timeoutId = setTimeout(applySettings, 50);\r\n      return () => clearTimeout(timeoutId);\r\n    }\r\n    \r\n    // Update stored reference\r\n    settingsRef.current = { ...settings };\r\n  }, [settings, isEqual]);\r\n  \r\n  return (\r\n    <div className=\"app-container\">\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppSettingsWrapper;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}