{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\components\\\\UI\\\\AppSettingsWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useSettings } from '../../context/SettingsContext';\nimport settingsManager from '../../utils/settingsManager';\n\n/**\r\n * ErrorBoundary component to handle any errors in settings application\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass SettingsErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null\n    };\n  }\n  static getDerivedStateFromError(error) {\n    return {\n      hasError: true,\n      error\n    };\n  }\n  componentDidCatch(error, errorInfo) {\n    console.error(\"Settings error caught:\", error, errorInfo);\n  }\n  render() {\n    if (this.state.hasError) {\n      // You could render a custom error UI here if needed\n      return this.props.children;\n    }\n    return this.props.children;\n  }\n}\n\n/**\r\n * A streamlined wrapper component that applies settings once on change\r\n * With enhanced error handling\r\n */\nfunction AppSettingsWrapper({\n  children\n}) {\n  _s();\n  const {\n    settings\n  } = useSettings();\n  const [lastApplied, setLastApplied] = useState(null);\n\n  // Apply settings when they change\n  useEffect(() => {\n    if (!settings) return;\n\n    // Skip if settings haven't changed (prevents unnecessary operations)\n    if (lastApplied && JSON.stringify(lastApplied) === JSON.stringify(settings)) {\n      return;\n    }\n    try {\n      // Use the simplified settings manager\n      const success = settingsManager.applySettings(settings);\n\n      // Only update lastApplied if the settings were successfully applied\n      if (success) {\n        setLastApplied(JSON.parse(JSON.stringify(settings)));\n      }\n    } catch (error) {\n      console.error(\"Error in settings application:\", error);\n      // We don't need to rethrow - the ErrorBoundary will catch it\n    }\n  }, [settings, lastApplied]);\n  return /*#__PURE__*/_jsxDEV(SettingsErrorBoundary, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(AppSettingsWrapper, \"qu8/mXG7FGlRGLnRxShKFR0gQj0=\", false, function () {\n  return [useSettings];\n});\n_c = AppSettingsWrapper;\nexport default AppSettingsWrapper;\nvar _c;\n$RefreshReg$(_c, \"AppSettingsWrapper\");","map":{"version":3,"names":["React","useEffect","useState","useSettings","settingsManager","jsxDEV","_jsxDEV","SettingsErrorBoundary","Component","constructor","props","state","hasError","error","getDerivedStateFromError","componentDidCatch","errorInfo","console","render","children","AppSettingsWrapper","_s","settings","lastApplied","setLastApplied","JSON","stringify","success","applySettings","parse","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/components/UI/AppSettingsWrapper.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useSettings } from '../../context/SettingsContext';\r\nimport settingsManager from '../../utils/settingsManager';\r\n\r\n/**\r\n * ErrorBoundary component to handle any errors in settings application\r\n */\r\nclass SettingsErrorBoundary extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { hasError: false, error: null };\r\n  }\r\n\r\n  static getDerivedStateFromError(error) {\r\n    return { hasError: true, error };\r\n  }\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    console.error(\"Settings error caught:\", error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // You could render a custom error UI here if needed\r\n      return this.props.children;\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\n/**\r\n * A streamlined wrapper component that applies settings once on change\r\n * With enhanced error handling\r\n */\r\nfunction AppSettingsWrapper({ children }) {\r\n  const { settings } = useSettings();\r\n  const [lastApplied, setLastApplied] = useState(null);\r\n  \r\n  // Apply settings when they change\r\n  useEffect(() => {\r\n    if (!settings) return;\r\n    \r\n    // Skip if settings haven't changed (prevents unnecessary operations)\r\n    if (lastApplied && JSON.stringify(lastApplied) === JSON.stringify(settings)) {\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      // Use the simplified settings manager\r\n      const success = settingsManager.applySettings(settings);\r\n      \r\n      // Only update lastApplied if the settings were successfully applied\r\n      if (success) {\r\n        setLastApplied(JSON.parse(JSON.stringify(settings)));\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error in settings application:\", error);\r\n      // We don't need to rethrow - the ErrorBoundary will catch it\r\n    }\r\n  }, [settings, lastApplied]);\r\n  \r\n  return (\r\n    <SettingsErrorBoundary>\r\n      <div className=\"app-container\">\r\n        {children}\r\n      </div>\r\n    </SettingsErrorBoundary>\r\n  );\r\n}\r\n\r\nexport default AppSettingsWrapper;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,OAAOC,eAAe,MAAM,6BAA6B;;AAEzD;AACA;AACA;AAFA,SAAAC,MAAA,IAAAC,OAAA;AAGA,MAAMC,qBAAqB,SAASP,KAAK,CAACQ,SAAS,CAAC;EAClDC,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MAAEC,QAAQ,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAK,CAAC;EAC/C;EAEA,OAAOC,wBAAwBA,CAACD,KAAK,EAAE;IACrC,OAAO;MAAED,QAAQ,EAAE,IAAI;MAAEC;IAAM,CAAC;EAClC;EAEAE,iBAAiBA,CAACF,KAAK,EAAEG,SAAS,EAAE;IAClCC,OAAO,CAACJ,KAAK,CAAC,wBAAwB,EAAEA,KAAK,EAAEG,SAAS,CAAC;EAC3D;EAEAE,MAAMA,CAAA,EAAG;IACP,IAAI,IAAI,CAACP,KAAK,CAACC,QAAQ,EAAE;MACvB;MACA,OAAO,IAAI,CAACF,KAAK,CAACS,QAAQ;IAC5B;IACA,OAAO,IAAI,CAACT,KAAK,CAACS,QAAQ;EAC5B;AACF;;AAEA;AACA;AACA;AACA;AACA,SAASC,kBAAkBA,CAAC;EAAED;AAAS,CAAC,EAAE;EAAAE,EAAA;EACxC,MAAM;IAAEC;EAAS,CAAC,GAAGnB,WAAW,CAAC,CAAC;EAClC,MAAM,CAACoB,WAAW,EAAEC,cAAc,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACAD,SAAS,CAAC,MAAM;IACd,IAAI,CAACqB,QAAQ,EAAE;;IAEf;IACA,IAAIC,WAAW,IAAIE,IAAI,CAACC,SAAS,CAACH,WAAW,CAAC,KAAKE,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,EAAE;MAC3E;IACF;IAEA,IAAI;MACF;MACA,MAAMK,OAAO,GAAGvB,eAAe,CAACwB,aAAa,CAACN,QAAQ,CAAC;;MAEvD;MACA,IAAIK,OAAO,EAAE;QACXH,cAAc,CAACC,IAAI,CAACI,KAAK,CAACJ,IAAI,CAACC,SAAS,CAACJ,QAAQ,CAAC,CAAC,CAAC;MACtD;IACF,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdI,OAAO,CAACJ,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD;IACF;EACF,CAAC,EAAE,CAACS,QAAQ,EAAEC,WAAW,CAAC,CAAC;EAE3B,oBACEjB,OAAA,CAACC,qBAAqB;IAAAY,QAAA,eACpBb,OAAA;MAAKwB,SAAS,EAAC,eAAe;MAAAX,QAAA,EAC3BA;IAAQ;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE5B;AAACb,EAAA,CAlCQD,kBAAkB;EAAA,QACJjB,WAAW;AAAA;AAAAgC,EAAA,GADzBf,kBAAkB;AAoC3B,eAAeA,kBAAkB;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}