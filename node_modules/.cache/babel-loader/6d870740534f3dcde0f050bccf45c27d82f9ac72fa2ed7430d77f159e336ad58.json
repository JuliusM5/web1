{"ast":null,"code":"/**\r\n * Enhanced PDF Generator utility for TravelEase\r\n * Provides functionality to export trip details as PDF\r\n */// In a real implementation, we would use libraries like jsPDF and html2canvas\n// For this implementation, we'll create the structure and mock the PDF generation\n/**\r\n * Generate a PDF for a trip\r\n * \r\n * @param {Object} trip The trip object to export\r\n * @param {Object} userSettings User settings for formatting\r\n * @returns {Promise<Blob>} A promise that resolves to a Blob containing the PDF\r\n */export const generateTripPdf=async function(trip){let userSettings=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};// In a real implementation, we would:\n// 1. Create a jsPDF instance\n// 2. Add content to the PDF\n// 3. Return a Blob containing the PDF\n// For this mock implementation, we'll log the process and return a mock Blob\nconsole.log(`Generating PDF for trip to ${trip.destination}`);try{// Mock PDF generation process\nawait mockPdfGenerationProcess(trip,userSettings);// Return a mock Blob (in real implementation, this would be the actual PDF)\nreturn new Blob(['PDF content for '+trip.destination],{type:'application/pdf'});}catch(error){console.error('Error generating PDF:',error);throw new Error('Failed to generate PDF');}};/**\r\n   * Export a trip as PDF and trigger download\r\n   * \r\n   * @param {Object} trip The trip to export\r\n   * @param {Object} userSettings User settings for formatting\r\n   */export const exportTripToPDF=async function(trip){let userSettings=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};try{// Show loading indicator\nconst loadingElement=document.createElement('div');loadingElement.className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';loadingElement.innerHTML=`\n        <div class=\"bg-white p-6 rounded-lg shadow-xl\">\n          <div class=\"animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500 mx-auto\"></div>\n          <p class=\"mt-4 text-center\">Generating PDF...</p>\n        </div>\n      `;document.body.appendChild(loadingElement);// Generate the PDF\nconst pdfBlob=await generateTripPdf(trip,userSettings);// Create a download link\nconst url=URL.createObjectURL(pdfBlob);const a=document.createElement('a');a.href=url;a.download=`${trip.destination.replace(/\\s+/g,'_')}_Trip_Plan.pdf`;// Trigger download\ndocument.body.appendChild(a);a.click();// Clean up\nsetTimeout(()=>{document.body.removeChild(a);URL.revokeObjectURL(url);document.body.removeChild(loadingElement);},100);return true;}catch(error){console.error('Error exporting trip to PDF:',error);alert('Failed to export trip to PDF. Please try again.');return false;}};/**\r\n   * Email trip details as PDF\r\n   * \r\n   * @param {Object} trip The trip to email\r\n   * @param {string} email The recipient email address\r\n   * @param {Object} userSettings User settings for formatting\r\n   * @returns {Promise<boolean>} Whether the email was sent successfully\r\n   */export const emailTripDetails=async function(trip,email){let userSettings=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};if(!email||!validateEmail(email)){alert('Please enter a valid email address');return false;}try{// Show loading indicator\nconst loadingElement=document.createElement('div');loadingElement.className='fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';loadingElement.innerHTML=`\n        <div class=\"bg-white p-6 rounded-lg shadow-xl\">\n          <div class=\"animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500 mx-auto\"></div>\n          <p class=\"mt-4 text-center\">Sending email...</p>\n        </div>\n      `;document.body.appendChild(loadingElement);// In a real implementation, we would:\n// 1. Generate the PDF\n// 2. Send it to the server\n// 3. Have the server send the email\n// For this mock implementation, we'll simulate the process\nconst pdfBlob=await generateTripPdf(trip,userSettings);// Simulate email sending delay\nawait new Promise(resolve=>setTimeout(resolve,1500));// Remove loading indicator\ndocument.body.removeChild(loadingElement);// Show success message\nalert(`Trip details for ${trip.destination} sent to ${email}`);return true;}catch(error){console.error('Error emailing trip details:',error);alert('Failed to send email. Please try again.');return false;}};// Helper functions\n/**\r\n   * Mock PDF generation process\r\n   * \r\n   * @param {Object} trip The trip to export\r\n   * @param {Object} userSettings User settings for formatting\r\n   * @returns {Promise<void>}\r\n   */const mockPdfGenerationProcess=async(trip,userSettings)=>{// Simulate processing time\nawait new Promise(resolve=>setTimeout(resolve,1000));// Log the content that would be included in the PDF\nconsole.log('PDF Content:');console.log('------------');console.log(`Trip to ${trip.destination}`);console.log(`Date: ${trip.startDate} to ${trip.endDate}`);console.log(`Budget: $${trip.budget}`);if(trip.budgetBreakdown){console.log('Budget Breakdown:');Object.entries(trip.budgetBreakdown).forEach(_ref=>{let[category,amount]=_ref;console.log(`  ${category}: $${amount}`);});}if(trip.transports&&trip.transports.length>0){console.log('Transportation:');trip.transports.forEach(transport=>{console.log(`  ${transport.type}: ${transport.from} to ${transport.to}`);});}if(trip.tasks&&trip.tasks.length>0){console.log('Tasks:');trip.tasks.forEach(task=>{console.log(`  ${task.completed?'✓':'○'} ${task.text}`);});}// In a real implementation, this would create the actual PDF content\n};/**\r\n   * Validate an email address\r\n   * \r\n   * @param {string} email The email address to validate\r\n   * @returns {boolean} Whether the email is valid\r\n   */const validateEmail=email=>{const re=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;return re.test(String(email).toLowerCase());};","map":{"version":3,"names":["generateTripPdf","trip","userSettings","arguments","length","undefined","console","log","destination","mockPdfGenerationProcess","Blob","type","error","Error","exportTripToPDF","loadingElement","document","createElement","className","innerHTML","body","appendChild","pdfBlob","url","URL","createObjectURL","a","href","download","replace","click","setTimeout","removeChild","revokeObjectURL","alert","emailTripDetails","email","validateEmail","Promise","resolve","startDate","endDate","budget","budgetBreakdown","Object","entries","forEach","_ref","category","amount","transports","transport","from","to","tasks","task","completed","text","re","test","String","toLowerCase"],"sources":["C:/Users/juliu/Desktop/web/src/utils/enhancedPdfGenerator.js"],"sourcesContent":["/**\r\n * Enhanced PDF Generator utility for TravelEase\r\n * Provides functionality to export trip details as PDF\r\n */\r\n\r\n// In a real implementation, we would use libraries like jsPDF and html2canvas\r\n// For this implementation, we'll create the structure and mock the PDF generation\r\n\r\n/**\r\n * Generate a PDF for a trip\r\n * \r\n * @param {Object} trip The trip object to export\r\n * @param {Object} userSettings User settings for formatting\r\n * @returns {Promise<Blob>} A promise that resolves to a Blob containing the PDF\r\n */\r\nexport const generateTripPdf = async (trip, userSettings = {}) => {\r\n    // In a real implementation, we would:\r\n    // 1. Create a jsPDF instance\r\n    // 2. Add content to the PDF\r\n    // 3. Return a Blob containing the PDF\r\n  \r\n    // For this mock implementation, we'll log the process and return a mock Blob\r\n    console.log(`Generating PDF for trip to ${trip.destination}`);\r\n    \r\n    try {\r\n      // Mock PDF generation process\r\n      await mockPdfGenerationProcess(trip, userSettings);\r\n      \r\n      // Return a mock Blob (in real implementation, this would be the actual PDF)\r\n      return new Blob(['PDF content for ' + trip.destination], { type: 'application/pdf' });\r\n    } catch (error) {\r\n      console.error('Error generating PDF:', error);\r\n      throw new Error('Failed to generate PDF');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Export a trip as PDF and trigger download\r\n   * \r\n   * @param {Object} trip The trip to export\r\n   * @param {Object} userSettings User settings for formatting\r\n   */\r\n  export const exportTripToPDF = async (trip, userSettings = {}) => {\r\n    try {\r\n      // Show loading indicator\r\n      const loadingElement = document.createElement('div');\r\n      loadingElement.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\r\n      loadingElement.innerHTML = `\r\n        <div class=\"bg-white p-6 rounded-lg shadow-xl\">\r\n          <div class=\"animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500 mx-auto\"></div>\r\n          <p class=\"mt-4 text-center\">Generating PDF...</p>\r\n        </div>\r\n      `;\r\n      document.body.appendChild(loadingElement);\r\n  \r\n      // Generate the PDF\r\n      const pdfBlob = await generateTripPdf(trip, userSettings);\r\n      \r\n      // Create a download link\r\n      const url = URL.createObjectURL(pdfBlob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `${trip.destination.replace(/\\s+/g, '_')}_Trip_Plan.pdf`;\r\n      \r\n      // Trigger download\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      \r\n      // Clean up\r\n      setTimeout(() => {\r\n        document.body.removeChild(a);\r\n        URL.revokeObjectURL(url);\r\n        document.body.removeChild(loadingElement);\r\n      }, 100);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error exporting trip to PDF:', error);\r\n      alert('Failed to export trip to PDF. Please try again.');\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Email trip details as PDF\r\n   * \r\n   * @param {Object} trip The trip to email\r\n   * @param {string} email The recipient email address\r\n   * @param {Object} userSettings User settings for formatting\r\n   * @returns {Promise<boolean>} Whether the email was sent successfully\r\n   */\r\n  export const emailTripDetails = async (trip, email, userSettings = {}) => {\r\n    if (!email || !validateEmail(email)) {\r\n      alert('Please enter a valid email address');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      // Show loading indicator\r\n      const loadingElement = document.createElement('div');\r\n      loadingElement.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\r\n      loadingElement.innerHTML = `\r\n        <div class=\"bg-white p-6 rounded-lg shadow-xl\">\r\n          <div class=\"animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500 mx-auto\"></div>\r\n          <p class=\"mt-4 text-center\">Sending email...</p>\r\n        </div>\r\n      `;\r\n      document.body.appendChild(loadingElement);\r\n  \r\n      // In a real implementation, we would:\r\n      // 1. Generate the PDF\r\n      // 2. Send it to the server\r\n      // 3. Have the server send the email\r\n      \r\n      // For this mock implementation, we'll simulate the process\r\n      const pdfBlob = await generateTripPdf(trip, userSettings);\r\n      \r\n      // Simulate email sending delay\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      \r\n      // Remove loading indicator\r\n      document.body.removeChild(loadingElement);\r\n      \r\n      // Show success message\r\n      alert(`Trip details for ${trip.destination} sent to ${email}`);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error emailing trip details:', error);\r\n      alert('Failed to send email. Please try again.');\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Helper functions\r\n  \r\n  /**\r\n   * Mock PDF generation process\r\n   * \r\n   * @param {Object} trip The trip to export\r\n   * @param {Object} userSettings User settings for formatting\r\n   * @returns {Promise<void>}\r\n   */\r\n  const mockPdfGenerationProcess = async (trip, userSettings) => {\r\n    // Simulate processing time\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Log the content that would be included in the PDF\r\n    console.log('PDF Content:');\r\n    console.log('------------');\r\n    console.log(`Trip to ${trip.destination}`);\r\n    console.log(`Date: ${trip.startDate} to ${trip.endDate}`);\r\n    console.log(`Budget: $${trip.budget}`);\r\n    \r\n    if (trip.budgetBreakdown) {\r\n      console.log('Budget Breakdown:');\r\n      Object.entries(trip.budgetBreakdown).forEach(([category, amount]) => {\r\n        console.log(`  ${category}: $${amount}`);\r\n      });\r\n    }\r\n    \r\n    if (trip.transports && trip.transports.length > 0) {\r\n      console.log('Transportation:');\r\n      trip.transports.forEach(transport => {\r\n        console.log(`  ${transport.type}: ${transport.from} to ${transport.to}`);\r\n      });\r\n    }\r\n    \r\n    if (trip.tasks && trip.tasks.length > 0) {\r\n      console.log('Tasks:');\r\n      trip.tasks.forEach(task => {\r\n        console.log(`  ${task.completed ? '✓' : '○'} ${task.text}`);\r\n      });\r\n    }\r\n    \r\n    // In a real implementation, this would create the actual PDF content\r\n  };\r\n  \r\n  /**\r\n   * Validate an email address\r\n   * \r\n   * @param {string} email The email address to validate\r\n   * @returns {boolean} Whether the email is valid\r\n   */\r\n  const validateEmail = (email) => {\r\n    const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n    return re.test(String(email).toLowerCase());\r\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}