{"ast":null,"code":"// src/services/skyscannerService.js\n\n// Mock implementation for testing without real API\nconst skyscannerService = {\n  // Mock cache\n  cache: new Map(),\n  // Search for one-way flights\n  async searchOneWayFlights(origin, destination, originId, destinationId, date = null) {\n    const cacheKey = `oneway-${origin}-${destination}-${date || 'any'}`;\n\n    // Check cache\n    const cachedResult = this.getFromCache(cacheKey);\n    if (cachedResult) {\n      return cachedResult;\n    }\n\n    // Mock API response\n    const mockData = {\n      itineraries: [{\n        price: {\n          amount: 299.99\n        },\n        legs: [{\n          departure: new Date().toISOString(),\n          arrival: new Date(Date.now() + 7200000).toISOString(),\n          // 2 hours later\n          durationInMinutes: 120,\n          carriers: {\n            marketing: [{\n              name: 'Example Airlines'\n            }]\n          }\n        }]\n      }, {\n        price: {\n          amount: 349.99\n        },\n        legs: [{\n          departure: new Date(Date.now() + 3600000).toISOString(),\n          // 1 hour later\n          arrival: new Date(Date.now() + 10800000).toISOString(),\n          // 3 hours later\n          durationInMinutes: 120,\n          carriers: {\n            marketing: [{\n              name: 'Budget Air'\n            }]\n          }\n        }]\n      }, {\n        price: {\n          amount: 199.99\n        },\n        legs: [{\n          departure: new Date(Date.now() + 7200000).toISOString(),\n          // 2 hours later\n          arrival: new Date(Date.now() + 14400000).toISOString(),\n          // 4 hours later\n          durationInMinutes: 120,\n          carriers: {\n            marketing: [{\n              name: 'Discount Flights'\n            }]\n          }\n        }]\n      }]\n    };\n\n    // Add to cache\n    this.addToCache(cacheKey, mockData);\n    return mockData;\n  },\n  // Location autocomplete\n  async locationAutocomplete(query) {\n    const cacheKey = `location-${query.toLowerCase()}`;\n\n    // Check cache\n    const cachedResult = this.getFromCache(cacheKey);\n    if (cachedResult) {\n      return cachedResult;\n    }\n\n    // Mock results\n    const mockResults = {\n      places: [{\n        id: '123',\n        entityId: 'LHR-sky',\n        name: 'London Heathrow',\n        code: 'LHR',\n        iata: 'LHR',\n        cityName: 'London',\n        countryName: 'United Kingdom',\n        type: 'AIRPORT'\n      }, {\n        id: '456',\n        entityId: 'LON-sky',\n        name: 'London',\n        code: 'LON',\n        cityName: 'London',\n        countryName: 'United Kingdom',\n        type: 'CITY'\n      }, {\n        id: '789',\n        entityId: 'LGW-sky',\n        name: 'London Gatwick',\n        code: 'LGW',\n        iata: 'LGW',\n        cityName: 'London',\n        countryName: 'United Kingdom',\n        type: 'AIRPORT'\n      }]\n    };\n\n    // Add to cache\n    this.addToCache(cacheKey, mockResults);\n    return mockResults;\n  },\n  // Cache functions\n  getFromCache(key) {\n    if (this.cache.has(key)) {\n      const {\n        data,\n        timestamp\n      } = this.cache.get(key);\n      // Check if cache is valid (1 hour)\n      if (Date.now() - timestamp < 3600000) {\n        return data;\n      }\n      this.cache.delete(key);\n    }\n    return null;\n  },\n  addToCache(key, data) {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n  }\n};\nexport default skyscannerService;","map":{"version":3,"names":["skyscannerService","cache","Map","searchOneWayFlights","origin","destination","originId","destinationId","date","cacheKey","cachedResult","getFromCache","mockData","itineraries","price","amount","legs","departure","Date","toISOString","arrival","now","durationInMinutes","carriers","marketing","name","addToCache","locationAutocomplete","query","toLowerCase","mockResults","places","id","entityId","code","iata","cityName","countryName","type","key","has","data","timestamp","get","delete","set"],"sources":["C:/Users/juliu/Desktop/web/src/services/skyscannerService.js"],"sourcesContent":["// src/services/skyscannerService.js\r\n\r\n// Mock implementation for testing without real API\r\nconst skyscannerService = {\r\n  // Mock cache\r\n  cache: new Map(),\r\n  \r\n  // Search for one-way flights\r\n  async searchOneWayFlights(origin, destination, originId, destinationId, date = null) {\r\n    const cacheKey = `oneway-${origin}-${destination}-${date || 'any'}`;\r\n    \r\n    // Check cache\r\n    const cachedResult = this.getFromCache(cacheKey);\r\n    if (cachedResult) {\r\n      return cachedResult;\r\n    }\r\n    \r\n    // Mock API response\r\n    const mockData = {\r\n      itineraries: [\r\n        {\r\n          price: { amount: 299.99 },\r\n          legs: [{\r\n            departure: new Date().toISOString(),\r\n            arrival: new Date(Date.now() + 7200000).toISOString(), // 2 hours later\r\n            durationInMinutes: 120,\r\n            carriers: {\r\n              marketing: [{ name: 'Example Airlines' }]\r\n            }\r\n          }]\r\n        },\r\n        {\r\n          price: { amount: 349.99 },\r\n          legs: [{\r\n            departure: new Date(Date.now() + 3600000).toISOString(), // 1 hour later\r\n            arrival: new Date(Date.now() + 10800000).toISOString(), // 3 hours later\r\n            durationInMinutes: 120,\r\n            carriers: {\r\n              marketing: [{ name: 'Budget Air' }]\r\n            }\r\n          }]\r\n        },\r\n        {\r\n          price: { amount: 199.99 },\r\n          legs: [{\r\n            departure: new Date(Date.now() + 7200000).toISOString(), // 2 hours later\r\n            arrival: new Date(Date.now() + 14400000).toISOString(), // 4 hours later\r\n            durationInMinutes: 120,\r\n            carriers: {\r\n              marketing: [{ name: 'Discount Flights' }]\r\n            }\r\n          }]\r\n        }\r\n      ]\r\n    };\r\n    \r\n    // Add to cache\r\n    this.addToCache(cacheKey, mockData);\r\n    \r\n    return mockData;\r\n  },\r\n  \r\n  // Location autocomplete\r\n  async locationAutocomplete(query) {\r\n    const cacheKey = `location-${query.toLowerCase()}`;\r\n    \r\n    // Check cache\r\n    const cachedResult = this.getFromCache(cacheKey);\r\n    if (cachedResult) {\r\n      return cachedResult;\r\n    }\r\n    \r\n    // Mock results\r\n    const mockResults = {\r\n      places: [\r\n        {\r\n          id: '123',\r\n          entityId: 'LHR-sky',\r\n          name: 'London Heathrow',\r\n          code: 'LHR',\r\n          iata: 'LHR',\r\n          cityName: 'London',\r\n          countryName: 'United Kingdom',\r\n          type: 'AIRPORT'\r\n        },\r\n        {\r\n          id: '456',\r\n          entityId: 'LON-sky',\r\n          name: 'London',\r\n          code: 'LON',\r\n          cityName: 'London',\r\n          countryName: 'United Kingdom',\r\n          type: 'CITY'\r\n        },\r\n        {\r\n          id: '789',\r\n          entityId: 'LGW-sky',\r\n          name: 'London Gatwick',\r\n          code: 'LGW',\r\n          iata: 'LGW',\r\n          cityName: 'London',\r\n          countryName: 'United Kingdom',\r\n          type: 'AIRPORT'\r\n        }\r\n      ]\r\n    };\r\n    \r\n    // Add to cache\r\n    this.addToCache(cacheKey, mockResults);\r\n    \r\n    return mockResults;\r\n  },\r\n  \r\n  // Cache functions\r\n  getFromCache(key) {\r\n    if (this.cache.has(key)) {\r\n      const { data, timestamp } = this.cache.get(key);\r\n      // Check if cache is valid (1 hour)\r\n      if (Date.now() - timestamp < 3600000) {\r\n        return data;\r\n      }\r\n      this.cache.delete(key);\r\n    }\r\n    return null;\r\n  },\r\n  \r\n  addToCache(key, data) {\r\n    this.cache.set(key, {\r\n      data,\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n};\r\n\r\nexport default skyscannerService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}