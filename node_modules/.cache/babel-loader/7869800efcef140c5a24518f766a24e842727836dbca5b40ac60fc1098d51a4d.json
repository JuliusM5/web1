{"ast":null,"code":"// src/services/SubscriptionService.js\n\nclass SubscriptionService {\n  constructor() {\n    // Read subscription status from storage\n    this.loadSubscriptionState();\n\n    // Platform-specific payment handlers\n    this.paymentHandlers = {\n      android: this.handleGooglePayment,\n      ios: this.handleApplePayment,\n      web: this.handleWebPayment\n    };\n  }\n  loadSubscriptionState() {\n    try {\n      const savedState = localStorage.getItem('user_subscription');\n      if (savedState) {\n        this.subscriptionState = JSON.parse(savedState);\n      } else {\n        this.subscriptionState = {\n          isSubscribed: false,\n          plan: null,\n          expiryDate: null,\n          freeAlertsUsed: 0,\n          paymentMethod: null\n        };\n      }\n    } catch (error) {\n      console.error('Error loading subscription state:', error);\n      // Default state if error\n      this.subscriptionState = {\n        isSubscribed: false,\n        plan: null,\n        expiryDate: null,\n        freeAlertsUsed: 0,\n        paymentMethod: null\n      };\n    }\n  }\n  saveSubscriptionState() {\n    try {\n      localStorage.setItem('user_subscription', JSON.stringify(this.subscriptionState));\n    } catch (error) {\n      console.error('Error saving subscription state:', error);\n    }\n  }\n  getSubscriptionState() {\n    return {\n      ...this.subscriptionState\n    };\n  }\n  useFreeAlert() {\n    if (this.subscriptionState.isSubscribed) {\n      return true; // Subscribed users don't count\n    }\n    if (this.subscriptionState.freeAlertsUsed >= 3) {\n      return false; // No more free alerts\n    }\n    this.subscriptionState.freeAlertsUsed += 1;\n    this.saveSubscriptionState();\n    return true;\n  }\n  resetFreeAlerts() {\n    this.subscriptionState.freeAlertsUsed = 0;\n    this.saveSubscriptionState();\n  }\n  async startSubscription(plan, platform) {\n    try {\n      // Select payment handler based on platform\n      const handler = this.paymentHandlers[platform] || this.paymentHandlers.web;\n      const result = await handler(plan);\n      if (result.success) {\n        this.subscriptionState.isSubscribed = true;\n        this.subscriptionState.plan = plan;\n        this.subscriptionState.expiryDate = result.expiryDate;\n        this.subscriptionState.paymentMethod = result.paymentMethod;\n        this.saveSubscriptionState();\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        error: result.error\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n  async cancelSubscription() {\n    // Logic to cancel subscription\n    try {\n      // API call to cancel subscription\n      const result = await fetch('/api/subscription/cancel', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          subscriptionId: this.subscriptionState.subscriptionId\n        })\n      });\n      if (result.ok) {\n        this.subscriptionState.isSubscribed = false;\n        this.subscriptionState.plan = null;\n        this.subscriptionState.expiryDate = null;\n        this.saveSubscriptionState();\n        return {\n          success: true\n        };\n      }\n      const data = await result.json();\n      return {\n        success: false,\n        error: data.message\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Platform-specific payment handlers\n  async handleGooglePayment(plan) {\n    // Google Pay implementation\n    // For testing, we'll return a mock successful result\n    return {\n      success: true,\n      expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      // 30 days\n      paymentMethod: 'google_pay',\n      subscriptionId: 'gp_' + Math.random().toString(36).substring(2, 15)\n    };\n  }\n  async handleApplePayment(plan) {\n    // Apple Pay implementation\n    return {\n      success: true,\n      expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      // 30 days\n      paymentMethod: 'apple_pay',\n      subscriptionId: 'ap_' + Math.random().toString(36).substring(2, 15)\n    };\n  }\n  async handleWebPayment(plan) {\n    // Stripe/PayPal implementation for web\n    return {\n      success: true,\n      expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000),\n      // 30 days\n      paymentMethod: 'stripe',\n      subscriptionId: 'st_' + Math.random().toString(36).substring(2, 15)\n    };\n  }\n}\nexport default new SubscriptionService();","map":{"version":3,"names":["SubscriptionService","constructor","loadSubscriptionState","paymentHandlers","android","handleGooglePayment","ios","handleApplePayment","web","handleWebPayment","savedState","localStorage","getItem","subscriptionState","JSON","parse","isSubscribed","plan","expiryDate","freeAlertsUsed","paymentMethod","error","console","saveSubscriptionState","setItem","stringify","getSubscriptionState","useFreeAlert","resetFreeAlerts","startSubscription","platform","handler","result","success","message","cancelSubscription","fetch","method","headers","body","subscriptionId","ok","data","json","Date","now","Math","random","toString","substring"],"sources":["C:/Users/juliu/Desktop/web/src/services/SubscriptionService.js"],"sourcesContent":["// src/services/SubscriptionService.js\r\n\r\nclass SubscriptionService {\r\n    constructor() {\r\n      // Read subscription status from storage\r\n      this.loadSubscriptionState();\r\n      \r\n      // Platform-specific payment handlers\r\n      this.paymentHandlers = {\r\n        android: this.handleGooglePayment,\r\n        ios: this.handleApplePayment,\r\n        web: this.handleWebPayment\r\n      };\r\n    }\r\n    \r\n    loadSubscriptionState() {\r\n      try {\r\n        const savedState = localStorage.getItem('user_subscription');\r\n        if (savedState) {\r\n          this.subscriptionState = JSON.parse(savedState);\r\n        } else {\r\n          this.subscriptionState = {\r\n            isSubscribed: false,\r\n            plan: null,\r\n            expiryDate: null,\r\n            freeAlertsUsed: 0,\r\n            paymentMethod: null\r\n          };\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading subscription state:', error);\r\n        // Default state if error\r\n        this.subscriptionState = {\r\n          isSubscribed: false,\r\n          plan: null,\r\n          expiryDate: null,\r\n          freeAlertsUsed: 0,\r\n          paymentMethod: null\r\n        };\r\n      }\r\n    }\r\n    \r\n    saveSubscriptionState() {\r\n      try {\r\n        localStorage.setItem('user_subscription', JSON.stringify(this.subscriptionState));\r\n      } catch (error) {\r\n        console.error('Error saving subscription state:', error);\r\n      }\r\n    }\r\n    \r\n    getSubscriptionState() {\r\n      return { ...this.subscriptionState };\r\n    }\r\n    \r\n    useFreeAlert() {\r\n      if (this.subscriptionState.isSubscribed) {\r\n        return true; // Subscribed users don't count\r\n      }\r\n      \r\n      if (this.subscriptionState.freeAlertsUsed >= 3) {\r\n        return false; // No more free alerts\r\n      }\r\n      \r\n      this.subscriptionState.freeAlertsUsed += 1;\r\n      this.saveSubscriptionState();\r\n      return true;\r\n    }\r\n    \r\n    resetFreeAlerts() {\r\n      this.subscriptionState.freeAlertsUsed = 0;\r\n      this.saveSubscriptionState();\r\n    }\r\n    \r\n    async startSubscription(plan, platform) {\r\n      try {\r\n        // Select payment handler based on platform\r\n        const handler = this.paymentHandlers[platform] || this.paymentHandlers.web;\r\n        const result = await handler(plan);\r\n        \r\n        if (result.success) {\r\n          this.subscriptionState.isSubscribed = true;\r\n          this.subscriptionState.plan = plan;\r\n          this.subscriptionState.expiryDate = result.expiryDate;\r\n          this.subscriptionState.paymentMethod = result.paymentMethod;\r\n          this.saveSubscriptionState();\r\n          return { success: true };\r\n        }\r\n        \r\n        return { success: false, error: result.error };\r\n      } catch (error) {\r\n        return { success: false, error: error.message };\r\n      }\r\n    }\r\n    \r\n    async cancelSubscription() {\r\n      // Logic to cancel subscription\r\n      try {\r\n        // API call to cancel subscription\r\n        const result = await fetch('/api/subscription/cancel', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({\r\n            subscriptionId: this.subscriptionState.subscriptionId\r\n          })\r\n        });\r\n        \r\n        if (result.ok) {\r\n          this.subscriptionState.isSubscribed = false;\r\n          this.subscriptionState.plan = null;\r\n          this.subscriptionState.expiryDate = null;\r\n          this.saveSubscriptionState();\r\n          return { success: true };\r\n        }\r\n        \r\n        const data = await result.json();\r\n        return { success: false, error: data.message };\r\n      } catch (error) {\r\n        return { success: false, error: error.message };\r\n      }\r\n    }\r\n    \r\n    // Platform-specific payment handlers\r\n    async handleGooglePayment(plan) {\r\n      // Google Pay implementation\r\n      // For testing, we'll return a mock successful result\r\n      return {\r\n        success: true,\r\n        expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\r\n        paymentMethod: 'google_pay',\r\n        subscriptionId: 'gp_' + Math.random().toString(36).substring(2, 15)\r\n      };\r\n    }\r\n    \r\n    async handleApplePayment(plan) {\r\n      // Apple Pay implementation\r\n      return {\r\n        success: true,\r\n        expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\r\n        paymentMethod: 'apple_pay',\r\n        subscriptionId: 'ap_' + Math.random().toString(36).substring(2, 15)\r\n      };\r\n    }\r\n    \r\n    async handleWebPayment(plan) {\r\n      // Stripe/PayPal implementation for web\r\n      return {\r\n        success: true,\r\n        expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // 30 days\r\n        paymentMethod: 'stripe',\r\n        subscriptionId: 'st_' + Math.random().toString(36).substring(2, 15)\r\n      };\r\n    }\r\n  }\r\n  \r\n  export default new SubscriptionService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}