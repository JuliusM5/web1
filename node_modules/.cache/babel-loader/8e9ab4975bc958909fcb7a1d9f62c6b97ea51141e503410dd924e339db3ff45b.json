{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\context\\\\MobileSubscriptionContext.jsx\",\n  _s = $RefreshSig$();\n// src/context/MobileSubscriptionContext.jsx\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport MobileSubscriptionService from '../services/MobileSubscriptionService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MobileSubscriptionContext = /*#__PURE__*/createContext(null);\n\n// Provider component\nexport const MobileSubscriptionProvider = ({\n  children\n}) => {\n  _s();\n  const [subscription, setSubscription] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // This would normally connect to mobile platform services\n  useEffect(() => {\n    // Simulate checking for mobile subscription\n    const checkMobileSubscription = () => {\n      setLoading(true);\n      try {\n        // Check localStorage for any mobile subscription code\n        const mobileCode = localStorage.getItem('mobileSubscriptionCode');\n        if (mobileCode) {\n          // In a real app, this would verify the code with a server\n          setSubscription({\n            status: 'active',\n            platform: 'mobile',\n            expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days from now\n          });\n        } else {\n          setSubscription(null);\n        }\n        setError(null);\n      } catch (err) {\n        console.error('Error checking mobile subscription:', err);\n        setError('Failed to check mobile subscription status');\n        setSubscription(null);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkMobileSubscription();\n  }, []);\n\n  // Activate subscription\n  const activateSubscription = code => {\n    setLoading(true);\n    try {\n      // In a real app, this would verify the code with a server\n      localStorage.setItem('mobileSubscriptionCode', code);\n      setSubscription({\n        status: 'active',\n        platform: 'mobile',\n        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days from now\n      });\n      setError(null);\n      setLoading(false);\n      return true;\n    } catch (err) {\n      console.error('Error activating mobile subscription:', err);\n      setError('Failed to activate mobile subscription');\n      setLoading(false);\n      return false;\n    }\n  };\n\n  // Deactivate subscription\n  const deactivateSubscription = () => {\n    setLoading(true);\n    try {\n      localStorage.removeItem('mobileSubscriptionCode');\n      setSubscription(null);\n      setError(null);\n      setLoading(false);\n      return true;\n    } catch (err) {\n      console.error('Error deactivating mobile subscription:', err);\n      setError('Failed to deactivate mobile subscription');\n      setLoading(false);\n      return false;\n    }\n  };\n\n  // Context value\n  const value = {\n    subscription,\n    loading,\n    error,\n    activateSubscription,\n    deactivateSubscription,\n    hasActiveSubscription: Boolean(subscription && subscription.status === 'active')\n  };\n  return /*#__PURE__*/_jsxDEV(MobileSubscriptionContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(MobileSubscriptionProvider, \"qIvK3VeSXsyAPA+hYvdiShv2Sd8=\");\n_c = MobileSubscriptionProvider;\nexport default MobileSubscriptionContext;\nvar _c;\n$RefreshReg$(_c, \"MobileSubscriptionProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","MobileSubscriptionService","jsxDEV","_jsxDEV","MobileSubscriptionContext","MobileSubscriptionProvider","children","_s","subscription","setSubscription","loading","setLoading","error","setError","checkMobileSubscription","mobileCode","localStorage","getItem","status","platform","expiresAt","Date","now","toISOString","err","console","activateSubscription","code","setItem","deactivateSubscription","removeItem","value","hasActiveSubscription","Boolean","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/context/MobileSubscriptionContext.jsx"],"sourcesContent":["// src/context/MobileSubscriptionContext.jsx\r\n\r\nimport React, { createContext, useEffect, useState } from 'react';\r\nimport MobileSubscriptionService from '../services/MobileSubscriptionService';\r\n\r\nexport const MobileSubscriptionContext = createContext(null);\r\n\r\n// Provider component\r\nexport const MobileSubscriptionProvider = ({ children }) => {\r\n  const [subscription, setSubscription] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // This would normally connect to mobile platform services\r\n  useEffect(() => {\r\n    // Simulate checking for mobile subscription\r\n    const checkMobileSubscription = () => {\r\n      setLoading(true);\r\n      try {\r\n        // Check localStorage for any mobile subscription code\r\n        const mobileCode = localStorage.getItem('mobileSubscriptionCode');\r\n        \r\n        if (mobileCode) {\r\n          // In a real app, this would verify the code with a server\r\n          setSubscription({\r\n            status: 'active',\r\n            platform: 'mobile',\r\n            expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days from now\r\n          });\r\n        } else {\r\n          setSubscription(null);\r\n        }\r\n        \r\n        setError(null);\r\n      } catch (err) {\r\n        console.error('Error checking mobile subscription:', err);\r\n        setError('Failed to check mobile subscription status');\r\n        setSubscription(null);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    checkMobileSubscription();\r\n  }, []);\r\n\r\n  // Activate subscription\r\n  const activateSubscription = (code) => {\r\n    setLoading(true);\r\n    try {\r\n      // In a real app, this would verify the code with a server\r\n      localStorage.setItem('mobileSubscriptionCode', code);\r\n      \r\n      setSubscription({\r\n        status: 'active',\r\n        platform: 'mobile',\r\n        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days from now\r\n      });\r\n      \r\n      setError(null);\r\n      setLoading(false);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error activating mobile subscription:', err);\r\n      setError('Failed to activate mobile subscription');\r\n      setLoading(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Deactivate subscription\r\n  const deactivateSubscription = () => {\r\n    setLoading(true);\r\n    try {\r\n      localStorage.removeItem('mobileSubscriptionCode');\r\n      setSubscription(null);\r\n      setError(null);\r\n      setLoading(false);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error deactivating mobile subscription:', err);\r\n      setError('Failed to deactivate mobile subscription');\r\n      setLoading(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    subscription,\r\n    loading,\r\n    error,\r\n    activateSubscription,\r\n    deactivateSubscription,\r\n    hasActiveSubscription: Boolean(subscription && subscription.status === 'active')\r\n  };\r\n\r\n  return (\r\n    <MobileSubscriptionContext.Provider value={value}>\r\n      {children}\r\n    </MobileSubscriptionContext.Provider>\r\n  );\r\n};\r\n\r\nexport default MobileSubscriptionContext;"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACjE,OAAOC,yBAAyB,MAAM,uCAAuC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,OAAO,MAAMC,yBAAyB,gBAAGN,aAAa,CAAC,IAAI,CAAC;;AAE5D;AACA,OAAO,MAAMO,0BAA0B,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC1D,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAD,SAAS,CAAC,MAAM;IACd;IACA,MAAMe,uBAAuB,GAAGA,CAAA,KAAM;MACpCH,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACF;QACA,MAAMI,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,wBAAwB,CAAC;QAEjE,IAAIF,UAAU,EAAE;UACd;UACAN,eAAe,CAAC;YACdS,MAAM,EAAE,QAAQ;YAChBC,QAAQ,EAAE,QAAQ;YAClBC,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;UAC3E,CAAC,CAAC;QACJ,CAAC,MAAM;UACLd,eAAe,CAAC,IAAI,CAAC;QACvB;QAEAI,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOW,GAAG,EAAE;QACZC,OAAO,CAACb,KAAK,CAAC,qCAAqC,EAAEY,GAAG,CAAC;QACzDX,QAAQ,CAAC,4CAA4C,CAAC;QACtDJ,eAAe,CAAC,IAAI,CAAC;MACvB,CAAC,SAAS;QACRE,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDG,uBAAuB,CAAC,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMY,oBAAoB,GAAIC,IAAI,IAAK;IACrChB,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF;MACAK,YAAY,CAACY,OAAO,CAAC,wBAAwB,EAAED,IAAI,CAAC;MAEpDlB,eAAe,CAAC;QACdS,MAAM,EAAE,QAAQ;QAChBC,QAAQ,EAAE,QAAQ;QAClBC,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAACC,WAAW,CAAC,CAAC,CAAC;MAC3E,CAAC,CAAC;MAEFV,QAAQ,CAAC,IAAI,CAAC;MACdF,UAAU,CAAC,KAAK,CAAC;MACjB,OAAO,IAAI;IACb,CAAC,CAAC,OAAOa,GAAG,EAAE;MACZC,OAAO,CAACb,KAAK,CAAC,uCAAuC,EAAEY,GAAG,CAAC;MAC3DX,QAAQ,CAAC,wCAAwC,CAAC;MAClDF,UAAU,CAAC,KAAK,CAAC;MACjB,OAAO,KAAK;IACd;EACF,CAAC;;EAED;EACA,MAAMkB,sBAAsB,GAAGA,CAAA,KAAM;IACnClB,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACFK,YAAY,CAACc,UAAU,CAAC,wBAAwB,CAAC;MACjDrB,eAAe,CAAC,IAAI,CAAC;MACrBI,QAAQ,CAAC,IAAI,CAAC;MACdF,UAAU,CAAC,KAAK,CAAC;MACjB,OAAO,IAAI;IACb,CAAC,CAAC,OAAOa,GAAG,EAAE;MACZC,OAAO,CAACb,KAAK,CAAC,yCAAyC,EAAEY,GAAG,CAAC;MAC7DX,QAAQ,CAAC,0CAA0C,CAAC;MACpDF,UAAU,CAAC,KAAK,CAAC;MACjB,OAAO,KAAK;IACd;EACF,CAAC;;EAED;EACA,MAAMoB,KAAK,GAAG;IACZvB,YAAY;IACZE,OAAO;IACPE,KAAK;IACLc,oBAAoB;IACpBG,sBAAsB;IACtBG,qBAAqB,EAAEC,OAAO,CAACzB,YAAY,IAAIA,YAAY,CAACU,MAAM,KAAK,QAAQ;EACjF,CAAC;EAED,oBACEf,OAAA,CAACC,yBAAyB,CAAC8B,QAAQ;IAACH,KAAK,EAAEA,KAAM;IAAAzB,QAAA,EAC9CA;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACyB,CAAC;AAEzC,CAAC;AAAC/B,EAAA,CA9FWF,0BAA0B;AAAAkC,EAAA,GAA1BlC,0BAA0B;AAgGvC,eAAeD,yBAAyB;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}