{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useMobileSubscription.js\nimport { useContext, useCallback } from 'react';\nimport { MobileSubscriptionContext } from '../context/MobileSubscriptionContext';\nimport { isIOS, isAndroid } from '../utils/deviceDetection';\nexport const useMobileSubscription = () => {\n  _s();\n  const context = useContext(MobileSubscriptionContext);\n\n  // Helper to detect platform\n  const getPlatform = useCallback(() => {\n    if (isIOS()) return 'ios';\n    if (isAndroid()) return 'android';\n    return 'web';\n  }, []);\n\n  // Activate subscription with code from web purchase\n  const activateWithCode = useCallback(async code => {\n    try {\n      if (!context) {\n        return {\n          success: false,\n          error: 'MobileSubscriptionProvider not found'\n        };\n      }\n\n      // Get the current platform\n      const platform = getPlatform();\n\n      // Call the appropriate handler based on platform\n      if (platform === 'ios' || platform === 'android') {\n        // For a fully working version, you would make an API call here\n        // But for now we'll use a simpler implementation to avoid dependencies\n\n        // Store the code locally\n        localStorage.setItem('mobileSubscriptionCode', code);\n        localStorage.setItem('mobileSubscriptionActivated', new Date().toISOString());\n\n        // Update context\n        if (context.refreshSubscription) {\n          context.refreshSubscription();\n        }\n        return {\n          success: true,\n          status: 'active',\n          platform,\n          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days from now\n        };\n      } else {\n        // Not on a mobile platform, but we'll allow activation anyway for testing\n        localStorage.setItem('mobileSubscriptionCode', code);\n        localStorage.setItem('mobileSubscriptionActivated', new Date().toISOString());\n\n        // Update context\n        if (context.refreshSubscription) {\n          context.refreshSubscription();\n        }\n        return {\n          success: true,\n          status: 'active',\n          platform: 'web',\n          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days from now\n        };\n      }\n    } catch (error) {\n      console.error('Code activation error:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to activate code'\n      };\n    }\n  }, [context, getPlatform]);\n\n  // If no context is available, return a fallback\n  if (!context) {\n    return {\n      subscription: null,\n      loading: false,\n      error: 'MobileSubscriptionProvider not found',\n      activateSubscription: () => Promise.reject(new Error('MobileSubscriptionProvider not found')),\n      deactivateSubscription: () => Promise.reject(new Error('MobileSubscriptionProvider not found')),\n      hasActiveSubscription: false,\n      activateWithCode\n    };\n  }\n\n  // Add the activateWithCode function to the context\n  return {\n    ...context,\n    activateWithCode\n  };\n};\n_s(useMobileSubscription, \"327E4Z27/NJVtLSFq+Qr8g7+JjA=\");\nexport default useMobileSubscription;","map":{"version":3,"names":["useContext","useCallback","MobileSubscriptionContext","isIOS","isAndroid","useMobileSubscription","_s","context","getPlatform","activateWithCode","code","success","error","platform","localStorage","setItem","Date","toISOString","refreshSubscription","status","expiresAt","now","console","message","subscription","loading","activateSubscription","Promise","reject","Error","deactivateSubscription","hasActiveSubscription"],"sources":["C:/Users/juliu/Desktop/web/src/hooks/useMobileSubscription.js"],"sourcesContent":["// src/hooks/useMobileSubscription.js\r\nimport { useContext, useCallback } from 'react';\r\nimport { MobileSubscriptionContext } from '../context/MobileSubscriptionContext';\r\nimport { isIOS, isAndroid } from '../utils/deviceDetection';\r\n\r\nexport const useMobileSubscription = () => {\r\n  const context = useContext(MobileSubscriptionContext);\r\n  \r\n  // Helper to detect platform\r\n  const getPlatform = useCallback(() => {\r\n    if (isIOS()) return 'ios';\r\n    if (isAndroid()) return 'android';\r\n    return 'web';\r\n  }, []);\r\n  \r\n  // Activate subscription with code from web purchase\r\n  const activateWithCode = useCallback(async (code) => {\r\n    try {\r\n      if (!context) {\r\n        return { \r\n          success: false, \r\n          error: 'MobileSubscriptionProvider not found' \r\n        };\r\n      }\r\n      \r\n      // Get the current platform\r\n      const platform = getPlatform();\r\n      \r\n      // Call the appropriate handler based on platform\r\n      if (platform === 'ios' || platform === 'android') {\r\n        // For a fully working version, you would make an API call here\r\n        // But for now we'll use a simpler implementation to avoid dependencies\r\n        \r\n        // Store the code locally\r\n        localStorage.setItem('mobileSubscriptionCode', code);\r\n        localStorage.setItem('mobileSubscriptionActivated', new Date().toISOString());\r\n        \r\n        // Update context\r\n        if (context.refreshSubscription) {\r\n          context.refreshSubscription();\r\n        }\r\n        \r\n        return { \r\n          success: true,\r\n          status: 'active',\r\n          platform,\r\n          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days from now\r\n        };\r\n      } else {\r\n        // Not on a mobile platform, but we'll allow activation anyway for testing\r\n        localStorage.setItem('mobileSubscriptionCode', code);\r\n        localStorage.setItem('mobileSubscriptionActivated', new Date().toISOString());\r\n        \r\n        // Update context\r\n        if (context.refreshSubscription) {\r\n          context.refreshSubscription();\r\n        }\r\n        \r\n        return { \r\n          success: true,\r\n          status: 'active',\r\n          platform: 'web',\r\n          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days from now\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('Code activation error:', error);\r\n      return { success: false, error: error.message || 'Failed to activate code' };\r\n    }\r\n  }, [context, getPlatform]);\r\n\r\n  // If no context is available, return a fallback\r\n  if (!context) {\r\n    return {\r\n      subscription: null,\r\n      loading: false,\r\n      error: 'MobileSubscriptionProvider not found',\r\n      activateSubscription: () => Promise.reject(new Error('MobileSubscriptionProvider not found')),\r\n      deactivateSubscription: () => Promise.reject(new Error('MobileSubscriptionProvider not found')),\r\n      hasActiveSubscription: false,\r\n      activateWithCode\r\n    };\r\n  }\r\n  \r\n  // Add the activateWithCode function to the context\r\n  return {\r\n    ...context,\r\n    activateWithCode\r\n  };\r\n};\r\n\r\nexport default useMobileSubscription;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}