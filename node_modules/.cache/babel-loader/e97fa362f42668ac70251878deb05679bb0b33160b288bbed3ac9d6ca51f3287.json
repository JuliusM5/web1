{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useSettings } from '../context/SettingsContext';\nimport { formatCurrency, formatDate, formatTemperature, formatDistance } from '../utils/settingsUtils';\n\n/**\r\n * Custom hook for accessing and using application settings\r\n * Provides formatted values based on user preferences\r\n * \r\n * @returns {Object} Utility functions and settings\r\n */\nexport const useAppSettings = () => {\n  _s();\n  const {\n    settings,\n    updateSettings,\n    resetSettings\n  } = useSettings();\n\n  /**\r\n   * Format currency according to user settings\r\n   * \r\n   * @param {number} amount Amount to format\r\n   * @returns {string} Formatted currency string\r\n   */\n  const currency = amount => formatCurrency(amount, settings);\n\n  /**\r\n   * Format date according to user settings\r\n   * \r\n   * @param {string|Date} date Date to format\r\n   * @returns {string} Formatted date string\r\n   */\n  const date = dateValue => formatDate(dateValue, settings);\n\n  /**\r\n   * Format temperature according to user settings\r\n   * \r\n   * @param {number} celsius Temperature in Celsius\r\n   * @returns {string} Formatted temperature string\r\n   */\n  const temperature = celsius => formatTemperature(celsius, settings);\n\n  /**\r\n   * Format distance according to user settings\r\n   * \r\n   * @param {number} kilometers Distance in kilometers\r\n   * @returns {string} Formatted distance string\r\n   */\n  const distance = kilometers => formatDistance(kilometers, settings);\n\n  /**\r\n   * Get current color scheme\r\n   * \r\n   * @returns {string} Current color scheme\r\n   */\n  const getColorScheme = () => settings.appearance.colorScheme;\n\n  /**\r\n   * Get current font size\r\n   * \r\n   * @returns {string} Current font size\r\n   */\n  const getFontSize = () => settings.appearance.fontSize;\n\n  /**\r\n   * Check if a notification type is enabled\r\n   * \r\n   * @param {string} type Notification type\r\n   * @returns {boolean} Whether the notification type is enabled\r\n   */\n  const isNotificationEnabled = type => {\n    if (!settings.notifications) return false;\n    return !!settings.notifications[type];\n  };\n\n  /**\r\n   * Get current language\r\n   * \r\n   * @returns {string} Current language code\r\n   */\n  const getLanguage = () => settings.preferences.language;\n  return {\n    settings,\n    updateSettings,\n    resetSettings,\n    currency,\n    date,\n    temperature,\n    distance,\n    getColorScheme,\n    getFontSize,\n    isNotificationEnabled,\n    getLanguage\n  };\n};\n_s(useAppSettings, \"9D/N5lgR6DOxiA3IK+hBcIu7eiY=\", false, function () {\n  return [useSettings];\n});\nexport default useAppSettings;","map":{"version":3,"names":["useSettings","formatCurrency","formatDate","formatTemperature","formatDistance","useAppSettings","_s","settings","updateSettings","resetSettings","currency","amount","date","dateValue","temperature","celsius","distance","kilometers","getColorScheme","appearance","colorScheme","getFontSize","fontSize","isNotificationEnabled","type","notifications","getLanguage","preferences","language"],"sources":["C:/Users/juliu/Desktop/web/src/utils/useAppSettings.js"],"sourcesContent":["import { useSettings } from '../context/SettingsContext';\r\nimport { formatCurrency, formatDate, formatTemperature, formatDistance } from '../utils/settingsUtils';\r\n\r\n/**\r\n * Custom hook for accessing and using application settings\r\n * Provides formatted values based on user preferences\r\n * \r\n * @returns {Object} Utility functions and settings\r\n */\r\nexport const useAppSettings = () => {\r\n  const { settings, updateSettings, resetSettings } = useSettings();\r\n\r\n  /**\r\n   * Format currency according to user settings\r\n   * \r\n   * @param {number} amount Amount to format\r\n   * @returns {string} Formatted currency string\r\n   */\r\n  const currency = (amount) => formatCurrency(amount, settings);\r\n  \r\n  /**\r\n   * Format date according to user settings\r\n   * \r\n   * @param {string|Date} date Date to format\r\n   * @returns {string} Formatted date string\r\n   */\r\n  const date = (dateValue) => formatDate(dateValue, settings);\r\n  \r\n  /**\r\n   * Format temperature according to user settings\r\n   * \r\n   * @param {number} celsius Temperature in Celsius\r\n   * @returns {string} Formatted temperature string\r\n   */\r\n  const temperature = (celsius) => formatTemperature(celsius, settings);\r\n  \r\n  /**\r\n   * Format distance according to user settings\r\n   * \r\n   * @param {number} kilometers Distance in kilometers\r\n   * @returns {string} Formatted distance string\r\n   */\r\n  const distance = (kilometers) => formatDistance(kilometers, settings);\r\n  \r\n  /**\r\n   * Get current color scheme\r\n   * \r\n   * @returns {string} Current color scheme\r\n   */\r\n  const getColorScheme = () => settings.appearance.colorScheme;\r\n  \r\n  /**\r\n   * Get current font size\r\n   * \r\n   * @returns {string} Current font size\r\n   */\r\n  const getFontSize = () => settings.appearance.fontSize;\r\n  \r\n  /**\r\n   * Check if a notification type is enabled\r\n   * \r\n   * @param {string} type Notification type\r\n   * @returns {boolean} Whether the notification type is enabled\r\n   */\r\n  const isNotificationEnabled = (type) => {\r\n    if (!settings.notifications) return false;\r\n    return !!settings.notifications[type];\r\n  };\r\n  \r\n  /**\r\n   * Get current language\r\n   * \r\n   * @returns {string} Current language code\r\n   */\r\n  const getLanguage = () => settings.preferences.language;\r\n  \r\n  return {\r\n    settings,\r\n    updateSettings,\r\n    resetSettings,\r\n    currency,\r\n    date,\r\n    temperature,\r\n    distance,\r\n    getColorScheme,\r\n    getFontSize,\r\n    isNotificationEnabled,\r\n    getLanguage\r\n  };\r\n};\r\n\r\nexport default useAppSettings;"],"mappings":";AAAA,SAASA,WAAW,QAAQ,4BAA4B;AACxD,SAASC,cAAc,EAAEC,UAAU,EAAEC,iBAAiB,EAAEC,cAAc,QAAQ,wBAAwB;;AAEtG;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClC,MAAM;IAAEC,QAAQ;IAAEC,cAAc;IAAEC;EAAc,CAAC,GAAGT,WAAW,CAAC,CAAC;;EAEjE;AACF;AACA;AACA;AACA;AACA;EACE,MAAMU,QAAQ,GAAIC,MAAM,IAAKV,cAAc,CAACU,MAAM,EAAEJ,QAAQ,CAAC;;EAE7D;AACF;AACA;AACA;AACA;AACA;EACE,MAAMK,IAAI,GAAIC,SAAS,IAAKX,UAAU,CAACW,SAAS,EAAEN,QAAQ,CAAC;;EAE3D;AACF;AACA;AACA;AACA;AACA;EACE,MAAMO,WAAW,GAAIC,OAAO,IAAKZ,iBAAiB,CAACY,OAAO,EAAER,QAAQ,CAAC;;EAErE;AACF;AACA;AACA;AACA;AACA;EACE,MAAMS,QAAQ,GAAIC,UAAU,IAAKb,cAAc,CAACa,UAAU,EAAEV,QAAQ,CAAC;;EAErE;AACF;AACA;AACA;AACA;EACE,MAAMW,cAAc,GAAGA,CAAA,KAAMX,QAAQ,CAACY,UAAU,CAACC,WAAW;;EAE5D;AACF;AACA;AACA;AACA;EACE,MAAMC,WAAW,GAAGA,CAAA,KAAMd,QAAQ,CAACY,UAAU,CAACG,QAAQ;;EAEtD;AACF;AACA;AACA;AACA;AACA;EACE,MAAMC,qBAAqB,GAAIC,IAAI,IAAK;IACtC,IAAI,CAACjB,QAAQ,CAACkB,aAAa,EAAE,OAAO,KAAK;IACzC,OAAO,CAAC,CAAClB,QAAQ,CAACkB,aAAa,CAACD,IAAI,CAAC;EACvC,CAAC;;EAED;AACF;AACA;AACA;AACA;EACE,MAAME,WAAW,GAAGA,CAAA,KAAMnB,QAAQ,CAACoB,WAAW,CAACC,QAAQ;EAEvD,OAAO;IACLrB,QAAQ;IACRC,cAAc;IACdC,aAAa;IACbC,QAAQ;IACRE,IAAI;IACJE,WAAW;IACXE,QAAQ;IACRE,cAAc;IACdG,WAAW;IACXE,qBAAqB;IACrBG;EACF,CAAC;AACH,CAAC;AAACpB,EAAA,CAhFWD,cAAc;EAAA,QAC2BL,WAAW;AAAA;AAiFjE,eAAeK,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}