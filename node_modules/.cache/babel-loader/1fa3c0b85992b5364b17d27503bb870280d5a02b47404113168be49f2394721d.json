{"ast":null,"code":"// PDF Generation utility functions\n// In a real application, you would use a library like jsPDF or pdfmake\n// This is a simplified mock version for demonstration purposes\n\nexport const generateTripPDF = trip => {\n  // In a real implementation, this would create an actual PDF\n  // For now, we'll simulate the process and prepare the data that would go into it\n\n  // Create a custom structure for the PDF content\n  const pdfContent = {\n    title: `Trip to ${trip.destination}`,\n    dates: `${trip.startDate} to ${trip.endDate}`,\n    sections: [{\n      heading: 'Trip Overview',\n      content: [`Destination: ${trip.destination}`, `Duration: ${calculateDuration(trip.startDate, trip.endDate)} days`, `Budget: $${trip.budget}`]\n    }, {\n      heading: 'Important Information',\n      content: trip.info ? [`Emergency Contact: ${trip.info.emergency}`, `Currency: ${trip.info.currency}`, `Language: ${trip.info.language}`, `Useful Phrases: ${trip.info.phrases}`] : ['No local information available']\n    }, {\n      heading: 'Transportation',\n      content: trip.transports && trip.transports.length > 0 ? trip.transports.map(t => `${t.type}: From ${t.from} to ${t.to}${t.price ? ` ($${t.price})` : ''}`) : ['No transportation details added']\n    }, {\n      heading: 'Tasks & To-Do List',\n      content: trip.tasks && trip.tasks.length > 0 ? trip.tasks.map(task => `[${task.completed ? 'X' : ' '}] ${task.text}${task.date ? ` (${task.date})` : ''}`) : ['No tasks added']\n    }, {\n      heading: 'Notes',\n      content: trip.notes && trip.notes.length > 0 ? trip.notes.map(note => `${note.title}: ${note.text}`) : ['No notes added']\n    }]\n  };\n  if (trip.budgetBreakdown) {\n    pdfContent.sections.push({\n      heading: 'Budget Breakdown',\n      content: [`Accommodation: $${trip.budgetBreakdown.accommodation}`, `Food: $${trip.budgetBreakdown.food}`, `Transportation: $${trip.budgetBreakdown.transportation}`, `Activities: $${trip.budgetBreakdown.activities}`, `Other: $${trip.budgetBreakdown.other}`, `Total: $${Object.values(trip.budgetBreakdown).reduce((sum, val) => sum + val, 0)}`]\n    });\n  }\n\n  // In a real implementation, we would now generate a PDF from this content\n  // For the mock version, we'll just log and return the content structure\n  console.log('PDF Content Generated:', pdfContent);\n  return pdfContent;\n};\n\n// Helper function to calculate trip duration in days\nfunction calculateDuration(startDate, endDate) {\n  if (!startDate || !endDate) return 0;\n  const start = new Date(startDate);\n  const end = new Date(endDate);\n  const diff = Math.abs(end - start);\n  return Math.ceil(diff / (1000 * 60 * 60 * 24));\n}\n\n// Generate a print-friendly HTML version of the trip\nexport const generatePrintableHTML = trip => {\n  // This would return HTML that could be opened in a new window for printing\n  // For now, we'll return a simple structure\n\n  return `\n      <html>\n        <head>\n          <title>Trip to ${trip.destination}</title>\n          <style>\n            body { font-family: Arial, sans-serif; margin: 20px; }\n            h1 { color: #3b82f6; }\n            h2 { color: #1e40af; margin-top: 20px; }\n            .section { margin-bottom: 20px; }\n            .date { color: #4b5563; }\n            table { width: 100%; border-collapse: collapse; margin: 15px 0; }\n            th, td { border: 1px solid #e5e7eb; padding: 8px; text-align: left; }\n            th { background-color: #f3f4f6; }\n            .footer { margin-top: 30px; font-size: 12px; color: #6b7280; }\n            @media print {\n              .no-print { display: none; }\n              body { margin: 0; }\n            }\n          </style>\n        </head>\n        <body>\n          <div class=\"no-print\" style=\"text-align: right; margin-bottom: 20px;\">\n            <button onclick=\"window.print()\">Print</button>\n          </div>\n          \n          <h1>Trip to ${trip.destination}</h1>\n          <p class=\"date\">${trip.startDate} to ${trip.endDate} (${calculateDuration(trip.startDate, trip.endDate)} days)</p>\n          \n          <div class=\"section\">\n            <h2>Trip Overview</h2>\n            <p><strong>Budget:</strong> $${trip.budget}</p>\n          </div>\n          \n          ${trip.info ? `\n          <div class=\"section\">\n            <h2>Local Information</h2>\n            <p><strong>Emergency:</strong> ${trip.info.emergency}</p>\n            <p><strong>Currency:</strong> ${trip.info.currency}</p>\n            <p><strong>Language:</strong> ${trip.info.language}</p>\n            <p><strong>Useful Phrases:</strong> ${trip.info.phrases}</p>\n          </div>\n          ` : ''}\n          \n          ${trip.transports && trip.transports.length > 0 ? `\n          <div class=\"section\">\n            <h2>Transportation</h2>\n            <table>\n              <tr>\n                <th>Type</th>\n                <th>From</th>\n                <th>To</th>\n                <th>Price</th>\n              </tr>\n              ${trip.transports.map(t => `\n              <tr>\n                <td>${t.type}</td>\n                <td>${t.from}</td>\n                <td>${t.to}</td>\n                <td>${t.price ? '$' + t.price : 'N/A'}</td>\n              </tr>\n              `).join('')}\n            </table>\n          </div>\n          ` : ''}\n          \n          ${trip.tasks && trip.tasks.length > 0 ? `\n          <div class=\"section\">\n            <h2>Tasks & Checklist</h2>\n            <table>\n              <tr>\n                <th>Status</th>\n                <th>Task</th>\n                <th>Date</th>\n                <th>Priority</th>\n              </tr>\n              ${trip.tasks.map(task => `\n              <tr>\n                <td>${task.completed ? '✓' : '○'}</td>\n                <td>${task.text}</td>\n                <td>${task.date || 'N/A'}</td>\n                <td>${task.priority || 'Medium'}</td>\n              </tr>\n              `).join('')}\n            </table>\n          </div>\n          ` : ''}\n          \n          ${trip.notes && trip.notes.length > 0 ? `\n          <div class=\"section\">\n            <h2>Notes</h2>\n            ${trip.notes.map(note => `\n            <div style=\"margin-bottom: 10px;\">\n              <h3>${note.title}</h3>\n              <p>${note.text}</p>\n            </div>\n            `).join('')}\n          </div>\n          ` : ''}\n          \n          <div class=\"footer\">\n            <p>Generated by TravelEase on ${new Date().toLocaleDateString()}</p>\n          </div>\n        </body>\n      </html>\n    `;\n};","map":{"version":3,"names":["generateTripPDF","trip","pdfContent","title","destination","dates","startDate","endDate","sections","heading","content","calculateDuration","budget","info","emergency","currency","language","phrases","transports","length","map","t","type","from","to","price","tasks","task","completed","text","date","notes","note","budgetBreakdown","push","accommodation","food","transportation","activities","other","Object","values","reduce","sum","val","console","log","start","Date","end","diff","Math","abs","ceil","generatePrintableHTML","join","priority","toLocaleDateString"],"sources":["C:/Users/juliu/Desktop/web/src/utils/pdfGenerator.js"],"sourcesContent":["// PDF Generation utility functions\r\n// In a real application, you would use a library like jsPDF or pdfmake\r\n// This is a simplified mock version for demonstration purposes\r\n\r\nexport const generateTripPDF = (trip) => {\r\n    // In a real implementation, this would create an actual PDF\r\n    // For now, we'll simulate the process and prepare the data that would go into it\r\n    \r\n    // Create a custom structure for the PDF content\r\n    const pdfContent = {\r\n      title: `Trip to ${trip.destination}`,\r\n      dates: `${trip.startDate} to ${trip.endDate}`,\r\n      sections: [\r\n        {\r\n          heading: 'Trip Overview',\r\n          content: [\r\n            `Destination: ${trip.destination}`,\r\n            `Duration: ${calculateDuration(trip.startDate, trip.endDate)} days`,\r\n            `Budget: $${trip.budget}`,\r\n          ]\r\n        },\r\n        {\r\n          heading: 'Important Information',\r\n          content: trip.info ? [\r\n            `Emergency Contact: ${trip.info.emergency}`,\r\n            `Currency: ${trip.info.currency}`,\r\n            `Language: ${trip.info.language}`,\r\n            `Useful Phrases: ${trip.info.phrases}`\r\n          ] : ['No local information available']\r\n        },\r\n        {\r\n          heading: 'Transportation',\r\n          content: trip.transports && trip.transports.length > 0 \r\n            ? trip.transports.map(t => `${t.type}: From ${t.from} to ${t.to}${t.price ? ` ($${t.price})` : ''}`)\r\n            : ['No transportation details added']\r\n        },\r\n        {\r\n          heading: 'Tasks & To-Do List',\r\n          content: trip.tasks && trip.tasks.length > 0 \r\n            ? trip.tasks.map(task => `[${task.completed ? 'X' : ' '}] ${task.text}${task.date ? ` (${task.date})` : ''}`)\r\n            : ['No tasks added']\r\n        },\r\n        {\r\n          heading: 'Notes',\r\n          content: trip.notes && trip.notes.length > 0 \r\n            ? trip.notes.map(note => `${note.title}: ${note.text}`)\r\n            : ['No notes added']\r\n        }\r\n      ]\r\n    };\r\n    \r\n    if (trip.budgetBreakdown) {\r\n      pdfContent.sections.push({\r\n        heading: 'Budget Breakdown',\r\n        content: [\r\n          `Accommodation: $${trip.budgetBreakdown.accommodation}`,\r\n          `Food: $${trip.budgetBreakdown.food}`,\r\n          `Transportation: $${trip.budgetBreakdown.transportation}`,\r\n          `Activities: $${trip.budgetBreakdown.activities}`,\r\n          `Other: $${trip.budgetBreakdown.other}`,\r\n          `Total: $${Object.values(trip.budgetBreakdown).reduce((sum, val) => sum + val, 0)}`\r\n        ]\r\n      });\r\n    }\r\n    \r\n    // In a real implementation, we would now generate a PDF from this content\r\n    // For the mock version, we'll just log and return the content structure\r\n    console.log('PDF Content Generated:', pdfContent);\r\n    \r\n    return pdfContent;\r\n  };\r\n  \r\n  // Helper function to calculate trip duration in days\r\n  function calculateDuration(startDate, endDate) {\r\n    if (!startDate || !endDate) return 0;\r\n    const start = new Date(startDate);\r\n    const end = new Date(endDate);\r\n    const diff = Math.abs(end - start);\r\n    return Math.ceil(diff / (1000 * 60 * 60 * 24));\r\n  }\r\n  \r\n  // Generate a print-friendly HTML version of the trip\r\n  export const generatePrintableHTML = (trip) => {\r\n    // This would return HTML that could be opened in a new window for printing\r\n    // For now, we'll return a simple structure\r\n    \r\n    return `\r\n      <html>\r\n        <head>\r\n          <title>Trip to ${trip.destination}</title>\r\n          <style>\r\n            body { font-family: Arial, sans-serif; margin: 20px; }\r\n            h1 { color: #3b82f6; }\r\n            h2 { color: #1e40af; margin-top: 20px; }\r\n            .section { margin-bottom: 20px; }\r\n            .date { color: #4b5563; }\r\n            table { width: 100%; border-collapse: collapse; margin: 15px 0; }\r\n            th, td { border: 1px solid #e5e7eb; padding: 8px; text-align: left; }\r\n            th { background-color: #f3f4f6; }\r\n            .footer { margin-top: 30px; font-size: 12px; color: #6b7280; }\r\n            @media print {\r\n              .no-print { display: none; }\r\n              body { margin: 0; }\r\n            }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <div class=\"no-print\" style=\"text-align: right; margin-bottom: 20px;\">\r\n            <button onclick=\"window.print()\">Print</button>\r\n          </div>\r\n          \r\n          <h1>Trip to ${trip.destination}</h1>\r\n          <p class=\"date\">${trip.startDate} to ${trip.endDate} (${calculateDuration(trip.startDate, trip.endDate)} days)</p>\r\n          \r\n          <div class=\"section\">\r\n            <h2>Trip Overview</h2>\r\n            <p><strong>Budget:</strong> $${trip.budget}</p>\r\n          </div>\r\n          \r\n          ${trip.info ? `\r\n          <div class=\"section\">\r\n            <h2>Local Information</h2>\r\n            <p><strong>Emergency:</strong> ${trip.info.emergency}</p>\r\n            <p><strong>Currency:</strong> ${trip.info.currency}</p>\r\n            <p><strong>Language:</strong> ${trip.info.language}</p>\r\n            <p><strong>Useful Phrases:</strong> ${trip.info.phrases}</p>\r\n          </div>\r\n          ` : ''}\r\n          \r\n          ${trip.transports && trip.transports.length > 0 ? `\r\n          <div class=\"section\">\r\n            <h2>Transportation</h2>\r\n            <table>\r\n              <tr>\r\n                <th>Type</th>\r\n                <th>From</th>\r\n                <th>To</th>\r\n                <th>Price</th>\r\n              </tr>\r\n              ${trip.transports.map(t => `\r\n              <tr>\r\n                <td>${t.type}</td>\r\n                <td>${t.from}</td>\r\n                <td>${t.to}</td>\r\n                <td>${t.price ? '$' + t.price : 'N/A'}</td>\r\n              </tr>\r\n              `).join('')}\r\n            </table>\r\n          </div>\r\n          ` : ''}\r\n          \r\n          ${trip.tasks && trip.tasks.length > 0 ? `\r\n          <div class=\"section\">\r\n            <h2>Tasks & Checklist</h2>\r\n            <table>\r\n              <tr>\r\n                <th>Status</th>\r\n                <th>Task</th>\r\n                <th>Date</th>\r\n                <th>Priority</th>\r\n              </tr>\r\n              ${trip.tasks.map(task => `\r\n              <tr>\r\n                <td>${task.completed ? '✓' : '○'}</td>\r\n                <td>${task.text}</td>\r\n                <td>${task.date || 'N/A'}</td>\r\n                <td>${task.priority || 'Medium'}</td>\r\n              </tr>\r\n              `).join('')}\r\n            </table>\r\n          </div>\r\n          ` : ''}\r\n          \r\n          ${trip.notes && trip.notes.length > 0 ? `\r\n          <div class=\"section\">\r\n            <h2>Notes</h2>\r\n            ${trip.notes.map(note => `\r\n            <div style=\"margin-bottom: 10px;\">\r\n              <h3>${note.title}</h3>\r\n              <p>${note.text}</p>\r\n            </div>\r\n            `).join('')}\r\n          </div>\r\n          ` : ''}\r\n          \r\n          <div class=\"footer\">\r\n            <p>Generated by TravelEase on ${new Date().toLocaleDateString()}</p>\r\n          </div>\r\n        </body>\r\n      </html>\r\n    `;\r\n  };"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAO,MAAMA,eAAe,GAAIC,IAAI,IAAK;EACrC;EACA;;EAEA;EACA,MAAMC,UAAU,GAAG;IACjBC,KAAK,EAAE,WAAWF,IAAI,CAACG,WAAW,EAAE;IACpCC,KAAK,EAAE,GAAGJ,IAAI,CAACK,SAAS,OAAOL,IAAI,CAACM,OAAO,EAAE;IAC7CC,QAAQ,EAAE,CACR;MACEC,OAAO,EAAE,eAAe;MACxBC,OAAO,EAAE,CACP,gBAAgBT,IAAI,CAACG,WAAW,EAAE,EAClC,aAAaO,iBAAiB,CAACV,IAAI,CAACK,SAAS,EAAEL,IAAI,CAACM,OAAO,CAAC,OAAO,EACnE,YAAYN,IAAI,CAACW,MAAM,EAAE;IAE7B,CAAC,EACD;MACEH,OAAO,EAAE,uBAAuB;MAChCC,OAAO,EAAET,IAAI,CAACY,IAAI,GAAG,CACnB,sBAAsBZ,IAAI,CAACY,IAAI,CAACC,SAAS,EAAE,EAC3C,aAAab,IAAI,CAACY,IAAI,CAACE,QAAQ,EAAE,EACjC,aAAad,IAAI,CAACY,IAAI,CAACG,QAAQ,EAAE,EACjC,mBAAmBf,IAAI,CAACY,IAAI,CAACI,OAAO,EAAE,CACvC,GAAG,CAAC,gCAAgC;IACvC,CAAC,EACD;MACER,OAAO,EAAE,gBAAgB;MACzBC,OAAO,EAAET,IAAI,CAACiB,UAAU,IAAIjB,IAAI,CAACiB,UAAU,CAACC,MAAM,GAAG,CAAC,GAClDlB,IAAI,CAACiB,UAAU,CAACE,GAAG,CAACC,CAAC,IAAI,GAAGA,CAAC,CAACC,IAAI,UAAUD,CAAC,CAACE,IAAI,OAAOF,CAAC,CAACG,EAAE,GAAGH,CAAC,CAACI,KAAK,GAAG,MAAMJ,CAAC,CAACI,KAAK,GAAG,GAAG,EAAE,EAAE,CAAC,GAClG,CAAC,iCAAiC;IACxC,CAAC,EACD;MACEhB,OAAO,EAAE,oBAAoB;MAC7BC,OAAO,EAAET,IAAI,CAACyB,KAAK,IAAIzB,IAAI,CAACyB,KAAK,CAACP,MAAM,GAAG,CAAC,GACxClB,IAAI,CAACyB,KAAK,CAACN,GAAG,CAACO,IAAI,IAAI,IAAIA,IAAI,CAACC,SAAS,GAAG,GAAG,GAAG,GAAG,KAAKD,IAAI,CAACE,IAAI,GAAGF,IAAI,CAACG,IAAI,GAAG,KAAKH,IAAI,CAACG,IAAI,GAAG,GAAG,EAAE,EAAE,CAAC,GAC3G,CAAC,gBAAgB;IACvB,CAAC,EACD;MACErB,OAAO,EAAE,OAAO;MAChBC,OAAO,EAAET,IAAI,CAAC8B,KAAK,IAAI9B,IAAI,CAAC8B,KAAK,CAACZ,MAAM,GAAG,CAAC,GACxClB,IAAI,CAAC8B,KAAK,CAACX,GAAG,CAACY,IAAI,IAAI,GAAGA,IAAI,CAAC7B,KAAK,KAAK6B,IAAI,CAACH,IAAI,EAAE,CAAC,GACrD,CAAC,gBAAgB;IACvB,CAAC;EAEL,CAAC;EAED,IAAI5B,IAAI,CAACgC,eAAe,EAAE;IACxB/B,UAAU,CAACM,QAAQ,CAAC0B,IAAI,CAAC;MACvBzB,OAAO,EAAE,kBAAkB;MAC3BC,OAAO,EAAE,CACP,mBAAmBT,IAAI,CAACgC,eAAe,CAACE,aAAa,EAAE,EACvD,UAAUlC,IAAI,CAACgC,eAAe,CAACG,IAAI,EAAE,EACrC,oBAAoBnC,IAAI,CAACgC,eAAe,CAACI,cAAc,EAAE,EACzD,gBAAgBpC,IAAI,CAACgC,eAAe,CAACK,UAAU,EAAE,EACjD,WAAWrC,IAAI,CAACgC,eAAe,CAACM,KAAK,EAAE,EACvC,WAAWC,MAAM,CAACC,MAAM,CAACxC,IAAI,CAACgC,eAAe,CAAC,CAACS,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAKD,GAAG,GAAGC,GAAG,EAAE,CAAC,CAAC,EAAE;IAEvF,CAAC,CAAC;EACJ;;EAEA;EACA;EACAC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAE5C,UAAU,CAAC;EAEjD,OAAOA,UAAU;AACnB,CAAC;;AAED;AACA,SAASS,iBAAiBA,CAACL,SAAS,EAAEC,OAAO,EAAE;EAC7C,IAAI,CAACD,SAAS,IAAI,CAACC,OAAO,EAAE,OAAO,CAAC;EACpC,MAAMwC,KAAK,GAAG,IAAIC,IAAI,CAAC1C,SAAS,CAAC;EACjC,MAAM2C,GAAG,GAAG,IAAID,IAAI,CAACzC,OAAO,CAAC;EAC7B,MAAM2C,IAAI,GAAGC,IAAI,CAACC,GAAG,CAACH,GAAG,GAAGF,KAAK,CAAC;EAClC,OAAOI,IAAI,CAACE,IAAI,CAACH,IAAI,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;AAChD;;AAEA;AACA,OAAO,MAAMI,qBAAqB,GAAIrD,IAAI,IAAK;EAC7C;EACA;;EAEA,OAAO;AACX;AACA;AACA,2BAA2BA,IAAI,CAACG,WAAW;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwBH,IAAI,CAACG,WAAW;AACxC,4BAA4BH,IAAI,CAACK,SAAS,OAAOL,IAAI,CAACM,OAAO,KAAKI,iBAAiB,CAACV,IAAI,CAACK,SAAS,EAAEL,IAAI,CAACM,OAAO,CAAC;AACjH;AACA;AACA;AACA,2CAA2CN,IAAI,CAACW,MAAM;AACtD;AACA;AACA,YAAYX,IAAI,CAACY,IAAI,GAAG;AACxB;AACA;AACA,6CAA6CZ,IAAI,CAACY,IAAI,CAACC,SAAS;AAChE,4CAA4Cb,IAAI,CAACY,IAAI,CAACE,QAAQ;AAC9D,4CAA4Cd,IAAI,CAACY,IAAI,CAACG,QAAQ;AAC9D,kDAAkDf,IAAI,CAACY,IAAI,CAACI,OAAO;AACnE;AACA,WAAW,GAAG,EAAE;AAChB;AACA,YAAYhB,IAAI,CAACiB,UAAU,IAAIjB,IAAI,CAACiB,UAAU,CAACC,MAAM,GAAG,CAAC,GAAG;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgBlB,IAAI,CAACiB,UAAU,CAACE,GAAG,CAACC,CAAC,IAAI;AACzC;AACA,sBAAsBA,CAAC,CAACC,IAAI;AAC5B,sBAAsBD,CAAC,CAACE,IAAI;AAC5B,sBAAsBF,CAAC,CAACG,EAAE;AAC1B,sBAAsBH,CAAC,CAACI,KAAK,GAAG,GAAG,GAAGJ,CAAC,CAACI,KAAK,GAAG,KAAK;AACrD;AACA,eAAe,CAAC,CAAC8B,IAAI,CAAC,EAAE,CAAC;AACzB;AACA;AACA,WAAW,GAAG,EAAE;AAChB;AACA,YAAYtD,IAAI,CAACyB,KAAK,IAAIzB,IAAI,CAACyB,KAAK,CAACP,MAAM,GAAG,CAAC,GAAG;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgBlB,IAAI,CAACyB,KAAK,CAACN,GAAG,CAACO,IAAI,IAAI;AACvC;AACA,sBAAsBA,IAAI,CAACC,SAAS,GAAG,GAAG,GAAG,GAAG;AAChD,sBAAsBD,IAAI,CAACE,IAAI;AAC/B,sBAAsBF,IAAI,CAACG,IAAI,IAAI,KAAK;AACxC,sBAAsBH,IAAI,CAAC6B,QAAQ,IAAI,QAAQ;AAC/C;AACA,eAAe,CAAC,CAACD,IAAI,CAAC,EAAE,CAAC;AACzB;AACA;AACA,WAAW,GAAG,EAAE;AAChB;AACA,YAAYtD,IAAI,CAAC8B,KAAK,IAAI9B,IAAI,CAAC8B,KAAK,CAACZ,MAAM,GAAG,CAAC,GAAG;AAClD;AACA;AACA,cAAclB,IAAI,CAAC8B,KAAK,CAACX,GAAG,CAACY,IAAI,IAAI;AACrC;AACA,oBAAoBA,IAAI,CAAC7B,KAAK;AAC9B,mBAAmB6B,IAAI,CAACH,IAAI;AAC5B;AACA,aAAa,CAAC,CAAC0B,IAAI,CAAC,EAAE,CAAC;AACvB;AACA,WAAW,GAAG,EAAE;AAChB;AACA;AACA,4CAA4C,IAAIP,IAAI,CAAC,CAAC,CAACS,kBAAkB,CAAC,CAAC;AAC3E;AACA;AACA;AACA,KAAK;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}