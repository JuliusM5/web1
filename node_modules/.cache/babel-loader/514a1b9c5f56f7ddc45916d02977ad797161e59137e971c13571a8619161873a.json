{"ast":null,"code":"// src/services/skyscannerService.js\n\n/**\r\n * Service for integrating with Skyscanner API via RapidAPI\r\n */\nclass SkyscannerService {\n  constructor() {\n    this.apiKey = process.env.REACT_APP_RAPIDAPI_KEY || '';\n    this.baseUrl = 'https://skyscanner-api.p.rapidapi.com';\n    this.cache = new Map();\n    this.cacheExpiry = 30 * 60 * 1000; // 30 minutes\n  }\n\n  /**\r\n   * Common headers for RapidAPI requests\r\n   */\n  getHeaders() {\n    return {\n      'X-RapidAPI-Key': this.apiKey,\n      'X-RapidAPI-Host': 'skyscanner-api.p.rapidapi.com',\n      'Content-Type': 'application/json'\n    };\n  }\n\n  /**\r\n   * Caching mechanism\r\n   */\n  getFromCache(key) {\n    if (this.cache.has(key)) {\n      const {\n        data,\n        timestamp\n      } = this.cache.get(key);\n      if (Date.now() - timestamp < this.cacheExpiry) {\n        return data;\n      }\n      this.cache.delete(key); // Remove expired cache\n    }\n    return null;\n  }\n  addToCache(key, data) {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n  }\n\n  /**\r\n   * Search for airports and locations by query string\r\n   */\n  async locationAutocomplete(query) {\n    const cacheKey = `location-${query.toLowerCase()}`;\n\n    // Check cache first\n    const cachedResult = this.getFromCache(cacheKey);\n    if (cachedResult) {\n      return cachedResult;\n    }\n    try {\n      const response = await fetch(`${this.baseUrl}/locations/search?query=${encodeURIComponent(query)}`, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n      if (!response.ok) {\n        throw new Error(`API error: ${response.status}`);\n      }\n      const data = await response.json();\n      this.addToCache(cacheKey, data);\n      return data;\n    } catch (error) {\n      console.error('Error in locationAutocomplete:', error);\n      // Return minimal fallback data structure\n      return {\n        places: []\n      };\n    }\n  }\n\n  /**\r\n   * Search for one-way flights\r\n   */\n  async searchOneWayFlights(origin, destination, originId, destinationId, date = null) {\n    const formattedDate = date ? new Date(date).toISOString().split('T')[0] : this.getDefaultDepartureDate();\n    const cacheKey = `oneway-${origin}-${destination}-${formattedDate}`;\n\n    // Check cache first\n    const cachedResult = this.getFromCache(cacheKey);\n    if (cachedResult) {\n      return cachedResult;\n    }\n    try {\n      // Create the session first\n      const sessionResponse = await fetch(`${this.baseUrl}/flights/search/create`, {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: JSON.stringify({\n          query: {\n            market: 'LT',\n            locale: 'en-US',\n            currency: 'EUR',\n            queryLegs: [{\n              originPlaceId: {\n                iata: origin\n              },\n              destinationPlaceId: {\n                iata: destination\n              },\n              date: {\n                year: parseInt(formattedDate.split('-')[0]),\n                month: parseInt(formattedDate.split('-')[1]),\n                day: parseInt(formattedDate.split('-')[2])\n              }\n            }],\n            adults: 1,\n            childrenAges: [],\n            cabinClass: 'CABIN_CLASS_ECONOMY'\n          }\n        })\n      });\n      if (!sessionResponse.ok) {\n        throw new Error(`API error: ${sessionResponse.status}`);\n      }\n      const sessionData = await sessionResponse.json();\n      const sessionToken = sessionData.sessionToken;\n\n      // Poll for results\n      const results = await this.pollResults(sessionToken);\n      if (results) {\n        this.addToCache(cacheKey, results);\n      }\n      return results;\n    } catch (error) {\n      console.error('Error in searchOneWayFlights:', error);\n      // Return minimal fallback data structure\n      return {\n        itineraries: [],\n        legs: [],\n        segments: [],\n        places: [],\n        carriers: [],\n        agents: []\n      };\n    }\n  }\n\n  /**\r\n   * Poll for results after creating a search session\r\n   */\n  async pollResults(sessionToken, maxAttempts = 5) {\n    let attempts = 0;\n    let results = null;\n    while (attempts < maxAttempts) {\n      attempts++;\n      try {\n        const pollResponse = await fetch(`${this.baseUrl}/flights/search/poll/${sessionToken}`, {\n          method: 'POST',\n          headers: this.getHeaders()\n        });\n        if (!pollResponse.ok) {\n          throw new Error(`API error: ${pollResponse.status}`);\n        }\n        const data = await pollResponse.json();\n        if (data.status === 'RESULT_STATUS_COMPLETE' || data.status === 'RESULT_STATUS_INCOMPLETE' && data.content && data.content.results) {\n          return data.content;\n        }\n\n        // If not ready, wait before polling again\n        await new Promise(resolve => setTimeout(resolve, 1000));\n      } catch (error) {\n        console.error(`Error polling results (attempt ${attempts}):`, error);\n        // Wait longer between retries if there's an error\n        await new Promise(resolve => setTimeout(resolve, 2000));\n      }\n    }\n    return results;\n  }\n\n  /**\r\n   * Get cheap flights for a given origin\r\n   */\n  async getCheapFlights(origin, options = {}) {\n    const cacheKey = `cheapflights-${origin}-${JSON.stringify(options)}`;\n\n    // Check cache first\n    const cachedResult = this.getFromCache(cacheKey);\n    if (cachedResult) {\n      return cachedResult;\n    }\n    try {\n      const departureDate = this.getDefaultDepartureDate();\n      const returnDate = this.getDefaultReturnDate(departureDate);\n\n      // Create the session for \"anywhere\" search\n      const sessionResponse = await fetch(`${this.baseUrl}/flights/search/create`, {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: JSON.stringify({\n          query: {\n            market: options.market || 'LT',\n            locale: options.locale || 'en-US',\n            currency: options.currency || 'EUR',\n            queryLegs: [{\n              originPlaceId: {\n                iata: origin\n              },\n              destinationPlaceId: {\n                anywhere: true\n              },\n              date: {\n                year: parseInt(departureDate.split('-')[0]),\n                month: parseInt(departureDate.split('-')[1]),\n                day: parseInt(departureDate.split('-')[2])\n              }\n            }],\n            adults: options.adults || 1,\n            childrenAges: [],\n            cabinClass: options.cabinClass || 'CABIN_CLASS_ECONOMY'\n          }\n        })\n      });\n      if (!sessionResponse.ok) {\n        throw new Error(`API error: ${sessionResponse.status}`);\n      }\n      const sessionData = await sessionResponse.json();\n      const sessionToken = sessionData.sessionToken;\n\n      // Poll for results\n      const results = await this.pollResults(sessionToken);\n      if (!results || !results.itineraries || !results.itineraries.results) {\n        return [];\n      }\n\n      // Transform the data into a simpler format\n      const cheapFlights = this.transformCheapFlightsResults(results, origin);\n      if (cheapFlights.length > 0) {\n        this.addToCache(cacheKey, cheapFlights);\n      }\n      return cheapFlights;\n    } catch (error) {\n      console.error('Error in getCheapFlights:', error);\n      return [];\n    }\n  }\n\n  /**\r\n   * Transform raw API results into a simpler format for cheap flights\r\n   */\n  transformCheapFlightsResults(results, origin) {\n    const {\n      itineraries,\n      legs,\n      places,\n      carriers\n    } = results;\n    if (!itineraries || !itineraries.results || !legs || !places) {\n      return [];\n    }\n    return itineraries.results.map(itinerary => {\n      var _places$find, _itinerary$pricingOpt, _itinerary$pricingOpt2, _itinerary$pricingOpt3;\n      const leg = legs.find(l => l.id === itinerary.legIds[0]);\n      if (!leg) return null;\n      const destinationPlace = places.find(p => p.entityId === leg.destinationPlaceId);\n      if (!destinationPlace) return null;\n      const carrierInfo = leg.carriers && leg.carriers.marketing && leg.carriers.marketing[0];\n      const carrier = carrierInfo ? carriers.find(c => c.id === carrierInfo.id) : null;\n      const cheapestPrice = itinerary.pricingOptions && itinerary.pricingOptions.length > 0 ? itinerary.pricingOptions.reduce((min, option) => option.price.amount < min ? option.price.amount : min, itinerary.pricingOptions[0].price.amount) : 0;\n      return {\n        from: origin,\n        to: destinationPlace.iata || destinationPlace.id,\n        destinationName: destinationPlace.name,\n        country: destinationPlace.parentId ? (_places$find = places.find(p => p.entityId === destinationPlace.parentId)) === null || _places$find === void 0 ? void 0 : _places$find.name : '',\n        price: cheapestPrice,\n        currency: ((_itinerary$pricingOpt = itinerary.pricingOptions) === null || _itinerary$pricingOpt === void 0 ? void 0 : (_itinerary$pricingOpt2 = _itinerary$pricingOpt[0]) === null || _itinerary$pricingOpt2 === void 0 ? void 0 : (_itinerary$pricingOpt3 = _itinerary$pricingOpt2.price) === null || _itinerary$pricingOpt3 === void 0 ? void 0 : _itinerary$pricingOpt3.unit) || 'EUR',\n        departure: leg.departureDateTime ? `${leg.departureDateTime.year}-${String(leg.departureDateTime.month).padStart(2, '0')}-${String(leg.departureDateTime.day).padStart(2, '0')}` : '',\n        return: '',\n        airline: carrier ? carrier.name : 'Multiple Airlines',\n        duration: leg.durationInMinutes || 0,\n        direct: leg.stopCount === 0,\n        deep_link: itinerary.deepLink || ''\n      };\n    }).filter(Boolean);\n  }\n\n  /**\r\n   * Get default departure date (2 weeks from now)\r\n   */\n  getDefaultDepartureDate() {\n    const date = new Date();\n    date.setDate(date.getDate() + 14);\n    return date.toISOString().split('T')[0];\n  }\n\n  /**\r\n   * Get default return date (1 week after departure)\r\n   */\n  getDefaultReturnDate(departureDate) {\n    const date = new Date(departureDate);\n    date.setDate(date.getDate() + 7);\n    return date.toISOString().split('T')[0];\n  }\n}\nexport default new SkyscannerService();","map":{"version":3,"names":["SkyscannerService","constructor","apiKey","process","env","REACT_APP_RAPIDAPI_KEY","baseUrl","cache","Map","cacheExpiry","getHeaders","getFromCache","key","has","data","timestamp","get","Date","now","delete","addToCache","set","locationAutocomplete","query","cacheKey","toLowerCase","cachedResult","response","fetch","encodeURIComponent","method","headers","ok","Error","status","json","error","console","places","searchOneWayFlights","origin","destination","originId","destinationId","date","formattedDate","toISOString","split","getDefaultDepartureDate","sessionResponse","body","JSON","stringify","market","locale","currency","queryLegs","originPlaceId","iata","destinationPlaceId","year","parseInt","month","day","adults","childrenAges","cabinClass","sessionData","sessionToken","results","pollResults","itineraries","legs","segments","carriers","agents","maxAttempts","attempts","pollResponse","content","Promise","resolve","setTimeout","getCheapFlights","options","departureDate","returnDate","getDefaultReturnDate","anywhere","cheapFlights","transformCheapFlightsResults","length","map","itinerary","_places$find","_itinerary$pricingOpt","_itinerary$pricingOpt2","_itinerary$pricingOpt3","leg","find","l","id","legIds","destinationPlace","p","entityId","carrierInfo","marketing","carrier","c","cheapestPrice","pricingOptions","reduce","min","option","price","amount","from","to","destinationName","name","country","parentId","unit","departure","departureDateTime","String","padStart","return","airline","duration","durationInMinutes","direct","stopCount","deep_link","deepLink","filter","Boolean","setDate","getDate"],"sources":["C:/Users/juliu/Desktop/web/src/services/skyscannerService.js"],"sourcesContent":["// src/services/skyscannerService.js\r\n\r\n/**\r\n * Service for integrating with Skyscanner API via RapidAPI\r\n */\r\nclass SkyscannerService {\r\n  constructor() {\r\n    this.apiKey = process.env.REACT_APP_RAPIDAPI_KEY || '';\r\n    this.baseUrl = 'https://skyscanner-api.p.rapidapi.com';\r\n    this.cache = new Map();\r\n    this.cacheExpiry = 30 * 60 * 1000; // 30 minutes\r\n  }\r\n\r\n  /**\r\n   * Common headers for RapidAPI requests\r\n   */\r\n  getHeaders() {\r\n    return {\r\n      'X-RapidAPI-Key': this.apiKey,\r\n      'X-RapidAPI-Host': 'skyscanner-api.p.rapidapi.com',\r\n      'Content-Type': 'application/json'\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Caching mechanism\r\n   */\r\n  getFromCache(key) {\r\n    if (this.cache.has(key)) {\r\n      const { data, timestamp } = this.cache.get(key);\r\n      if (Date.now() - timestamp < this.cacheExpiry) {\r\n        return data;\r\n      }\r\n      this.cache.delete(key); // Remove expired cache\r\n    }\r\n    return null;\r\n  }\r\n\r\n  addToCache(key, data) {\r\n    this.cache.set(key, {\r\n      data,\r\n      timestamp: Date.now()\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Search for airports and locations by query string\r\n   */\r\n  async locationAutocomplete(query) {\r\n    const cacheKey = `location-${query.toLowerCase()}`;\r\n    \r\n    // Check cache first\r\n    const cachedResult = this.getFromCache(cacheKey);\r\n    if (cachedResult) {\r\n      return cachedResult;\r\n    }\r\n    \r\n    try {\r\n      const response = await fetch(`${this.baseUrl}/locations/search?query=${encodeURIComponent(query)}`, {\r\n        method: 'GET',\r\n        headers: this.getHeaders()\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`API error: ${response.status}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      this.addToCache(cacheKey, data);\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error in locationAutocomplete:', error);\r\n      // Return minimal fallback data structure\r\n      return { places: [] };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Search for one-way flights\r\n   */\r\n  async searchOneWayFlights(origin, destination, originId, destinationId, date = null) {\r\n    const formattedDate = date ? new Date(date).toISOString().split('T')[0] : this.getDefaultDepartureDate();\r\n    const cacheKey = `oneway-${origin}-${destination}-${formattedDate}`;\r\n    \r\n    // Check cache first\r\n    const cachedResult = this.getFromCache(cacheKey);\r\n    if (cachedResult) {\r\n      return cachedResult;\r\n    }\r\n    \r\n    try {\r\n      // Create the session first\r\n      const sessionResponse = await fetch(`${this.baseUrl}/flights/search/create`, {\r\n        method: 'POST',\r\n        headers: this.getHeaders(),\r\n        body: JSON.stringify({\r\n          query: {\r\n            market: 'LT',\r\n            locale: 'en-US',\r\n            currency: 'EUR',\r\n            queryLegs: [\r\n              {\r\n                originPlaceId: { iata: origin },\r\n                destinationPlaceId: { iata: destination },\r\n                date: {\r\n                  year: parseInt(formattedDate.split('-')[0]),\r\n                  month: parseInt(formattedDate.split('-')[1]),\r\n                  day: parseInt(formattedDate.split('-')[2])\r\n                }\r\n              }\r\n            ],\r\n            adults: 1,\r\n            childrenAges: [],\r\n            cabinClass: 'CABIN_CLASS_ECONOMY'\r\n          }\r\n        })\r\n      });\r\n      \r\n      if (!sessionResponse.ok) {\r\n        throw new Error(`API error: ${sessionResponse.status}`);\r\n      }\r\n      \r\n      const sessionData = await sessionResponse.json();\r\n      const sessionToken = sessionData.sessionToken;\r\n      \r\n      // Poll for results\r\n      const results = await this.pollResults(sessionToken);\r\n      \r\n      if (results) {\r\n        this.addToCache(cacheKey, results);\r\n      }\r\n      \r\n      return results;\r\n    } catch (error) {\r\n      console.error('Error in searchOneWayFlights:', error);\r\n      // Return minimal fallback data structure\r\n      return {\r\n        itineraries: [],\r\n        legs: [],\r\n        segments: [],\r\n        places: [],\r\n        carriers: [],\r\n        agents: []\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Poll for results after creating a search session\r\n   */\r\n  async pollResults(sessionToken, maxAttempts = 5) {\r\n    let attempts = 0;\r\n    let results = null;\r\n    \r\n    while (attempts < maxAttempts) {\r\n      attempts++;\r\n      \r\n      try {\r\n        const pollResponse = await fetch(`${this.baseUrl}/flights/search/poll/${sessionToken}`, {\r\n          method: 'POST',\r\n          headers: this.getHeaders()\r\n        });\r\n        \r\n        if (!pollResponse.ok) {\r\n          throw new Error(`API error: ${pollResponse.status}`);\r\n        }\r\n        \r\n        const data = await pollResponse.json();\r\n        \r\n        if (data.status === 'RESULT_STATUS_COMPLETE' || \r\n            data.status === 'RESULT_STATUS_INCOMPLETE' && data.content && data.content.results) {\r\n          return data.content;\r\n        }\r\n        \r\n        // If not ready, wait before polling again\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n      } catch (error) {\r\n        console.error(`Error polling results (attempt ${attempts}):`, error);\r\n        // Wait longer between retries if there's an error\r\n        await new Promise(resolve => setTimeout(resolve, 2000));\r\n      }\r\n    }\r\n    \r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Get cheap flights for a given origin\r\n   */\r\n  async getCheapFlights(origin, options = {}) {\r\n    const cacheKey = `cheapflights-${origin}-${JSON.stringify(options)}`;\r\n    \r\n    // Check cache first\r\n    const cachedResult = this.getFromCache(cacheKey);\r\n    if (cachedResult) {\r\n      return cachedResult;\r\n    }\r\n    \r\n    try {\r\n      const departureDate = this.getDefaultDepartureDate();\r\n      const returnDate = this.getDefaultReturnDate(departureDate);\r\n      \r\n      // Create the session for \"anywhere\" search\r\n      const sessionResponse = await fetch(`${this.baseUrl}/flights/search/create`, {\r\n        method: 'POST',\r\n        headers: this.getHeaders(),\r\n        body: JSON.stringify({\r\n          query: {\r\n            market: options.market || 'LT',\r\n            locale: options.locale || 'en-US',\r\n            currency: options.currency || 'EUR',\r\n            queryLegs: [\r\n              {\r\n                originPlaceId: { iata: origin },\r\n                destinationPlaceId: { anywhere: true },\r\n                date: {\r\n                  year: parseInt(departureDate.split('-')[0]),\r\n                  month: parseInt(departureDate.split('-')[1]),\r\n                  day: parseInt(departureDate.split('-')[2])\r\n                }\r\n              }\r\n            ],\r\n            adults: options.adults || 1,\r\n            childrenAges: [],\r\n            cabinClass: options.cabinClass || 'CABIN_CLASS_ECONOMY'\r\n          }\r\n        })\r\n      });\r\n      \r\n      if (!sessionResponse.ok) {\r\n        throw new Error(`API error: ${sessionResponse.status}`);\r\n      }\r\n      \r\n      const sessionData = await sessionResponse.json();\r\n      const sessionToken = sessionData.sessionToken;\r\n      \r\n      // Poll for results\r\n      const results = await this.pollResults(sessionToken);\r\n      \r\n      if (!results || !results.itineraries || !results.itineraries.results) {\r\n        return [];\r\n      }\r\n      \r\n      // Transform the data into a simpler format\r\n      const cheapFlights = this.transformCheapFlightsResults(results, origin);\r\n      \r\n      if (cheapFlights.length > 0) {\r\n        this.addToCache(cacheKey, cheapFlights);\r\n      }\r\n      \r\n      return cheapFlights;\r\n    } catch (error) {\r\n      console.error('Error in getCheapFlights:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Transform raw API results into a simpler format for cheap flights\r\n   */\r\n  transformCheapFlightsResults(results, origin) {\r\n    const { itineraries, legs, places, carriers } = results;\r\n    \r\n    if (!itineraries || !itineraries.results || !legs || !places) {\r\n      return [];\r\n    }\r\n    \r\n    return itineraries.results.map(itinerary => {\r\n      const leg = legs.find(l => l.id === itinerary.legIds[0]);\r\n      if (!leg) return null;\r\n      \r\n      const destinationPlace = places.find(p => p.entityId === leg.destinationPlaceId);\r\n      if (!destinationPlace) return null;\r\n      \r\n      const carrierInfo = leg.carriers && leg.carriers.marketing && leg.carriers.marketing[0];\r\n      const carrier = carrierInfo ? carriers.find(c => c.id === carrierInfo.id) : null;\r\n      \r\n      const cheapestPrice = itinerary.pricingOptions && itinerary.pricingOptions.length > 0\r\n        ? itinerary.pricingOptions.reduce((min, option) => \r\n            option.price.amount < min ? option.price.amount : min, \r\n            itinerary.pricingOptions[0].price.amount)\r\n        : 0;\r\n      \r\n      return {\r\n        from: origin,\r\n        to: destinationPlace.iata || destinationPlace.id,\r\n        destinationName: destinationPlace.name,\r\n        country: destinationPlace.parentId ? places.find(p => p.entityId === destinationPlace.parentId)?.name : '',\r\n        price: cheapestPrice,\r\n        currency: itinerary.pricingOptions?.[0]?.price?.unit || 'EUR',\r\n        departure: leg.departureDateTime ? \r\n          `${leg.departureDateTime.year}-${String(leg.departureDateTime.month).padStart(2, '0')}-${String(leg.departureDateTime.day).padStart(2, '0')}` : \r\n          '',\r\n        return: '',\r\n        airline: carrier ? carrier.name : 'Multiple Airlines',\r\n        duration: leg.durationInMinutes || 0,\r\n        direct: leg.stopCount === 0,\r\n        deep_link: itinerary.deepLink || ''\r\n      };\r\n    }).filter(Boolean);\r\n  }\r\n\r\n  /**\r\n   * Get default departure date (2 weeks from now)\r\n   */\r\n  getDefaultDepartureDate() {\r\n    const date = new Date();\r\n    date.setDate(date.getDate() + 14);\r\n    return date.toISOString().split('T')[0];\r\n  }\r\n\r\n  /**\r\n   * Get default return date (1 week after departure)\r\n   */\r\n  getDefaultReturnDate(departureDate) {\r\n    const date = new Date(departureDate);\r\n    date.setDate(date.getDate() + 7);\r\n    return date.toISOString().split('T')[0];\r\n  }\r\n}\r\n\r\nexport default new SkyscannerService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}