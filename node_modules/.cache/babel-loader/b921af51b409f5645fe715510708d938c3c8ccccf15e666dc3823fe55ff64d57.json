{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\context\\\\SubscriptionContext.jsx\",\n  _s = $RefreshSig$();\n// src/context/SubscriptionContext.jsx\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { storageKeys } from '../constants/storageKeys';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SubscriptionContext = /*#__PURE__*/createContext();\nexport const SubscriptionProvider = ({\n  children\n}) => {\n  _s();\n  const [subscription, setSubscription] = useState({\n    isSubscribed: false,\n    isLoading: true,\n    plan: null,\n    expiresAt: null,\n    error: null\n  });\n  useEffect(() => {\n    // Check subscription status on mount\n    verifySubscription();\n\n    // Set up interval to periodically check subscription (optional)\n    const checkInterval = setInterval(() => {\n      verifySubscription(false); // Silent check (no loading state)\n    }, 30 * 60 * 1000); // Every 30 minutes\n\n    return () => clearInterval(checkInterval);\n  }, []);\n  const verifySubscription = async (showLoading = true) => {\n    const token = localStorage.getItem(storageKeys.SUBSCRIPTION_TOKEN);\n\n    // No token, not subscribed\n    if (!token) {\n      setSubscription(prev => ({\n        ...prev,\n        isSubscribed: false,\n        isLoading: false\n      }));\n      return;\n    }\n\n    // Show loading state if requested\n    if (showLoading) {\n      setSubscription(prev => ({\n        ...prev,\n        isLoading: true\n      }));\n    }\n    try {\n      // Verify token with server\n      const response = await axios.post('/api/subscriptions/verify-subscription', {\n        token\n      });\n      if (response.data.valid) {\n        setSubscription({\n          isSubscribed: true,\n          plan: response.data.plan,\n          expiresAt: response.data.expiresAt,\n          isLoading: false,\n          error: null\n        });\n\n        // Update expiry in localStorage\n        localStorage.setItem(storageKeys.SUBSCRIPTION_EXPIRY, response.data.expiresAt);\n      } else {\n        // Invalid token, clear storage\n        localStorage.removeItem(storageKeys.SUBSCRIPTION_TOKEN);\n        localStorage.removeItem(storageKeys.SUBSCRIPTION_EXPIRY);\n        setSubscription({\n          isSubscribed: false,\n          plan: null,\n          expiresAt: null,\n          isLoading: false,\n          error: response.data.error || 'Invalid subscription'\n        });\n      }\n    } catch (error) {\n      console.error('Subscription verification failed:', error);\n\n      // Fallback to local verification if server unreachable\n      const expiryDate = localStorage.getItem(storageKeys.SUBSCRIPTION_EXPIRY);\n      if (expiryDate && new Date(expiryDate) > new Date()) {\n        setSubscription(prev => ({\n          ...prev,\n          isSubscribed: true,\n          isOfflineVerified: true,\n          isLoading: false\n        }));\n      } else {\n        setSubscription(prev => ({\n          ...prev,\n          isSubscribed: false,\n          isLoading: false,\n          error: 'Failed to verify subscription status'\n        }));\n      }\n    }\n  };\n  const purchaseSubscription = async (email, plan) => {\n    setSubscription(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    try {\n      // Create checkout session\n      const sessionResponse = await axios.post('/api/subscriptions/create-subscription', {\n        email,\n        plan,\n        returnUrl: window.location.origin + '/subscription/confirm'\n      });\n\n      // If we have a checkout URL, redirect user\n      if (sessionResponse.data.url) {\n        window.location.href = sessionResponse.data.url;\n        return {\n          success: true,\n          redirecting: true\n        };\n      }\n\n      // If we have a session ID, proceed with verification\n      if (sessionResponse.data.sessionId) {\n        const verificationResponse = await axios.post('/api/subscriptions/verify-checkout-session', {\n          sessionId: sessionResponse.data.sessionId\n        });\n        if (verificationResponse.data.success) {\n          // Store token in localStorage\n          localStorage.setItem(storageKeys.SUBSCRIPTION_TOKEN, verificationResponse.data.accessToken);\n          localStorage.setItem(storageKeys.SUBSCRIPTION_EXPIRY, verificationResponse.data.expiresAt);\n\n          // Update subscription state\n          await verifySubscription();\n          return {\n            success: true,\n            mobileAccessCode: verificationResponse.data.mobileAccessCode\n          };\n        }\n      }\n      throw new Error('Subscription processing failed');\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      console.error('Purchase subscription error:', error);\n      setSubscription(prev => {\n        var _error$response, _error$response$data;\n        return {\n          ...prev,\n          isLoading: false,\n          error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.error) || 'Failed to process subscription'\n        };\n      });\n      return {\n        success: false,\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.error) || 'Failed to process subscription'\n      };\n    }\n  };\n  const activateTokenFromEmail = async token => {\n    setSubscription(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    try {\n      // Verify token\n      const response = await axios.post('/api/subscriptions/verify-subscription', {\n        token\n      });\n      if (response.data.valid) {\n        // Store token in localStorage\n        localStorage.setItem(storageKeys.SUBSCRIPTION_TOKEN, token);\n        localStorage.setItem(storageKeys.SUBSCRIPTION_EXPIRY, response.data.expiresAt);\n\n        // Update subscription state\n        setSubscription({\n          isSubscribed: true,\n          plan: response.data.plan,\n          expiresAt: response.data.expiresAt,\n          isLoading: false,\n          error: null\n        });\n        return {\n          success: true\n        };\n      }\n      setSubscription(prev => ({\n        ...prev,\n        isLoading: false,\n        error: 'Invalid activation token'\n      }));\n      return {\n        success: false,\n        error: 'Invalid activation token'\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      console.error('Token activation failed:', error);\n      setSubscription(prev => {\n        var _error$response3, _error$response3$data;\n        return {\n          ...prev,\n          isLoading: false,\n          error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.error) || 'Failed to activate subscription'\n        };\n      });\n      return {\n        success: false,\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.error) || 'Failed to activate subscription'\n      };\n    }\n  };\n  const cancelSubscription = async () => {\n    const token = localStorage.getItem(storageKeys.SUBSCRIPTION_TOKEN);\n    if (!token) {\n      return {\n        success: false,\n        error: 'No active subscription'\n      };\n    }\n    try {\n      const response = await axios.post('/api/subscriptions/cancel', {\n        token\n      });\n      if (response.data.success) {\n        // Keep the token in localStorage until expiry\n        // This allows the user to continue using premium features\n        // until the end of their billing period\n        await verifySubscription();\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        error: response.data.error || 'Failed to cancel subscription'\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      console.error('Cancel subscription error:', error);\n      return {\n        success: false,\n        error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.error) || 'Failed to cancel subscription'\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SubscriptionContext.Provider, {\n    value: {\n      ...subscription,\n      purchaseSubscription,\n      activateTokenFromEmail,\n      refreshSubscription: verifySubscription,\n      cancelSubscription\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 5\n  }, this);\n};\n_s(SubscriptionProvider, \"4bp76JDu090kbtikxVHt2pR/6pM=\");\n_c = SubscriptionProvider;\nexport default SubscriptionContext;\nvar _c;\n$RefreshReg$(_c, \"SubscriptionProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","axios","storageKeys","jsxDEV","_jsxDEV","SubscriptionContext","SubscriptionProvider","children","_s","subscription","setSubscription","isSubscribed","isLoading","plan","expiresAt","error","verifySubscription","checkInterval","setInterval","clearInterval","showLoading","token","localStorage","getItem","SUBSCRIPTION_TOKEN","prev","response","post","data","valid","setItem","SUBSCRIPTION_EXPIRY","removeItem","console","expiryDate","Date","isOfflineVerified","purchaseSubscription","email","sessionResponse","returnUrl","window","location","origin","url","href","success","redirecting","sessionId","verificationResponse","accessToken","mobileAccessCode","Error","_error$response2","_error$response2$data","_error$response","_error$response$data","activateTokenFromEmail","_error$response4","_error$response4$data","_error$response3","_error$response3$data","cancelSubscription","_error$response5","_error$response5$data","Provider","value","refreshSubscription","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/context/SubscriptionContext.jsx"],"sourcesContent":["// src/context/SubscriptionContext.jsx\r\n\r\nimport React, { createContext, useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { storageKeys } from '../constants/storageKeys';\r\n\r\nexport const SubscriptionContext = createContext();\r\n\r\nexport const SubscriptionProvider = ({ children }) => {\r\n  const [subscription, setSubscription] = useState({\r\n    isSubscribed: false,\r\n    isLoading: true,\r\n    plan: null,\r\n    expiresAt: null,\r\n    error: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Check subscription status on mount\r\n    verifySubscription();\r\n    \r\n    // Set up interval to periodically check subscription (optional)\r\n    const checkInterval = setInterval(() => {\r\n      verifySubscription(false); // Silent check (no loading state)\r\n    }, 30 * 60 * 1000); // Every 30 minutes\r\n    \r\n    return () => clearInterval(checkInterval);\r\n  }, []);\r\n\r\n  const verifySubscription = async (showLoading = true) => {\r\n    const token = localStorage.getItem(storageKeys.SUBSCRIPTION_TOKEN);\r\n    \r\n    // No token, not subscribed\r\n    if (!token) {\r\n      setSubscription(prev => ({ \r\n        ...prev, \r\n        isSubscribed: false, \r\n        isLoading: false \r\n      }));\r\n      return;\r\n    }\r\n    \r\n    // Show loading state if requested\r\n    if (showLoading) {\r\n      setSubscription(prev => ({ ...prev, isLoading: true }));\r\n    }\r\n    \r\n    try {\r\n      // Verify token with server\r\n      const response = await axios.post('/api/subscriptions/verify-subscription', { token });\r\n      \r\n      if (response.data.valid) {\r\n        setSubscription({\r\n          isSubscribed: true,\r\n          plan: response.data.plan,\r\n          expiresAt: response.data.expiresAt,\r\n          isLoading: false,\r\n          error: null\r\n        });\r\n        \r\n        // Update expiry in localStorage\r\n        localStorage.setItem(storageKeys.SUBSCRIPTION_EXPIRY, response.data.expiresAt);\r\n      } else {\r\n        // Invalid token, clear storage\r\n        localStorage.removeItem(storageKeys.SUBSCRIPTION_TOKEN);\r\n        localStorage.removeItem(storageKeys.SUBSCRIPTION_EXPIRY);\r\n        \r\n        setSubscription({\r\n          isSubscribed: false,\r\n          plan: null,\r\n          expiresAt: null,\r\n          isLoading: false,\r\n          error: response.data.error || 'Invalid subscription'\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error('Subscription verification failed:', error);\r\n      \r\n      // Fallback to local verification if server unreachable\r\n      const expiryDate = localStorage.getItem(storageKeys.SUBSCRIPTION_EXPIRY);\r\n      if (expiryDate && new Date(expiryDate) > new Date()) {\r\n        setSubscription(prev => ({\r\n          ...prev,\r\n          isSubscribed: true,\r\n          isOfflineVerified: true,\r\n          isLoading: false\r\n        }));\r\n      } else {\r\n        setSubscription(prev => ({\r\n          ...prev,\r\n          isSubscribed: false,\r\n          isLoading: false,\r\n          error: 'Failed to verify subscription status'\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const purchaseSubscription = async (email, plan) => {\r\n    setSubscription(prev => ({ ...prev, isLoading: true }));\r\n    \r\n    try {\r\n      // Create checkout session\r\n      const sessionResponse = await axios.post('/api/subscriptions/create-subscription', {\r\n        email,\r\n        plan,\r\n        returnUrl: window.location.origin + '/subscription/confirm'\r\n      });\r\n      \r\n      // If we have a checkout URL, redirect user\r\n      if (sessionResponse.data.url) {\r\n        window.location.href = sessionResponse.data.url;\r\n        return { success: true, redirecting: true };\r\n      }\r\n      \r\n      // If we have a session ID, proceed with verification\r\n      if (sessionResponse.data.sessionId) {\r\n        const verificationResponse = await axios.post('/api/subscriptions/verify-checkout-session', {\r\n          sessionId: sessionResponse.data.sessionId\r\n        });\r\n        \r\n        if (verificationResponse.data.success) {\r\n          // Store token in localStorage\r\n          localStorage.setItem(storageKeys.SUBSCRIPTION_TOKEN, verificationResponse.data.accessToken);\r\n          localStorage.setItem(storageKeys.SUBSCRIPTION_EXPIRY, verificationResponse.data.expiresAt);\r\n          \r\n          // Update subscription state\r\n          await verifySubscription();\r\n          \r\n          return {\r\n            success: true,\r\n            mobileAccessCode: verificationResponse.data.mobileAccessCode\r\n          };\r\n        }\r\n      }\r\n      \r\n      throw new Error('Subscription processing failed');\r\n    } catch (error) {\r\n      console.error('Purchase subscription error:', error);\r\n      \r\n      setSubscription(prev => ({\r\n        ...prev,\r\n        isLoading: false,\r\n        error: error.response?.data?.error || 'Failed to process subscription'\r\n      }));\r\n      \r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.error || 'Failed to process subscription'\r\n      };\r\n    }\r\n  };\r\n\r\n  const activateTokenFromEmail = async (token) => {\r\n    setSubscription(prev => ({ ...prev, isLoading: true }));\r\n    \r\n    try {\r\n      // Verify token\r\n      const response = await axios.post('/api/subscriptions/verify-subscription', { token });\r\n      \r\n      if (response.data.valid) {\r\n        // Store token in localStorage\r\n        localStorage.setItem(storageKeys.SUBSCRIPTION_TOKEN, token);\r\n        localStorage.setItem(storageKeys.SUBSCRIPTION_EXPIRY, response.data.expiresAt);\r\n        \r\n        // Update subscription state\r\n        setSubscription({\r\n          isSubscribed: true,\r\n          plan: response.data.plan,\r\n          expiresAt: response.data.expiresAt,\r\n          isLoading: false,\r\n          error: null\r\n        });\r\n        \r\n        return { success: true };\r\n      }\r\n      \r\n      setSubscription(prev => ({\r\n        ...prev,\r\n        isLoading: false,\r\n        error: 'Invalid activation token'\r\n      }));\r\n      \r\n      return { success: false, error: 'Invalid activation token' };\r\n    } catch (error) {\r\n      console.error('Token activation failed:', error);\r\n      \r\n      setSubscription(prev => ({\r\n        ...prev,\r\n        isLoading: false,\r\n        error: error.response?.data?.error || 'Failed to activate subscription'\r\n      }));\r\n      \r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.error || 'Failed to activate subscription'\r\n      };\r\n    }\r\n  };\r\n\r\n  const cancelSubscription = async () => {\r\n    const token = localStorage.getItem(storageKeys.SUBSCRIPTION_TOKEN);\r\n    \r\n    if (!token) {\r\n      return { success: false, error: 'No active subscription' };\r\n    }\r\n    \r\n    try {\r\n      const response = await axios.post('/api/subscriptions/cancel', { token });\r\n      \r\n      if (response.data.success) {\r\n        // Keep the token in localStorage until expiry\r\n        // This allows the user to continue using premium features\r\n        // until the end of their billing period\r\n        await verifySubscription();\r\n        \r\n        return { success: true };\r\n      }\r\n      \r\n      return {\r\n        success: false,\r\n        error: response.data.error || 'Failed to cancel subscription'\r\n      };\r\n    } catch (error) {\r\n      console.error('Cancel subscription error:', error);\r\n      \r\n      return {\r\n        success: false,\r\n        error: error.response?.data?.error || 'Failed to cancel subscription'\r\n      };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SubscriptionContext.Provider value={{\r\n      ...subscription,\r\n      purchaseSubscription,\r\n      activateTokenFromEmail,\r\n      refreshSubscription: verifySubscription,\r\n      cancelSubscription\r\n    }}>\r\n      {children}\r\n    </SubscriptionContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SubscriptionContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}