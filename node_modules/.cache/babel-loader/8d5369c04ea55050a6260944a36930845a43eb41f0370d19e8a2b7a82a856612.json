{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\context\\\\SettingsContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { getUserSettings, saveUserSettings, applyThemeSettings } from '../utils/settingsUtils';\n\n// Updated default settings with new options\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const DEFAULT_SETTINGS = {\n  appearance: {\n    fontSize: 'medium',\n    colorScheme: 'blue',\n    darkMode: false\n  },\n  preferences: {\n    defaultCurrency: 'USD',\n    dateFormat: 'MM/DD/YYYY',\n    distanceUnit: 'miles',\n    temperatureUnit: 'fahrenheit',\n    language: 'en-US'\n  },\n  notifications: {\n    tripReminders: true,\n    taskReminders: true,\n    budgetAlerts: true,\n    emailNotifications: false,\n    emailAddress: '',\n    emailFrequency: 'daily'\n  },\n  privacy: {\n    shareLocationData: true,\n    collectAnalytics: true,\n    autoSaveEnabled: true,\n    dataRetention: 'forever'\n  },\n  accessibility: {\n    highContrast: false,\n    reducedMotion: false,\n    largerClickTargets: false,\n    screenReaderOptimized: false,\n    textScaling: 100\n  }\n};\n\n// Create Settings Context\nconst SettingsContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the Settings Context\nexport const useSettings = () => {\n  _s();\n  const context = useContext(SettingsContext);\n  if (!context) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n\n// Settings Provider Component\n_s(useSettings, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SettingsProvider = ({\n  children\n}) => {\n  _s2();\n  const [settings, setSettings] = useState(DEFAULT_SETTINGS);\n  const [loading, setLoading] = useState(true);\n\n  // Apply settings on initial load\n  useEffect(() => {\n    const loadSettings = async () => {\n      const userSettings = getUserSettings();\n      const mergedSettings = mergeWithDefaultSettings(userSettings);\n      setSettings(mergedSettings);\n      applyThemeSettings(mergedSettings);\n      applyAccessibilitySettings(mergedSettings);\n      setLoading(false);\n    };\n    loadSettings();\n  }, []);\n\n  // Merge user settings with defaults to ensure all properties exist\n  const mergeWithDefaultSettings = userSettings => {\n    // Helper function to deep merge objects\n    const deepMerge = (target, source) => {\n      const output = {\n        ...target\n      };\n      for (const key in source) {\n        if (source.hasOwnProperty(key)) {\n          if (typeof source[key] === 'object' && source[key] !== null && !Array.isArray(source[key])) {\n            // If both target and source have the key and both are objects, merge them\n            if (target.hasOwnProperty(key) && typeof target[key] === 'object' && target[key] !== null && !Array.isArray(target[key])) {\n              output[key] = deepMerge(target[key], source[key]);\n            } else {\n              // If target doesn't have the key or is not an object, use source's value\n              output[key] = source[key];\n            }\n          } else {\n            // For primitives and arrays, simply use source's value\n            output[key] = source[key];\n          }\n        }\n      }\n      return output;\n    };\n\n    // Start with default settings and merge with user settings\n    return deepMerge(DEFAULT_SETTINGS, userSettings);\n  };\n\n  // Update settings\n  const updateSettings = newSettings => {\n    // Apply the new settings immediately\n    setSettings(newSettings);\n\n    // Save to localStorage\n    saveUserSettings(newSettings);\n\n    // Apply theme changes\n    applyThemeSettings(newSettings);\n\n    // Apply accessibility settings\n    applyAccessibilitySettings(newSettings);\n    return true;\n  };\n\n  // Reset settings to defaults\n  const resetSettings = () => {\n    setSettings(DEFAULT_SETTINGS);\n    saveUserSettings(DEFAULT_SETTINGS);\n    applyThemeSettings(DEFAULT_SETTINGS);\n    applyAccessibilitySettings(DEFAULT_SETTINGS);\n    return true;\n  };\n\n  // Apply accessibility settings\n  const applyAccessibilitySettings = settings => {\n    if (!settings || !settings.accessibility) return;\n    const {\n      highContrast,\n      reducedMotion,\n      largerClickTargets,\n      textScaling,\n      screenReaderOptimized\n    } = settings.accessibility;\n\n    // Apply high contrast mode\n    if (highContrast) {\n      document.documentElement.classList.add('high-contrast');\n    } else {\n      document.documentElement.classList.remove('high-contrast');\n    }\n\n    // Apply reduced motion\n    if (reducedMotion) {\n      document.documentElement.classList.add('reduced-motion');\n    } else {\n      document.documentElement.classList.remove('reduced-motion');\n    }\n\n    // Apply larger click targets\n    if (largerClickTargets) {\n      document.documentElement.classList.add('larger-targets');\n    } else {\n      document.documentElement.classList.remove('larger-targets');\n    }\n\n    // Apply text scaling\n    if (textScaling && textScaling !== 100) {\n      document.documentElement.style.setProperty('--text-scale-ratio', `${textScaling / 100}`);\n      document.documentElement.classList.add('custom-text-scaling');\n    } else {\n      document.documentElement.classList.remove('custom-text-scaling');\n    }\n\n    // Apply screen reader optimizations\n    if (screenReaderOptimized) {\n      document.documentElement.setAttribute('data-screen-reader-optimized', 'true');\n    } else {\n      document.documentElement.removeAttribute('data-screen-reader-optimized');\n    }\n  };\n\n  // Context value\n  const value = {\n    settings,\n    updateSettings,\n    resetSettings,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 5\n  }, this);\n};\n_s2(SettingsProvider, \"tBaDdOTbP4OTEtIvNtnSqNNlpPM=\");\n_c = SettingsProvider;\nexport default SettingsContext;\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","getUserSettings","saveUserSettings","applyThemeSettings","jsxDEV","_jsxDEV","DEFAULT_SETTINGS","appearance","fontSize","colorScheme","darkMode","preferences","defaultCurrency","dateFormat","distanceUnit","temperatureUnit","language","notifications","tripReminders","taskReminders","budgetAlerts","emailNotifications","emailAddress","emailFrequency","privacy","shareLocationData","collectAnalytics","autoSaveEnabled","dataRetention","accessibility","highContrast","reducedMotion","largerClickTargets","screenReaderOptimized","textScaling","SettingsContext","useSettings","_s","context","Error","SettingsProvider","children","_s2","settings","setSettings","loading","setLoading","loadSettings","userSettings","mergedSettings","mergeWithDefaultSettings","applyAccessibilitySettings","deepMerge","target","source","output","key","hasOwnProperty","Array","isArray","updateSettings","newSettings","resetSettings","document","documentElement","classList","add","remove","style","setProperty","setAttribute","removeAttribute","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/context/SettingsContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { getUserSettings, saveUserSettings, applyThemeSettings } from '../utils/settingsUtils';\r\n\r\n// Updated default settings with new options\r\nexport const DEFAULT_SETTINGS = {\r\n  appearance: {\r\n    fontSize: 'medium',\r\n    colorScheme: 'blue',\r\n    darkMode: false\r\n  },\r\n  preferences: {\r\n    defaultCurrency: 'USD',\r\n    dateFormat: 'MM/DD/YYYY',\r\n    distanceUnit: 'miles',\r\n    temperatureUnit: 'fahrenheit',\r\n    language: 'en-US',\r\n  },\r\n  notifications: {\r\n    tripReminders: true,\r\n    taskReminders: true,\r\n    budgetAlerts: true,\r\n    emailNotifications: false,\r\n    emailAddress: '',\r\n    emailFrequency: 'daily'\r\n  },\r\n  privacy: {\r\n    shareLocationData: true,\r\n    collectAnalytics: true,\r\n    autoSaveEnabled: true,\r\n    dataRetention: 'forever'\r\n  },\r\n  accessibility: {\r\n    highContrast: false,\r\n    reducedMotion: false,\r\n    largerClickTargets: false,\r\n    screenReaderOptimized: false,\r\n    textScaling: 100\r\n  }\r\n};\r\n\r\n// Create Settings Context\r\nconst SettingsContext = createContext();\r\n\r\n// Custom hook to use the Settings Context\r\nexport const useSettings = () => {\r\n  const context = useContext(SettingsContext);\r\n  if (!context) {\r\n    throw new Error('useSettings must be used within a SettingsProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Settings Provider Component\r\nexport const SettingsProvider = ({ children }) => {\r\n  const [settings, setSettings] = useState(DEFAULT_SETTINGS);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Apply settings on initial load\r\n  useEffect(() => {\r\n    const loadSettings = async () => {\r\n      const userSettings = getUserSettings();\r\n      const mergedSettings = mergeWithDefaultSettings(userSettings);\r\n      setSettings(mergedSettings);\r\n      applyThemeSettings(mergedSettings);\r\n      applyAccessibilitySettings(mergedSettings);\r\n      setLoading(false);\r\n    };\r\n\r\n    loadSettings();\r\n  }, []);\r\n\r\n  // Merge user settings with defaults to ensure all properties exist\r\n  const mergeWithDefaultSettings = (userSettings) => {\r\n    // Helper function to deep merge objects\r\n    const deepMerge = (target, source) => {\r\n      const output = { ...target };\r\n      \r\n      for (const key in source) {\r\n        if (source.hasOwnProperty(key)) {\r\n          if (\r\n            typeof source[key] === 'object' && \r\n            source[key] !== null && \r\n            !Array.isArray(source[key])\r\n          ) {\r\n            // If both target and source have the key and both are objects, merge them\r\n            if (\r\n              target.hasOwnProperty(key) && \r\n              typeof target[key] === 'object' && \r\n              target[key] !== null && \r\n              !Array.isArray(target[key])\r\n            ) {\r\n              output[key] = deepMerge(target[key], source[key]);\r\n            } else {\r\n              // If target doesn't have the key or is not an object, use source's value\r\n              output[key] = source[key];\r\n            }\r\n          } else {\r\n            // For primitives and arrays, simply use source's value\r\n            output[key] = source[key];\r\n          }\r\n        }\r\n      }\r\n      \r\n      return output;\r\n    };\r\n    \r\n    // Start with default settings and merge with user settings\r\n    return deepMerge(DEFAULT_SETTINGS, userSettings);\r\n  };\r\n\r\n  // Update settings\r\n  const updateSettings = (newSettings) => {\r\n    // Apply the new settings immediately\r\n    setSettings(newSettings);\r\n    \r\n    // Save to localStorage\r\n    saveUserSettings(newSettings);\r\n    \r\n    // Apply theme changes\r\n    applyThemeSettings(newSettings);\r\n    \r\n    // Apply accessibility settings\r\n    applyAccessibilitySettings(newSettings);\r\n    \r\n    return true;\r\n  };\r\n\r\n  // Reset settings to defaults\r\n  const resetSettings = () => {\r\n    setSettings(DEFAULT_SETTINGS);\r\n    saveUserSettings(DEFAULT_SETTINGS);\r\n    applyThemeSettings(DEFAULT_SETTINGS);\r\n    applyAccessibilitySettings(DEFAULT_SETTINGS);\r\n    return true;\r\n  };\r\n\r\n  // Apply accessibility settings\r\n  const applyAccessibilitySettings = (settings) => {\r\n    if (!settings || !settings.accessibility) return;\r\n\r\n    const { highContrast, reducedMotion, largerClickTargets, textScaling, screenReaderOptimized } = settings.accessibility;\r\n\r\n    // Apply high contrast mode\r\n    if (highContrast) {\r\n      document.documentElement.classList.add('high-contrast');\r\n    } else {\r\n      document.documentElement.classList.remove('high-contrast');\r\n    }\r\n\r\n    // Apply reduced motion\r\n    if (reducedMotion) {\r\n      document.documentElement.classList.add('reduced-motion');\r\n    } else {\r\n      document.documentElement.classList.remove('reduced-motion');\r\n    }\r\n\r\n    // Apply larger click targets\r\n    if (largerClickTargets) {\r\n      document.documentElement.classList.add('larger-targets');\r\n    } else {\r\n      document.documentElement.classList.remove('larger-targets');\r\n    }\r\n\r\n    // Apply text scaling\r\n    if (textScaling && textScaling !== 100) {\r\n      document.documentElement.style.setProperty('--text-scale-ratio', `${textScaling / 100}`);\r\n      document.documentElement.classList.add('custom-text-scaling');\r\n    } else {\r\n      document.documentElement.classList.remove('custom-text-scaling');\r\n    }\r\n\r\n    // Apply screen reader optimizations\r\n    if (screenReaderOptimized) {\r\n      document.documentElement.setAttribute('data-screen-reader-optimized', 'true');\r\n    } else {\r\n      document.documentElement.removeAttribute('data-screen-reader-optimized');\r\n    }\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    settings,\r\n    updateSettings,\r\n    resetSettings,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <SettingsContext.Provider value={value}>\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SettingsContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}