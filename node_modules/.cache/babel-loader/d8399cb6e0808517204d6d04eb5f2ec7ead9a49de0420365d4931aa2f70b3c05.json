{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useNotification.js\n\nimport { useState } from 'react';\n\n/**\r\n * Hook for displaying notifications\r\n * @returns {Object} Notification methods and state\r\n */\nconst useNotification = () => {\n  _s();\n  const [notifications, setNotifications] = useState([]);\n\n  /**\r\n   * Show a notification\r\n   * @param {Object} notification - Notification data\r\n   * @param {string} notification.type - Type of notification ('success', 'error', 'info', 'warning')\r\n   * @param {string} notification.message - Notification message\r\n   * @param {number} notification.duration - Duration in ms (default: 5000)\r\n   * @returns {string} ID of the created notification\r\n   */\n  const show = notification => {\n    // Generate unique ID\n    const id = Date.now().toString();\n\n    // Default duration is 5 seconds\n    const duration = notification.duration || 5000;\n\n    // Add notification to state\n    const newNotification = {\n      id,\n      type: notification.type || 'info',\n      message: notification.message,\n      duration\n    };\n    setNotifications(prev => [...prev, newNotification]);\n\n    // For development, just log the notification\n    console.log(`Notification (${newNotification.type}): ${newNotification.message}`);\n\n    // Set timeout to remove notification\n    setTimeout(() => {\n      dismiss(id);\n    }, duration);\n    return id;\n  };\n\n  /**\r\n   * Dismiss a notification by ID\r\n   * @param {string} id - Notification ID\r\n   */\n  const dismiss = id => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  };\n\n  /**\r\n   * Dismiss all notifications\r\n   */\n  const dismissAll = () => {\n    setNotifications([]);\n  };\n  return {\n    notifications,\n    show,\n    dismiss,\n    dismissAll\n  };\n};\n_s(useNotification, \"/HH3zTd3BUNOgnlhD79kguSWbWM=\");\nexport default useNotification;","map":{"version":3,"names":["useState","useNotification","_s","notifications","setNotifications","show","notification","id","Date","now","toString","duration","newNotification","type","message","prev","console","log","setTimeout","dismiss","filter","dismissAll"],"sources":["C:/Users/juliu/Desktop/web/src/hooks/useNotification.js"],"sourcesContent":["// src/hooks/useNotification.js\r\n\r\nimport { useState } from 'react';\r\n\r\n/**\r\n * Hook for displaying notifications\r\n * @returns {Object} Notification methods and state\r\n */\r\nconst useNotification = () => {\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  /**\r\n   * Show a notification\r\n   * @param {Object} notification - Notification data\r\n   * @param {string} notification.type - Type of notification ('success', 'error', 'info', 'warning')\r\n   * @param {string} notification.message - Notification message\r\n   * @param {number} notification.duration - Duration in ms (default: 5000)\r\n   * @returns {string} ID of the created notification\r\n   */\r\n  const show = (notification) => {\r\n    // Generate unique ID\r\n    const id = Date.now().toString();\r\n    \r\n    // Default duration is 5 seconds\r\n    const duration = notification.duration || 5000;\r\n    \r\n    // Add notification to state\r\n    const newNotification = {\r\n      id,\r\n      type: notification.type || 'info',\r\n      message: notification.message,\r\n      duration\r\n    };\r\n    \r\n    setNotifications(prev => [...prev, newNotification]);\r\n    \r\n    // For development, just log the notification\r\n    console.log(`Notification (${newNotification.type}): ${newNotification.message}`);\r\n    \r\n    // Set timeout to remove notification\r\n    setTimeout(() => {\r\n      dismiss(id);\r\n    }, duration);\r\n    \r\n    return id;\r\n  };\r\n\r\n  /**\r\n   * Dismiss a notification by ID\r\n   * @param {string} id - Notification ID\r\n   */\r\n  const dismiss = (id) => {\r\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\r\n  };\r\n\r\n  /**\r\n   * Dismiss all notifications\r\n   */\r\n  const dismissAll = () => {\r\n    setNotifications([]);\r\n  };\r\n\r\n  return {\r\n    notifications,\r\n    show,\r\n    dismiss,\r\n    dismissAll\r\n  };\r\n};\r\n\r\nexport default useNotification;"],"mappings":";AAAA;;AAEA,SAASA,QAAQ,QAAQ,OAAO;;AAEhC;AACA;AACA;AACA;AACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;;EAEtD;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE,MAAMK,IAAI,GAAIC,YAAY,IAAK;IAC7B;IACA,MAAMC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;;IAEhC;IACA,MAAMC,QAAQ,GAAGL,YAAY,CAACK,QAAQ,IAAI,IAAI;;IAE9C;IACA,MAAMC,eAAe,GAAG;MACtBL,EAAE;MACFM,IAAI,EAAEP,YAAY,CAACO,IAAI,IAAI,MAAM;MACjCC,OAAO,EAAER,YAAY,CAACQ,OAAO;MAC7BH;IACF,CAAC;IAEDP,gBAAgB,CAACW,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEH,eAAe,CAAC,CAAC;;IAEpD;IACAI,OAAO,CAACC,GAAG,CAAC,iBAAiBL,eAAe,CAACC,IAAI,MAAMD,eAAe,CAACE,OAAO,EAAE,CAAC;;IAEjF;IACAI,UAAU,CAAC,MAAM;MACfC,OAAO,CAACZ,EAAE,CAAC;IACb,CAAC,EAAEI,QAAQ,CAAC;IAEZ,OAAOJ,EAAE;EACX,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMY,OAAO,GAAIZ,EAAE,IAAK;IACtBH,gBAAgB,CAACW,IAAI,IAAIA,IAAI,CAACK,MAAM,CAACd,YAAY,IAAIA,YAAY,CAACC,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC/E,CAAC;;EAED;AACF;AACA;EACE,MAAMc,UAAU,GAAGA,CAAA,KAAM;IACvBjB,gBAAgB,CAAC,EAAE,CAAC;EACtB,CAAC;EAED,OAAO;IACLD,aAAa;IACbE,IAAI;IACJc,OAAO;IACPE;EACF,CAAC;AACH,CAAC;AAACnB,EAAA,CA5DID,eAAe;AA8DrB,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}