{"ast":null,"code":"/**\r\n * Enhanced PDF Generator utility for TravelEase\r\n * Provides functionality to export trip details as PDF\r\n */\n\n// In a real implementation, we would use libraries like jsPDF and html2canvas\n// For this implementation, we'll create the structure and mock the PDF generation\n\n/**\r\n * Generate a PDF for a trip\r\n * \r\n * @param {Object} trip The trip object to export\r\n * @param {Object} userSettings User settings for formatting\r\n * @returns {Promise<Blob>} A promise that resolves to a Blob containing the PDF\r\n */\nexport const generateTripPdf = async (trip, userSettings = {}) => {\n  // In a real implementation, we would:\n  // 1. Create a jsPDF instance\n  // 2. Add content to the PDF\n  // 3. Return a Blob containing the PDF\n\n  // For this mock implementation, we'll log the process and return a mock Blob\n  console.log(`Generating PDF for trip to ${trip.destination}`);\n  try {\n    // Mock PDF generation process\n    await mockPdfGenerationProcess(trip, userSettings);\n\n    // Return a mock Blob (in real implementation, this would be the actual PDF)\n    return new Blob(['PDF content for ' + trip.destination], {\n      type: 'application/pdf'\n    });\n  } catch (error) {\n    console.error('Error generating PDF:', error);\n    throw new Error('Failed to generate PDF');\n  }\n};\n\n/**\r\n * Export a trip as PDF and trigger download\r\n * \r\n * @param {Object} trip The trip to export\r\n * @param {Object} userSettings User settings for formatting\r\n */\nexport const exportTripToPDF = async (trip, userSettings = {}) => {\n  try {\n    // Show loading indicator\n    const loadingElement = document.createElement('div');\n    loadingElement.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\n    loadingElement.innerHTML = `\n        <div class=\"bg-white p-6 rounded-lg shadow-xl\">\n          <div class=\"animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500 mx-auto\"></div>\n          <p class=\"mt-4 text-center\">Generating PDF...</p>\n        </div>\n      `;\n    document.body.appendChild(loadingElement);\n\n    // Generate the PDF\n    const pdfBlob = await generateTripPdf(trip, userSettings);\n\n    // Create a download link\n    const url = URL.createObjectURL(pdfBlob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `${trip.destination.replace(/\\s+/g, '_')}_Trip_Plan.pdf`;\n\n    // Trigger download\n    document.body.appendChild(a);\n    a.click();\n\n    // Clean up\n    setTimeout(() => {\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n      document.body.removeChild(loadingElement);\n    }, 100);\n    return true;\n  } catch (error) {\n    console.error('Error exporting trip to PDF:', error);\n    alert('Failed to export trip to PDF. Please try again.');\n    return false;\n  }\n};\n\n/**\r\n * Email trip details as PDF\r\n * \r\n * @param {Object} trip The trip to email\r\n * @param {string} email The recipient email address\r\n * @param {Object} userSettings User settings for formatting\r\n * @returns {Promise<boolean>} Whether the email was sent successfully\r\n */\nexport const emailTripDetails = async (trip, email, userSettings = {}) => {\n  if (!email || !validateEmail(email)) {\n    alert('Please enter a valid email address');\n    return false;\n  }\n  try {\n    // Show loading indicator\n    const loadingElement = document.createElement('div');\n    loadingElement.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\n    loadingElement.innerHTML = `\n        <div class=\"bg-white p-6 rounded-lg shadow-xl\">\n          <div class=\"animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500 mx-auto\"></div>\n          <p class=\"mt-4 text-center\">Sending email...</p>\n        </div>\n      `;\n    document.body.appendChild(loadingElement);\n\n    // In a real implementation, we would:\n    // 1. Generate the PDF\n    // 2. Send it to the server\n    // 3. Have the server send the email\n\n    // For this mock implementation, we'll simulate the process\n    const pdfBlob = await generateTripPdf(trip, userSettings);\n\n    // Simulate email sending delay\n    await new Promise(resolve => setTimeout(resolve, 1500));\n\n    // Remove loading indicator\n    document.body.removeChild(loadingElement);\n\n    // Show success message\n    alert(`Trip details for ${trip.destination} sent to ${email}`);\n    return true;\n  } catch (error) {\n    console.error('Error emailing trip details:', error);\n    alert('Failed to send email. Please try again.');\n    return false;\n  }\n};\n\n// Helper functions\n\n/**\r\n * Mock PDF generation process\r\n * \r\n * @param {Object} trip The trip to export\r\n * @param {Object} userSettings User settings for formatting\r\n * @returns {Promise<void>}\r\n */\nconst mockPdfGenerationProcess = async (trip, userSettings) => {\n  // Simulate processing time\n  await new Promise(resolve => setTimeout(resolve, 1000));\n\n  // Log the content that would be included in the PDF\n  console.log('PDF Content:');\n  console.log('------------');\n  console.log(`Trip to ${trip.destination}`);\n  console.log(`Date: ${trip.startDate} to ${trip.endDate}`);\n  console.log(`Budget: $${trip.budget}`);\n  if (trip.budgetBreakdown) {\n    console.log('Budget Breakdown:');\n    Object.entries(trip.budgetBreakdown).forEach(([category, amount]) => {\n      console.log(`  ${category}: $${amount}`);\n    });\n  }\n  if (trip.transports && trip.transports.length > 0) {\n    console.log('Transportation:');\n    trip.transports.forEach(transport => {\n      console.log(`  ${transport.type}: ${transport.from} to ${transport.to}`);\n    });\n  }\n  if (trip.tasks && trip.tasks.length > 0) {\n    console.log('Tasks:');\n    trip.tasks.forEach(task => {\n      console.log(`  ${task.completed ? '✓' : '○'} ${task.text}`);\n    });\n  }\n\n  // In a real implementation, this would create the actual PDF content\n};\n\n/**\r\n * Validate an email address\r\n * \r\n * @param {string} email The email address to validate\r\n * @returns {boolean} Whether the email is valid\r\n */\nconst validateEmail = email => {\n  const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n  return re.test(String(email).toLowerCase());\n};","map":{"version":3,"names":["generateTripPdf","trip","userSettings","console","log","destination","mockPdfGenerationProcess","Blob","type","error","Error","exportTripToPDF","loadingElement","document","createElement","className","innerHTML","body","appendChild","pdfBlob","url","URL","createObjectURL","a","href","download","replace","click","setTimeout","removeChild","revokeObjectURL","alert","emailTripDetails","email","validateEmail","Promise","resolve","startDate","endDate","budget","budgetBreakdown","Object","entries","forEach","category","amount","transports","length","transport","from","to","tasks","task","completed","text","re","test","String","toLowerCase"],"sources":["C:/Users/juliu/Desktop/web/src/utils/enhancedPdfGenerator.js"],"sourcesContent":["/**\r\n * Enhanced PDF Generator utility for TravelEase\r\n * Provides functionality to export trip details as PDF\r\n */\r\n\r\n// In a real implementation, we would use libraries like jsPDF and html2canvas\r\n// For this implementation, we'll create the structure and mock the PDF generation\r\n\r\n/**\r\n * Generate a PDF for a trip\r\n * \r\n * @param {Object} trip The trip object to export\r\n * @param {Object} userSettings User settings for formatting\r\n * @returns {Promise<Blob>} A promise that resolves to a Blob containing the PDF\r\n */\r\nexport const generateTripPdf = async (trip, userSettings = {}) => {\r\n    // In a real implementation, we would:\r\n    // 1. Create a jsPDF instance\r\n    // 2. Add content to the PDF\r\n    // 3. Return a Blob containing the PDF\r\n  \r\n    // For this mock implementation, we'll log the process and return a mock Blob\r\n    console.log(`Generating PDF for trip to ${trip.destination}`);\r\n    \r\n    try {\r\n      // Mock PDF generation process\r\n      await mockPdfGenerationProcess(trip, userSettings);\r\n      \r\n      // Return a mock Blob (in real implementation, this would be the actual PDF)\r\n      return new Blob(['PDF content for ' + trip.destination], { type: 'application/pdf' });\r\n    } catch (error) {\r\n      console.error('Error generating PDF:', error);\r\n      throw new Error('Failed to generate PDF');\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Export a trip as PDF and trigger download\r\n   * \r\n   * @param {Object} trip The trip to export\r\n   * @param {Object} userSettings User settings for formatting\r\n   */\r\n  export const exportTripToPDF = async (trip, userSettings = {}) => {\r\n    try {\r\n      // Show loading indicator\r\n      const loadingElement = document.createElement('div');\r\n      loadingElement.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\r\n      loadingElement.innerHTML = `\r\n        <div class=\"bg-white p-6 rounded-lg shadow-xl\">\r\n          <div class=\"animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500 mx-auto\"></div>\r\n          <p class=\"mt-4 text-center\">Generating PDF...</p>\r\n        </div>\r\n      `;\r\n      document.body.appendChild(loadingElement);\r\n  \r\n      // Generate the PDF\r\n      const pdfBlob = await generateTripPdf(trip, userSettings);\r\n      \r\n      // Create a download link\r\n      const url = URL.createObjectURL(pdfBlob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = `${trip.destination.replace(/\\s+/g, '_')}_Trip_Plan.pdf`;\r\n      \r\n      // Trigger download\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      \r\n      // Clean up\r\n      setTimeout(() => {\r\n        document.body.removeChild(a);\r\n        URL.revokeObjectURL(url);\r\n        document.body.removeChild(loadingElement);\r\n      }, 100);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error exporting trip to PDF:', error);\r\n      alert('Failed to export trip to PDF. Please try again.');\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Email trip details as PDF\r\n   * \r\n   * @param {Object} trip The trip to email\r\n   * @param {string} email The recipient email address\r\n   * @param {Object} userSettings User settings for formatting\r\n   * @returns {Promise<boolean>} Whether the email was sent successfully\r\n   */\r\n  export const emailTripDetails = async (trip, email, userSettings = {}) => {\r\n    if (!email || !validateEmail(email)) {\r\n      alert('Please enter a valid email address');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      // Show loading indicator\r\n      const loadingElement = document.createElement('div');\r\n      loadingElement.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';\r\n      loadingElement.innerHTML = `\r\n        <div class=\"bg-white p-6 rounded-lg shadow-xl\">\r\n          <div class=\"animate-spin rounded-full h-10 w-10 border-b-2 border-blue-500 mx-auto\"></div>\r\n          <p class=\"mt-4 text-center\">Sending email...</p>\r\n        </div>\r\n      `;\r\n      document.body.appendChild(loadingElement);\r\n  \r\n      // In a real implementation, we would:\r\n      // 1. Generate the PDF\r\n      // 2. Send it to the server\r\n      // 3. Have the server send the email\r\n      \r\n      // For this mock implementation, we'll simulate the process\r\n      const pdfBlob = await generateTripPdf(trip, userSettings);\r\n      \r\n      // Simulate email sending delay\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      \r\n      // Remove loading indicator\r\n      document.body.removeChild(loadingElement);\r\n      \r\n      // Show success message\r\n      alert(`Trip details for ${trip.destination} sent to ${email}`);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error emailing trip details:', error);\r\n      alert('Failed to send email. Please try again.');\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Helper functions\r\n  \r\n  /**\r\n   * Mock PDF generation process\r\n   * \r\n   * @param {Object} trip The trip to export\r\n   * @param {Object} userSettings User settings for formatting\r\n   * @returns {Promise<void>}\r\n   */\r\n  const mockPdfGenerationProcess = async (trip, userSettings) => {\r\n    // Simulate processing time\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Log the content that would be included in the PDF\r\n    console.log('PDF Content:');\r\n    console.log('------------');\r\n    console.log(`Trip to ${trip.destination}`);\r\n    console.log(`Date: ${trip.startDate} to ${trip.endDate}`);\r\n    console.log(`Budget: $${trip.budget}`);\r\n    \r\n    if (trip.budgetBreakdown) {\r\n      console.log('Budget Breakdown:');\r\n      Object.entries(trip.budgetBreakdown).forEach(([category, amount]) => {\r\n        console.log(`  ${category}: $${amount}`);\r\n      });\r\n    }\r\n    \r\n    if (trip.transports && trip.transports.length > 0) {\r\n      console.log('Transportation:');\r\n      trip.transports.forEach(transport => {\r\n        console.log(`  ${transport.type}: ${transport.from} to ${transport.to}`);\r\n      });\r\n    }\r\n    \r\n    if (trip.tasks && trip.tasks.length > 0) {\r\n      console.log('Tasks:');\r\n      trip.tasks.forEach(task => {\r\n        console.log(`  ${task.completed ? '✓' : '○'} ${task.text}`);\r\n      });\r\n    }\r\n    \r\n    // In a real implementation, this would create the actual PDF content\r\n  };\r\n  \r\n  /**\r\n   * Validate an email address\r\n   * \r\n   * @param {string} email The email address to validate\r\n   * @returns {boolean} Whether the email is valid\r\n   */\r\n  const validateEmail = (email) => {\r\n    const re = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n    return re.test(String(email).toLowerCase());\r\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}