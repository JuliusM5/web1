{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\utils\\\\i18n.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/utils/i18n.js\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport translations from './translations';\n\n// Create a context for internationalization\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst I18nContext = /*#__PURE__*/createContext();\n\n// Default language\nconst DEFAULT_LANGUAGE = 'en-US';\n\n// Available languages\nexport const AVAILABLE_LANGUAGES = [{\n  code: 'en-US',\n  name: 'English (US)'\n}, {\n  code: 'en-GB',\n  name: 'English (UK)'\n}, {\n  code: 'es-ES',\n  name: 'Spanish'\n}, {\n  code: 'fr-FR',\n  name: 'French'\n}, {\n  code: 'de-DE',\n  name: 'German'\n}, {\n  code: 'it-IT',\n  name: 'Italian'\n}, {\n  code: 'ja-JP',\n  name: 'Japanese'\n}, {\n  code: 'zh-CN',\n  name: 'Chinese (Simplified)'\n}];\n\n// Provider component for internationalization\nexport const I18nProvider = ({\n  children\n}) => {\n  _s();\n  const [language, setLanguage] = useState(DEFAULT_LANGUAGE);\n\n  // Function to set the language\n  const changeLanguage = lang => {\n    if (translations[lang]) {\n      setLanguage(lang);\n      // Update HTML lang attribute\n      document.documentElement.setAttribute('lang', lang.split('-')[0]);\n      // Store in local storage for persistence\n      localStorage.setItem('userLanguage', lang);\n    }\n  };\n\n  // Get translation for a key\n  const t = (key, replacements = {}) => {\n    var _translations$languag, _translations$DEFAULT;\n    // Get the translation from the current language\n    let translation = ((_translations$languag = translations[language]) === null || _translations$languag === void 0 ? void 0 : _translations$languag[key]) || ((_translations$DEFAULT = translations[DEFAULT_LANGUAGE]) === null || _translations$DEFAULT === void 0 ? void 0 : _translations$DEFAULT[key]) || key;\n\n    // Replace placeholders with actual values\n    Object.entries(replacements).forEach(([placeholder, value]) => {\n      translation = translation.replace(`{${placeholder}}`, value);\n    });\n    return translation;\n  };\n\n  // Initialize language from localStorage or settings\n  useEffect(() => {\n    const storedLanguage = localStorage.getItem('userLanguage');\n    if (storedLanguage && translations[storedLanguage]) {\n      setLanguage(storedLanguage);\n      document.documentElement.setAttribute('lang', storedLanguage.split('-')[0]);\n    } else {\n      // Try to get language from user settings\n      try {\n        var _userSettings$prefere;\n        const userSettings = JSON.parse(localStorage.getItem('userSettings'));\n        const settingsLanguage = userSettings === null || userSettings === void 0 ? void 0 : (_userSettings$prefere = userSettings.preferences) === null || _userSettings$prefere === void 0 ? void 0 : _userSettings$prefere.language;\n        if (settingsLanguage && translations[settingsLanguage]) {\n          setLanguage(settingsLanguage);\n          document.documentElement.setAttribute('lang', settingsLanguage.split('-')[0]);\n        }\n      } catch (error) {\n        console.error('Error loading language from settings:', error);\n      }\n    }\n  }, []);\n\n  // Listen for settings changes to sync language\n  useEffect(() => {\n    const handleStorageChange = e => {\n      if (e.key === 'userSettings') {\n        try {\n          var _userSettings$prefere2;\n          const userSettings = JSON.parse(e.newValue);\n          const settingsLanguage = userSettings === null || userSettings === void 0 ? void 0 : (_userSettings$prefere2 = userSettings.preferences) === null || _userSettings$prefere2 === void 0 ? void 0 : _userSettings$prefere2.language;\n          if (settingsLanguage && translations[settingsLanguage] && settingsLanguage !== language) {\n            setLanguage(settingsLanguage);\n            document.documentElement.setAttribute('lang', settingsLanguage.split('-')[0]);\n          }\n        } catch (error) {\n          console.error('Error syncing language from settings:', error);\n        }\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, [language]);\n  return /*#__PURE__*/_jsxDEV(I18nContext.Provider, {\n    value: {\n      language,\n      changeLanguage,\n      t\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the internationalization context\n_s(I18nProvider, \"Ze4o/os9pt5QsaA+EsHOcCCaSKA=\");\n_c = I18nProvider;\nexport const useI18n = () => {\n  _s2();\n  const context = useContext(I18nContext);\n  if (!context) {\n    throw new Error('useI18n must be used within an I18nProvider');\n  }\n  return context;\n};\n\n// Connect the settings language preference with the i18n system\n_s2(useI18n, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const syncLanguageWithSettings = userSettings => {\n  var _userSettings$prefere3;\n  if (userSettings !== null && userSettings !== void 0 && (_userSettings$prefere3 = userSettings.preferences) !== null && _userSettings$prefere3 !== void 0 && _userSettings$prefere3.language) {\n    const settingsLanguage = userSettings.preferences.language;\n    if (translations[settingsLanguage]) {\n      localStorage.setItem('userLanguage', settingsLanguage);\n      document.documentElement.setAttribute('lang', settingsLanguage.split('-')[0]);\n      return true;\n    }\n  }\n  return false;\n};\nvar _c;\n$RefreshReg$(_c, \"I18nProvider\");","map":{"version":3,"names":["useState","useEffect","createContext","useContext","translations","jsxDEV","_jsxDEV","I18nContext","DEFAULT_LANGUAGE","AVAILABLE_LANGUAGES","code","name","I18nProvider","children","_s","language","setLanguage","changeLanguage","lang","document","documentElement","setAttribute","split","localStorage","setItem","t","key","replacements","_translations$languag","_translations$DEFAULT","translation","Object","entries","forEach","placeholder","value","replace","storedLanguage","getItem","_userSettings$prefere","userSettings","JSON","parse","settingsLanguage","preferences","error","console","handleStorageChange","e","_userSettings$prefere2","newValue","window","addEventListener","removeEventListener","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useI18n","_s2","context","Error","syncLanguageWithSettings","_userSettings$prefere3","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/utils/i18n.js"],"sourcesContent":["// src/utils/i18n.js\r\nimport { useState, useEffect, createContext, useContext } from 'react';\r\nimport translations from './translations';\r\n\r\n// Create a context for internationalization\r\nconst I18nContext = createContext();\r\n\r\n// Default language\r\nconst DEFAULT_LANGUAGE = 'en-US';\r\n\r\n// Available languages\r\nexport const AVAILABLE_LANGUAGES = [\r\n  { code: 'en-US', name: 'English (US)' },\r\n  { code: 'en-GB', name: 'English (UK)' },\r\n  { code: 'es-ES', name: 'Spanish' },\r\n  { code: 'fr-FR', name: 'French' },\r\n  { code: 'de-DE', name: 'German' },\r\n  { code: 'it-IT', name: 'Italian' },\r\n  { code: 'ja-JP', name: 'Japanese' },\r\n  { code: 'zh-CN', name: 'Chinese (Simplified)' },\r\n];\r\n\r\n// Provider component for internationalization\r\nexport const I18nProvider = ({ children }) => {\r\n  const [language, setLanguage] = useState(DEFAULT_LANGUAGE);\r\n  \r\n  // Function to set the language\r\n  const changeLanguage = (lang) => {\r\n    if (translations[lang]) {\r\n      setLanguage(lang);\r\n      // Update HTML lang attribute\r\n      document.documentElement.setAttribute('lang', lang.split('-')[0]);\r\n      // Store in local storage for persistence\r\n      localStorage.setItem('userLanguage', lang);\r\n    }\r\n  };\r\n  \r\n  // Get translation for a key\r\n  const t = (key, replacements = {}) => {\r\n    // Get the translation from the current language\r\n    let translation = translations[language]?.[key] || translations[DEFAULT_LANGUAGE]?.[key] || key;\r\n    \r\n    // Replace placeholders with actual values\r\n    Object.entries(replacements).forEach(([placeholder, value]) => {\r\n      translation = translation.replace(`{${placeholder}}`, value);\r\n    });\r\n    \r\n    return translation;\r\n  };\r\n  \r\n  // Initialize language from localStorage or settings\r\n  useEffect(() => {\r\n    const storedLanguage = localStorage.getItem('userLanguage');\r\n    if (storedLanguage && translations[storedLanguage]) {\r\n      setLanguage(storedLanguage);\r\n      document.documentElement.setAttribute('lang', storedLanguage.split('-')[0]);\r\n    } else {\r\n      // Try to get language from user settings\r\n      try {\r\n        const userSettings = JSON.parse(localStorage.getItem('userSettings'));\r\n        const settingsLanguage = userSettings?.preferences?.language;\r\n        \r\n        if (settingsLanguage && translations[settingsLanguage]) {\r\n          setLanguage(settingsLanguage);\r\n          document.documentElement.setAttribute('lang', settingsLanguage.split('-')[0]);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading language from settings:', error);\r\n      }\r\n    }\r\n  }, []);\r\n  \r\n  // Listen for settings changes to sync language\r\n  useEffect(() => {\r\n    const handleStorageChange = (e) => {\r\n      if (e.key === 'userSettings') {\r\n        try {\r\n          const userSettings = JSON.parse(e.newValue);\r\n          const settingsLanguage = userSettings?.preferences?.language;\r\n          \r\n          if (settingsLanguage && translations[settingsLanguage] && settingsLanguage !== language) {\r\n            setLanguage(settingsLanguage);\r\n            document.documentElement.setAttribute('lang', settingsLanguage.split('-')[0]);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error syncing language from settings:', error);\r\n        }\r\n      }\r\n    };\r\n    \r\n    window.addEventListener('storage', handleStorageChange);\r\n    return () => window.removeEventListener('storage', handleStorageChange);\r\n  }, [language]);\r\n  \r\n  return (\r\n    <I18nContext.Provider value={{ language, changeLanguage, t }}>\r\n      {children}\r\n    </I18nContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the internationalization context\r\nexport const useI18n = () => {\r\n  const context = useContext(I18nContext);\r\n  if (!context) {\r\n    throw new Error('useI18n must be used within an I18nProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Connect the settings language preference with the i18n system\r\nexport const syncLanguageWithSettings = (userSettings) => {\r\n  if (userSettings?.preferences?.language) {\r\n    const settingsLanguage = userSettings.preferences.language;\r\n    if (translations[settingsLanguage]) {\r\n      localStorage.setItem('userLanguage', settingsLanguage);\r\n      document.documentElement.setAttribute('lang', settingsLanguage.split('-')[0]);\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}