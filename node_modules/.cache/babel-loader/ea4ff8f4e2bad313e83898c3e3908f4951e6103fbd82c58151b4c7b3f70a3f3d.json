{"ast":null,"code":"// src/services/platforms/googleReceiptVerifier.js\n\n/**\r\n * Simple placeholder for Google Play receipt verification\r\n * Replace with actual implementation when integrating with Google Play\r\n */\nclass GoogleReceiptVerifier {\n  /**\r\n   * Verify a Google Play purchase token\r\n   * @param {string} packageName - App package name\r\n   * @param {string} productId - Product ID\r\n   * @param {string} purchaseToken - Purchase token from Google Play\r\n   * @returns {Promise<Object>} - Verification result\r\n   */\n  async verify(packageName, productId, purchaseToken) {\n    console.log('Verifying Google Play purchase:', {\n      packageName,\n      productId,\n      purchaseToken\n    });\n\n    // For development, just return a successful verification\n    // In production, this would call Google's Android Publisher API\n    return {\n      valid: true,\n      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n      // 30 days from now\n      productId: productId\n    };\n  }\n}\nmodule.exports = new GoogleReceiptVerifier();","map":{"version":3,"names":["GoogleReceiptVerifier","verify","packageName","productId","purchaseToken","console","log","valid","expiresAt","Date","now","toISOString","module","exports"],"sources":["C:/Users/juliu/Desktop/web/src/services/platforms/googleReceiptVerifier.js"],"sourcesContent":["// src/services/platforms/googleReceiptVerifier.js\r\n\r\n/**\r\n * Simple placeholder for Google Play receipt verification\r\n * Replace with actual implementation when integrating with Google Play\r\n */\r\nclass GoogleReceiptVerifier {\r\n  /**\r\n   * Verify a Google Play purchase token\r\n   * @param {string} packageName - App package name\r\n   * @param {string} productId - Product ID\r\n   * @param {string} purchaseToken - Purchase token from Google Play\r\n   * @returns {Promise<Object>} - Verification result\r\n   */\r\n  async verify(packageName, productId, purchaseToken) {\r\n    console.log('Verifying Google Play purchase:', { packageName, productId, purchaseToken });\r\n    \r\n    // For development, just return a successful verification\r\n    // In production, this would call Google's Android Publisher API\r\n    return {\r\n      valid: true,\r\n      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days from now\r\n      productId: productId\r\n    };\r\n  }\r\n}\r\n\r\nmodule.exports = new GoogleReceiptVerifier();"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA,MAAMA,qBAAqB,CAAC;EAC1B;AACF;AACA;AACA;AACA;AACA;AACA;EACE,MAAMC,MAAMA,CAACC,WAAW,EAAEC,SAAS,EAAEC,aAAa,EAAE;IAClDC,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE;MAAEJ,WAAW;MAAEC,SAAS;MAAEC;IAAc,CAAC,CAAC;;IAEzF;IACA;IACA,OAAO;MACLG,KAAK,EAAE,IAAI;MACXC,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,CAACC,WAAW,CAAC,CAAC;MAAE;MAC1ER,SAAS,EAAEA;IACb,CAAC;EACH;AACF;AAEAS,MAAM,CAACC,OAAO,GAAG,IAAIb,qBAAqB,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}