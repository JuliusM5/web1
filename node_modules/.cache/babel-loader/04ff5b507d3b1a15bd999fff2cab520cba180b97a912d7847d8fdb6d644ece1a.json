{"ast":null,"code":"/**\r\n * Streamlined Settings Manager - A singleton to manage theme settings\r\n * With improved error handling and safety checks\r\n */\n\n// Single source of truth for current settings state\nconst currentState = {\n  appearance: null,\n  accessibility: null,\n  language: null\n};\n\n// Single active operation flag\nlet operationInProgress = false;\nlet pendingOperation = null;\n\n/**\r\n * Enhanced deep equality check for objects and arrays\r\n */\nconst isEqual = (a, b) => {\n  // Handle identical references and primitive cases\n  if (a === b) return true;\n\n  // Handle nulls and undefined\n  if (a == null || b == null) return a === b;\n\n  // Handle different types\n  if (typeof a !== typeof b) return false;\n\n  // Handle primitive types\n  if (typeof a !== 'object') return a === b;\n\n  // Handle arrays\n  if (Array.isArray(a) && Array.isArray(b)) {\n    if (a.length !== b.length) return false;\n    return a.every((val, i) => isEqual(val, b[i]));\n  }\n\n  // If one is array and other is not\n  if (Array.isArray(a) !== Array.isArray(b)) return false;\n\n  // Handle regular objects\n  const keysA = Object.keys(a);\n  const keysB = Object.keys(b);\n  if (keysA.length !== keysB.length) return false;\n  return keysA.every(key => keysB.includes(key) && isEqual(a[key], b[key]));\n};\n\n/**\r\n * Safely get a property or return a default value\r\n */\nconst safeGet = (obj, path, defaultValue = null) => {\n  var _result;\n  if (obj == null) return defaultValue;\n  const keys = path.split('.');\n  let result = obj;\n  for (const key of keys) {\n    if (result == null || result[key] === undefined) {\n      return defaultValue;\n    }\n    result = result[key];\n  }\n  return (_result = result) !== null && _result !== void 0 ? _result : defaultValue;\n};\n\n/**\r\n * Apply settings using a single operation approach with enhanced safety\r\n */\nconst applySettings = settings => {\n  // Guard against invalid settings\n  if (!settings || typeof settings !== 'object') {\n    console.error('Invalid settings object provided');\n    return false;\n  }\n  try {\n    // Check if settings have actually changed\n    const hasAppearanceChanged = settings.appearance && !isEqual(currentState.appearance, settings.appearance);\n    const hasAccessibilityChanged = settings.accessibility && !isEqual(currentState.accessibility, settings.accessibility);\n    const language = safeGet(settings, 'preferences.language');\n    const hasLanguageChanged = language && currentState.language !== language;\n\n    // Skip if nothing has changed\n    if (!hasAppearanceChanged && !hasAccessibilityChanged && !hasLanguageChanged) {\n      return true;\n    }\n\n    // If operation in progress, queue this one and exit\n    if (operationInProgress) {\n      pendingOperation = {\n        ...settings\n      };\n      return true;\n    }\n\n    // Lock operations\n    operationInProgress = true;\n\n    // Apply appearance settings if changed\n    if (hasAppearanceChanged) {\n      const fontSize = safeGet(settings, 'appearance.fontSize', 'medium');\n      const colorScheme = safeGet(settings, 'appearance.colorScheme', 'blue');\n      const darkMode = safeGet(settings, 'appearance.darkMode', false);\n      try {\n        // Apply font size\n        document.documentElement.classList.remove('text-sm', 'text-base', 'text-lg');\n        if (fontSize === 'small') {\n          document.documentElement.classList.add('text-sm');\n        } else if (fontSize === 'medium') {\n          document.documentElement.classList.add('text-base');\n        } else if (fontSize === 'large') {\n          document.documentElement.classList.add('text-lg');\n        }\n\n        // Apply color scheme\n        const colorSchemeClasses = ['theme-blue', 'theme-purple', 'theme-green', 'theme-red', 'theme-amber', 'theme-indigo'];\n        document.documentElement.classList.remove(...colorSchemeClasses);\n        document.documentElement.classList.add(`theme-${colorScheme}`);\n\n        // Apply dark mode\n        if (darkMode) {\n          document.documentElement.classList.add('dark-mode');\n          document.body.classList.add('dark-mode');\n        } else {\n          document.documentElement.classList.remove('dark-mode');\n          document.body.classList.remove('dark-mode');\n        }\n\n        // Set theme property\n        document.documentElement.style.setProperty('--current-theme', colorScheme);\n        document.documentElement.setAttribute('data-theme', darkMode ? 'dark' : 'light');\n\n        // Update current state (deep copy to prevent reference issues)\n        currentState.appearance = JSON.parse(JSON.stringify(settings.appearance));\n      } catch (appearanceError) {\n        console.error('Error applying appearance settings:', appearanceError);\n        // Continue with other settings despite appearance error\n      }\n    }\n\n    // Apply accessibility settings if changed\n    if (hasAccessibilityChanged) {\n      try {\n        const highContrast = safeGet(settings, 'accessibility.highContrast', false);\n        const reducedMotion = safeGet(settings, 'accessibility.reducedMotion', false);\n        const largerClickTargets = safeGet(settings, 'accessibility.largerClickTargets', false);\n        const textScaling = safeGet(settings, 'accessibility.textScaling', 100);\n        const screenReaderOptimized = safeGet(settings, 'accessibility.screenReaderOptimized', false);\n\n        // Apply high contrast\n        if (highContrast) {\n          document.documentElement.classList.add('high-contrast');\n        } else {\n          document.documentElement.classList.remove('high-contrast');\n        }\n\n        // Apply reduced motion\n        if (reducedMotion) {\n          document.documentElement.classList.add('reduced-motion');\n        } else {\n          document.documentElement.classList.remove('reduced-motion');\n        }\n\n        // Apply larger click targets\n        if (largerClickTargets) {\n          document.documentElement.classList.add('larger-targets');\n        } else {\n          document.documentElement.classList.remove('larger-targets');\n        }\n\n        // Apply text scaling\n        if (textScaling && textScaling !== 100) {\n          document.documentElement.style.setProperty('--text-scale-ratio', `${textScaling / 100}`);\n          document.documentElement.classList.add('custom-text-scaling');\n        } else {\n          document.documentElement.classList.remove('custom-text-scaling');\n          document.documentElement.style.removeProperty('--text-scale-ratio');\n        }\n\n        // Apply screen reader optimizations\n        if (screenReaderOptimized) {\n          document.documentElement.setAttribute('data-screen-reader-optimized', 'true');\n        } else {\n          document.documentElement.removeAttribute('data-screen-reader-optimized');\n        }\n\n        // Update current state (deep copy to prevent reference issues)\n        currentState.accessibility = JSON.parse(JSON.stringify(settings.accessibility));\n      } catch (accessibilityError) {\n        console.error('Error applying accessibility settings:', accessibilityError);\n        // Continue with other settings despite accessibility error\n      }\n    }\n\n    // Apply language settings if changed\n    if (hasLanguageChanged) {\n      try {\n        const languageCode = language.split('-')[0];\n        document.documentElement.setAttribute('lang', languageCode);\n        currentState.language = language;\n      } catch (languageError) {\n        console.error('Error applying language settings:', languageError);\n      }\n    }\n    return true;\n  } catch (error) {\n    console.error('Error applying settings:', error);\n    return false;\n  } finally {\n    // Always release lock regardless of errors\n    operationInProgress = false;\n\n    // Process any pending operation\n    if (pendingOperation) {\n      const nextOperation = pendingOperation;\n      pendingOperation = null;\n      setTimeout(() => applySettings(nextOperation), 0);\n    }\n  }\n};\n\n/**\r\n * Initialize settings manager\r\n */\nconst initialize = () => {\n  try {\n    // Load the CSS file for dark mode and accessibility if not already loaded\n    if (!document.getElementById('accessibility-darkmode-css')) {\n      const link = document.createElement('link');\n      link.id = 'accessibility-darkmode-css';\n      link.rel = 'stylesheet';\n      link.href = '/accessibility-darkmode.css';\n      document.head.appendChild(link);\n    }\n  } catch (error) {\n    console.error('Error initializing settings manager:', error);\n  }\n};\n\n// Initialize on import\ninitialize();\n\n// Export the manager\nconst settingsManager = {\n  applySettings,\n  initialize\n};\nexport default settingsManager;","map":{"version":3,"names":["currentState","appearance","accessibility","language","operationInProgress","pendingOperation","isEqual","a","b","Array","isArray","length","every","val","i","keysA","Object","keys","keysB","key","includes","safeGet","obj","path","defaultValue","_result","split","result","undefined","applySettings","settings","console","error","hasAppearanceChanged","hasAccessibilityChanged","hasLanguageChanged","fontSize","colorScheme","darkMode","document","documentElement","classList","remove","add","colorSchemeClasses","body","style","setProperty","setAttribute","JSON","parse","stringify","appearanceError","highContrast","reducedMotion","largerClickTargets","textScaling","screenReaderOptimized","removeProperty","removeAttribute","accessibilityError","languageCode","languageError","nextOperation","setTimeout","initialize","getElementById","link","createElement","id","rel","href","head","appendChild","settingsManager"],"sources":["C:/Users/juliu/Desktop/web/src/utils/settingsManager.js"],"sourcesContent":["/**\r\n * Streamlined Settings Manager - A singleton to manage theme settings\r\n * With improved error handling and safety checks\r\n */\r\n\r\n// Single source of truth for current settings state\r\nconst currentState = {\r\n    appearance: null,\r\n    accessibility: null,\r\n    language: null\r\n  };\r\n  \r\n  // Single active operation flag\r\n  let operationInProgress = false;\r\n  let pendingOperation = null;\r\n  \r\n  /**\r\n   * Enhanced deep equality check for objects and arrays\r\n   */\r\n  const isEqual = (a, b) => {\r\n    // Handle identical references and primitive cases\r\n    if (a === b) return true;\r\n    \r\n    // Handle nulls and undefined\r\n    if (a == null || b == null) return a === b;\r\n    \r\n    // Handle different types\r\n    if (typeof a !== typeof b) return false;\r\n    \r\n    // Handle primitive types\r\n    if (typeof a !== 'object') return a === b;\r\n    \r\n    // Handle arrays\r\n    if (Array.isArray(a) && Array.isArray(b)) {\r\n      if (a.length !== b.length) return false;\r\n      return a.every((val, i) => isEqual(val, b[i]));\r\n    }\r\n    \r\n    // If one is array and other is not\r\n    if (Array.isArray(a) !== Array.isArray(b)) return false;\r\n    \r\n    // Handle regular objects\r\n    const keysA = Object.keys(a);\r\n    const keysB = Object.keys(b);\r\n    \r\n    if (keysA.length !== keysB.length) return false;\r\n    \r\n    return keysA.every(key => \r\n      keysB.includes(key) && isEqual(a[key], b[key])\r\n    );\r\n  };\r\n  \r\n  /**\r\n   * Safely get a property or return a default value\r\n   */\r\n  const safeGet = (obj, path, defaultValue = null) => {\r\n    if (obj == null) return defaultValue;\r\n    \r\n    const keys = path.split('.');\r\n    let result = obj;\r\n    \r\n    for (const key of keys) {\r\n      if (result == null || result[key] === undefined) {\r\n        return defaultValue;\r\n      }\r\n      result = result[key];\r\n    }\r\n    \r\n    return result ?? defaultValue;\r\n  };\r\n  \r\n  /**\r\n   * Apply settings using a single operation approach with enhanced safety\r\n   */\r\n  const applySettings = (settings) => {\r\n    // Guard against invalid settings\r\n    if (!settings || typeof settings !== 'object') {\r\n      console.error('Invalid settings object provided');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      // Check if settings have actually changed\r\n      const hasAppearanceChanged = \r\n        settings.appearance && !isEqual(currentState.appearance, settings.appearance);\r\n      \r\n      const hasAccessibilityChanged = \r\n        settings.accessibility && !isEqual(currentState.accessibility, settings.accessibility);\r\n      \r\n      const language = safeGet(settings, 'preferences.language');\r\n      const hasLanguageChanged = \r\n        language && currentState.language !== language;\r\n      \r\n      // Skip if nothing has changed\r\n      if (!hasAppearanceChanged && !hasAccessibilityChanged && !hasLanguageChanged) {\r\n        return true;\r\n      }\r\n      \r\n      // If operation in progress, queue this one and exit\r\n      if (operationInProgress) {\r\n        pendingOperation = { ...settings };\r\n        return true;\r\n      }\r\n      \r\n      // Lock operations\r\n      operationInProgress = true;\r\n      \r\n      // Apply appearance settings if changed\r\n      if (hasAppearanceChanged) {\r\n        const fontSize = safeGet(settings, 'appearance.fontSize', 'medium');\r\n        const colorScheme = safeGet(settings, 'appearance.colorScheme', 'blue');\r\n        const darkMode = safeGet(settings, 'appearance.darkMode', false);\r\n        \r\n        try {\r\n          // Apply font size\r\n          document.documentElement.classList.remove('text-sm', 'text-base', 'text-lg');\r\n          if (fontSize === 'small') {\r\n            document.documentElement.classList.add('text-sm');\r\n          } else if (fontSize === 'medium') {\r\n            document.documentElement.classList.add('text-base');\r\n          } else if (fontSize === 'large') {\r\n            document.documentElement.classList.add('text-lg');\r\n          }\r\n          \r\n          // Apply color scheme\r\n          const colorSchemeClasses = [\r\n            'theme-blue', 'theme-purple', 'theme-green', \r\n            'theme-red', 'theme-amber', 'theme-indigo'\r\n          ];\r\n          document.documentElement.classList.remove(...colorSchemeClasses);\r\n          document.documentElement.classList.add(`theme-${colorScheme}`);\r\n          \r\n          // Apply dark mode\r\n          if (darkMode) {\r\n            document.documentElement.classList.add('dark-mode');\r\n            document.body.classList.add('dark-mode');\r\n          } else {\r\n            document.documentElement.classList.remove('dark-mode');\r\n            document.body.classList.remove('dark-mode');\r\n          }\r\n          \r\n          // Set theme property\r\n          document.documentElement.style.setProperty('--current-theme', colorScheme);\r\n          document.documentElement.setAttribute('data-theme', darkMode ? 'dark' : 'light');\r\n          \r\n          // Update current state (deep copy to prevent reference issues)\r\n          currentState.appearance = JSON.parse(JSON.stringify(settings.appearance));\r\n        } catch (appearanceError) {\r\n          console.error('Error applying appearance settings:', appearanceError);\r\n          // Continue with other settings despite appearance error\r\n        }\r\n      }\r\n      \r\n      // Apply accessibility settings if changed\r\n      if (hasAccessibilityChanged) {\r\n        try {\r\n          const highContrast = safeGet(settings, 'accessibility.highContrast', false);\r\n          const reducedMotion = safeGet(settings, 'accessibility.reducedMotion', false);\r\n          const largerClickTargets = safeGet(settings, 'accessibility.largerClickTargets', false);\r\n          const textScaling = safeGet(settings, 'accessibility.textScaling', 100);\r\n          const screenReaderOptimized = safeGet(settings, 'accessibility.screenReaderOptimized', false);\r\n          \r\n          // Apply high contrast\r\n          if (highContrast) {\r\n            document.documentElement.classList.add('high-contrast');\r\n          } else {\r\n            document.documentElement.classList.remove('high-contrast');\r\n          }\r\n          \r\n          // Apply reduced motion\r\n          if (reducedMotion) {\r\n            document.documentElement.classList.add('reduced-motion');\r\n          } else {\r\n            document.documentElement.classList.remove('reduced-motion');\r\n          }\r\n          \r\n          // Apply larger click targets\r\n          if (largerClickTargets) {\r\n            document.documentElement.classList.add('larger-targets');\r\n          } else {\r\n            document.documentElement.classList.remove('larger-targets');\r\n          }\r\n          \r\n          // Apply text scaling\r\n          if (textScaling && textScaling !== 100) {\r\n            document.documentElement.style.setProperty('--text-scale-ratio', `${textScaling / 100}`);\r\n            document.documentElement.classList.add('custom-text-scaling');\r\n          } else {\r\n            document.documentElement.classList.remove('custom-text-scaling');\r\n            document.documentElement.style.removeProperty('--text-scale-ratio');\r\n          }\r\n          \r\n          // Apply screen reader optimizations\r\n          if (screenReaderOptimized) {\r\n            document.documentElement.setAttribute('data-screen-reader-optimized', 'true');\r\n          } else {\r\n            document.documentElement.removeAttribute('data-screen-reader-optimized');\r\n          }\r\n          \r\n          // Update current state (deep copy to prevent reference issues)\r\n          currentState.accessibility = JSON.parse(JSON.stringify(settings.accessibility));\r\n        } catch (accessibilityError) {\r\n          console.error('Error applying accessibility settings:', accessibilityError);\r\n          // Continue with other settings despite accessibility error\r\n        }\r\n      }\r\n      \r\n      // Apply language settings if changed\r\n      if (hasLanguageChanged) {\r\n        try {\r\n          const languageCode = language.split('-')[0];\r\n          document.documentElement.setAttribute('lang', languageCode);\r\n          currentState.language = language;\r\n        } catch (languageError) {\r\n          console.error('Error applying language settings:', languageError);\r\n        }\r\n      }\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error applying settings:', error);\r\n      return false;\r\n    } finally {\r\n      // Always release lock regardless of errors\r\n      operationInProgress = false;\r\n      \r\n      // Process any pending operation\r\n      if (pendingOperation) {\r\n        const nextOperation = pendingOperation;\r\n        pendingOperation = null;\r\n        setTimeout(() => applySettings(nextOperation), 0);\r\n      }\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Initialize settings manager\r\n   */\r\n  const initialize = () => {\r\n    try {\r\n      // Load the CSS file for dark mode and accessibility if not already loaded\r\n      if (!document.getElementById('accessibility-darkmode-css')) {\r\n        const link = document.createElement('link');\r\n        link.id = 'accessibility-darkmode-css';\r\n        link.rel = 'stylesheet';\r\n        link.href = '/accessibility-darkmode.css';\r\n        document.head.appendChild(link);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error initializing settings manager:', error);\r\n    }\r\n  };\r\n  \r\n  // Initialize on import\r\n  initialize();\r\n  \r\n  // Export the manager\r\n  const settingsManager = {\r\n    applySettings,\r\n    initialize\r\n  };\r\n  \r\n  export default settingsManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}