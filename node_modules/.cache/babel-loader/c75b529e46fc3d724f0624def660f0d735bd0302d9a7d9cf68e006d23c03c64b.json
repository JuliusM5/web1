{"ast":null,"code":"import skyscannerService from './skyscannerService';\n\n/**\r\n * Service for detecting flight deals based on historical price data and market analysis\r\n */\nclass DealDetectionService {\n  constructor() {\n    this.priceDb = new Map(); // In-memory storage for price history\n    this.dealThresholds = {\n      minDiscount: 20,\n      // Minimum % below average to be considered a deal\n      significantDiscount: 30,\n      // % below average to be considered a significant deal\n      lastMinuteThreshold: 7,\n      // Days before departure to be considered last-minute\n      lastMinuteDiscount: 40,\n      // % below average for last-minute deals\n      priceHistoryMinEntries: 3 // Minimum number of price points to establish a baseline\n    };\n\n    // Try to load price history from localStorage\n    this.loadPriceHistory();\n  }\n\n  /**\r\n   * Load price history from localStorage\r\n   */\n  loadPriceHistory() {\n    try {\n      const savedHistory = localStorage.getItem('flight_price_history');\n      if (savedHistory) {\n        const parsedHistory = JSON.parse(savedHistory);\n\n        // Convert back to Map\n        Object.entries(parsedHistory).forEach(([route, history]) => {\n          this.priceDb.set(route, history);\n        });\n        console.log(`Loaded price history for ${this.priceDb.size} routes`);\n      }\n    } catch (error) {\n      console.error('Error loading price history:', error);\n    }\n  }\n\n  /**\r\n   * Save price history to localStorage\r\n   */\n  savePriceHistory() {\n    try {\n      // Convert Map to object for storage\n      const historyObj = {};\n      this.priceDb.forEach((history, route) => {\n        historyObj[route] = history;\n      });\n      localStorage.setItem('flight_price_history', JSON.stringify(historyObj));\n    } catch (error) {\n      console.error('Error saving price history:', error);\n    }\n  }\n\n  /**\r\n   * Add a price point to the history\r\n   */\n  recordPrice(origin, destination, price, date = new Date().toISOString()) {\n    const routeKey = `${origin}-${destination}`;\n\n    // Get existing history or create new\n    const history = this.priceDb.get(routeKey) || {\n      prices: [],\n      min: Infinity,\n      max: 0,\n      sum: 0,\n      count: 0\n    };\n\n    // Add new price point\n    history.prices.push({\n      price,\n      date\n    });\n\n    // Update statistics\n    history.min = Math.min(history.min, price);\n    history.max = Math.max(history.max, price);\n    history.sum += price;\n    history.count += 1;\n\n    // Keep only the last 90 days of data\n    const ninetyDaysAgo = new Date();\n    ninetyDaysAgo.setDate(ninetyDaysAgo.getDate() - 90);\n    history.prices = history.prices.filter(entry => {\n      return new Date(entry.date) >= ninetyDaysAgo;\n    });\n\n    // Recalculate stats if we removed old entries\n    if (history.prices.length < history.count) {\n      history.min = Math.min(...history.prices.map(p => p.price));\n      history.max = Math.max(...history.prices.map(p => p.price));\n      history.sum = history.prices.reduce((sum, entry) => sum + entry.price, 0);\n      history.count = history.prices.length;\n    }\n\n    // Save updated history\n    this.priceDb.set(routeKey, history);\n    this.savePriceHistory();\n    return history;\n  }\n\n  /**\r\n   * Check if a price is considered a deal\r\n   */\n  isDeal(origin, destination, price, departureDate) {\n    const routeKey = `${origin}-${destination}`;\n    const history = this.priceDb.get(routeKey);\n\n    // If we don't have enough history, can't determine if it's a deal\n    if (!history || history.count < this.dealThresholds.priceHistoryMinEntries) {\n      return {\n        isDeal: false,\n        reason: 'insufficient_history',\n        confidence: 0\n      };\n    }\n\n    // Calculate average price\n    const avgPrice = history.sum / history.count;\n\n    // Calculate discount percentage\n    const discountPercent = (avgPrice - price) / avgPrice * 100;\n\n    // Check if it's a last-minute deal\n    const today = new Date();\n    const departure = new Date(departureDate);\n    const daysUntilDeparture = Math.ceil((departure - today) / (1000 * 60 * 60 * 24));\n    const isLastMinute = daysUntilDeparture <= this.dealThresholds.lastMinuteThreshold;\n\n    // For last-minute deals, apply a different threshold\n    const thresholdToUse = isLastMinute ? this.dealThresholds.lastMinuteDiscount : this.dealThresholds.minDiscount;\n\n    // Check if discount exceeds threshold\n    if (discountPercent >= thresholdToUse) {\n      return {\n        isDeal: true,\n        reason: isLastMinute ? 'last_minute_deal' : 'price_drop',\n        discountPercent,\n        avgPrice,\n        lastMinute: isLastMinute,\n        daysUntilDeparture,\n        // Calculate confidence based on how much data we have and how significant the discount is\n        confidence: Math.min(0.5 + history.count / 20 * 0.25 + discountPercent / 100 * 0.25, 0.99)\n      };\n    }\n\n    // Not a deal\n    return {\n      isDeal: false,\n      reason: 'price_not_low_enough',\n      discountPercent,\n      avgPrice,\n      confidence: 0\n    };\n  }\n\n  /**\r\n   * Find deals for a specific route\r\n   */\n  async findDealsForRoute(origin, destination, dateRange = {}) {\n    try {\n      // Default date range if not provided\n      const defaultDepartureDate = new Date();\n      defaultDepartureDate.setDate(defaultDepartureDate.getDate() + 14);\n      const departureDate = dateRange.departure || defaultDepartureDate.toISOString().split('T')[0];\n\n      // Search flights for this route\n      const results = await skyscannerService.searchOneWayFlights(origin, destination, origin,\n      // Using IATA code as ID for simplicity\n      destination);\n      if (!results || !results.itineraries || !results.itineraries.results || results.itineraries.results.length === 0) {\n        return [];\n      }\n      const deals = [];\n\n      // Process each itinerary to find deals\n      for (const itinerary of results.itineraries.results) {\n        if (!itinerary.pricingOptions || itinerary.pricingOptions.length === 0) continue;\n\n        // Find the cheapest price option\n        const cheapestOption = itinerary.pricingOptions.reduce((min, option) => option.price.amount < min.price.amount ? option : min, itinerary.pricingOptions[0]);\n        const price = cheapestOption.price.amount;\n\n        // Record this price in our history\n        this.recordPrice(origin, destination, price);\n\n        // Check if this is a deal\n        const dealStatus = this.isDeal(origin, destination, price, departureDate);\n        if (dealStatus.isDeal) {\n          // Get leg details\n          const leg = results.legs.find(leg => leg.id === itinerary.legIds[0]);\n          if (!leg) continue;\n\n          // Get destination details from places\n          const destinationPlace = results.places.find(place => place.entityId === leg.destinationPlaceId);\n          if (!destinationPlace) continue;\n\n          // Create deal object\n          deals.push({\n            id: `deal-${origin}-${destination}-${Date.now()}`,\n            origin,\n            destination,\n            destinationName: destinationPlace.name,\n            price,\n            currency: cheapestOption.price.unit || 'EUR',\n            departureDate,\n            returnDate: null,\n            // One-way flight\n            discountPercent: Math.round(dealStatus.discountPercent),\n            averagePrice: Math.round(dealStatus.avgPrice),\n            savings: Math.round(dealStatus.avgPrice - price),\n            deepLink: cheapestOption.deepLink || '',\n            lastMinute: dealStatus.lastMinute,\n            expiryTime: this.calculateDealExpiry(dealStatus),\n            confidence: dealStatus.confidence\n          });\n        }\n      }\n      return deals;\n    } catch (error) {\n      console.error(`Error finding deals for ${origin} to ${destination}:`, error);\n      return [];\n    }\n  }\n\n  /**\r\n   * Calculate when a deal expires (better deals last longer)\r\n   */\n  calculateDealExpiry(dealStatus) {\n    const now = new Date();\n    let hoursToAdd = 24; // Default 24 hours\n\n    // Better deals last longer\n    if (dealStatus.discountPercent >= 40) {\n      hoursToAdd = 72; // 3 days\n    } else if (dealStatus.discountPercent >= 30) {\n      hoursToAdd = 48; // 2 days\n    }\n\n    // Last minute deals expire quicker\n    if (dealStatus.lastMinute) {\n      hoursToAdd = Math.min(hoursToAdd, 36);\n    }\n    const expiry = new Date(now.getTime() + hoursToAdd * 60 * 60 * 1000);\n    return expiry.toISOString();\n  }\n\n  /**\r\n   * Find deals from a specific origin to anywhere\r\n   */\n  async findDealsFromOrigin(origin, limit = 10) {\n    try {\n      // Get cheap flights from this origin to anywhere\n      const flights = await skyscannerService.getCheapFlights(origin);\n      if (!flights || flights.length === 0) {\n        return [];\n      }\n      const deals = [];\n\n      // Process each flight to find deals\n      for (const flight of flights) {\n        if (!flight.price) continue;\n\n        // Record this price in our history\n        this.recordPrice(origin, flight.to, flight.price);\n\n        // Check if this is a deal\n        const dealStatus = this.isDeal(origin, flight.to, flight.price, flight.departure);\n        if (dealStatus.isDeal) {\n          // Create deal object\n          deals.push({\n            id: `deal-${origin}-${flight.to}-${Date.now()}`,\n            origin,\n            destination: flight.to,\n            destinationName: flight.destinationName,\n            price: flight.price,\n            currency: flight.currency || 'EUR',\n            departureDate: flight.departure,\n            returnDate: flight.return || null,\n            discountPercent: Math.round(dealStatus.discountPercent),\n            averagePrice: Math.round(dealStatus.avgPrice),\n            savings: Math.round(dealStatus.avgPrice - flight.price),\n            deepLink: flight.deep_link || '',\n            lastMinute: dealStatus.lastMinute,\n            expiryTime: this.calculateDealExpiry(dealStatus),\n            confidence: dealStatus.confidence,\n            airline: flight.airline,\n            duration: flight.duration\n          });\n        }\n      }\n\n      // Sort by discount percentage and limit results\n      return deals.sort((a, b) => b.discountPercent - a.discountPercent).slice(0, limit);\n    } catch (error) {\n      console.error(`Error finding deals from ${origin}:`, error);\n      return [];\n    }\n  }\n}\nexport default new DealDetectionService();","map":{"version":3,"names":["skyscannerService","DealDetectionService","constructor","priceDb","Map","dealThresholds","minDiscount","significantDiscount","lastMinuteThreshold","lastMinuteDiscount","priceHistoryMinEntries","loadPriceHistory","savedHistory","localStorage","getItem","parsedHistory","JSON","parse","Object","entries","forEach","route","history","set","console","log","size","error","savePriceHistory","historyObj","setItem","stringify","recordPrice","origin","destination","price","date","Date","toISOString","routeKey","get","prices","min","Infinity","max","sum","count","push","Math","ninetyDaysAgo","setDate","getDate","filter","entry","length","map","p","reduce","isDeal","departureDate","reason","confidence","avgPrice","discountPercent","today","departure","daysUntilDeparture","ceil","isLastMinute","thresholdToUse","lastMinute","findDealsForRoute","dateRange","defaultDepartureDate","split","results","searchOneWayFlights","itineraries","deals","itinerary","pricingOptions","cheapestOption","option","amount","dealStatus","leg","legs","find","id","legIds","destinationPlace","places","place","entityId","destinationPlaceId","now","destinationName","name","currency","unit","returnDate","round","averagePrice","savings","deepLink","expiryTime","calculateDealExpiry","hoursToAdd","expiry","getTime","findDealsFromOrigin","limit","flights","getCheapFlights","flight","to","return","deep_link","airline","duration","sort","a","b","slice"],"sources":["C:/Users/juliu/Desktop/web/src/services/dealDetectionService.js"],"sourcesContent":["\r\nimport skyscannerService from './skyscannerService';\r\n\r\n/**\r\n * Service for detecting flight deals based on historical price data and market analysis\r\n */\r\nclass DealDetectionService {\r\n  constructor() {\r\n    this.priceDb = new Map(); // In-memory storage for price history\r\n    this.dealThresholds = {\r\n      minDiscount: 20,           // Minimum % below average to be considered a deal\r\n      significantDiscount: 30,   // % below average to be considered a significant deal\r\n      lastMinuteThreshold: 7,    // Days before departure to be considered last-minute\r\n      lastMinuteDiscount: 40,    // % below average for last-minute deals\r\n      priceHistoryMinEntries: 3  // Minimum number of price points to establish a baseline\r\n    };\r\n    \r\n    // Try to load price history from localStorage\r\n    this.loadPriceHistory();\r\n  }\r\n  \r\n  /**\r\n   * Load price history from localStorage\r\n   */\r\n  loadPriceHistory() {\r\n    try {\r\n      const savedHistory = localStorage.getItem('flight_price_history');\r\n      if (savedHistory) {\r\n        const parsedHistory = JSON.parse(savedHistory);\r\n        \r\n        // Convert back to Map\r\n        Object.entries(parsedHistory).forEach(([route, history]) => {\r\n          this.priceDb.set(route, history);\r\n        });\r\n        \r\n        console.log(`Loaded price history for ${this.priceDb.size} routes`);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading price history:', error);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Save price history to localStorage\r\n   */\r\n  savePriceHistory() {\r\n    try {\r\n      // Convert Map to object for storage\r\n      const historyObj = {};\r\n      this.priceDb.forEach((history, route) => {\r\n        historyObj[route] = history;\r\n      });\r\n      \r\n      localStorage.setItem('flight_price_history', JSON.stringify(historyObj));\r\n    } catch (error) {\r\n      console.error('Error saving price history:', error);\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Add a price point to the history\r\n   */\r\n  recordPrice(origin, destination, price, date = new Date().toISOString()) {\r\n    const routeKey = `${origin}-${destination}`;\r\n    \r\n    // Get existing history or create new\r\n    const history = this.priceDb.get(routeKey) || {\r\n      prices: [],\r\n      min: Infinity,\r\n      max: 0,\r\n      sum: 0,\r\n      count: 0\r\n    };\r\n    \r\n    // Add new price point\r\n    history.prices.push({\r\n      price,\r\n      date\r\n    });\r\n    \r\n    // Update statistics\r\n    history.min = Math.min(history.min, price);\r\n    history.max = Math.max(history.max, price);\r\n    history.sum += price;\r\n    history.count += 1;\r\n    \r\n    // Keep only the last 90 days of data\r\n    const ninetyDaysAgo = new Date();\r\n    ninetyDaysAgo.setDate(ninetyDaysAgo.getDate() - 90);\r\n    \r\n    history.prices = history.prices.filter(entry => {\r\n      return new Date(entry.date) >= ninetyDaysAgo;\r\n    });\r\n    \r\n    // Recalculate stats if we removed old entries\r\n    if (history.prices.length < history.count) {\r\n      history.min = Math.min(...history.prices.map(p => p.price));\r\n      history.max = Math.max(...history.prices.map(p => p.price));\r\n      history.sum = history.prices.reduce((sum, entry) => sum + entry.price, 0);\r\n      history.count = history.prices.length;\r\n    }\r\n    \r\n    // Save updated history\r\n    this.priceDb.set(routeKey, history);\r\n    this.savePriceHistory();\r\n    \r\n    return history;\r\n  }\r\n  \r\n  /**\r\n   * Check if a price is considered a deal\r\n   */\r\n  isDeal(origin, destination, price, departureDate) {\r\n    const routeKey = `${origin}-${destination}`;\r\n    const history = this.priceDb.get(routeKey);\r\n    \r\n    // If we don't have enough history, can't determine if it's a deal\r\n    if (!history || history.count < this.dealThresholds.priceHistoryMinEntries) {\r\n      return {\r\n        isDeal: false,\r\n        reason: 'insufficient_history',\r\n        confidence: 0\r\n      };\r\n    }\r\n    \r\n    // Calculate average price\r\n    const avgPrice = history.sum / history.count;\r\n    \r\n    // Calculate discount percentage\r\n    const discountPercent = ((avgPrice - price) / avgPrice) * 100;\r\n    \r\n    // Check if it's a last-minute deal\r\n    const today = new Date();\r\n    const departure = new Date(departureDate);\r\n    const daysUntilDeparture = Math.ceil((departure - today) / (1000 * 60 * 60 * 24));\r\n    const isLastMinute = daysUntilDeparture <= this.dealThresholds.lastMinuteThreshold;\r\n    \r\n    // For last-minute deals, apply a different threshold\r\n    const thresholdToUse = isLastMinute ? \r\n      this.dealThresholds.lastMinuteDiscount : \r\n      this.dealThresholds.minDiscount;\r\n    \r\n    // Check if discount exceeds threshold\r\n    if (discountPercent >= thresholdToUse) {\r\n      return {\r\n        isDeal: true,\r\n        reason: isLastMinute ? 'last_minute_deal' : 'price_drop',\r\n        discountPercent,\r\n        avgPrice,\r\n        lastMinute: isLastMinute,\r\n        daysUntilDeparture,\r\n        // Calculate confidence based on how much data we have and how significant the discount is\r\n        confidence: Math.min(\r\n          0.5 + (history.count / 20) * 0.25 + (discountPercent / 100) * 0.25, \r\n          0.99\r\n        )\r\n      };\r\n    }\r\n    \r\n    // Not a deal\r\n    return {\r\n      isDeal: false,\r\n      reason: 'price_not_low_enough',\r\n      discountPercent,\r\n      avgPrice,\r\n      confidence: 0\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Find deals for a specific route\r\n   */\r\n  async findDealsForRoute(origin, destination, dateRange = {}) {\r\n    try {\r\n      // Default date range if not provided\r\n      const defaultDepartureDate = new Date();\r\n      defaultDepartureDate.setDate(defaultDepartureDate.getDate() + 14);\r\n      \r\n      const departureDate = dateRange.departure || defaultDepartureDate.toISOString().split('T')[0];\r\n      \r\n      // Search flights for this route\r\n      const results = await skyscannerService.searchOneWayFlights(\r\n        origin, \r\n        destination,\r\n        origin,  // Using IATA code as ID for simplicity\r\n        destination\r\n      );\r\n      \r\n      if (!results || !results.itineraries || !results.itineraries.results || results.itineraries.results.length === 0) {\r\n        return [];\r\n      }\r\n      \r\n      const deals = [];\r\n      \r\n      // Process each itinerary to find deals\r\n      for (const itinerary of results.itineraries.results) {\r\n        if (!itinerary.pricingOptions || itinerary.pricingOptions.length === 0) continue;\r\n        \r\n        // Find the cheapest price option\r\n        const cheapestOption = itinerary.pricingOptions.reduce(\r\n          (min, option) => option.price.amount < min.price.amount ? option : min,\r\n          itinerary.pricingOptions[0]\r\n        );\r\n        \r\n        const price = cheapestOption.price.amount;\r\n        \r\n        // Record this price in our history\r\n        this.recordPrice(origin, destination, price);\r\n        \r\n        // Check if this is a deal\r\n        const dealStatus = this.isDeal(origin, destination, price, departureDate);\r\n        \r\n        if (dealStatus.isDeal) {\r\n          // Get leg details\r\n          const leg = results.legs.find(leg => leg.id === itinerary.legIds[0]);\r\n          if (!leg) continue;\r\n          \r\n          // Get destination details from places\r\n          const destinationPlace = results.places.find(place => place.entityId === leg.destinationPlaceId);\r\n          if (!destinationPlace) continue;\r\n          \r\n          // Create deal object\r\n          deals.push({\r\n            id: `deal-${origin}-${destination}-${Date.now()}`,\r\n            origin,\r\n            destination,\r\n            destinationName: destinationPlace.name,\r\n            price,\r\n            currency: cheapestOption.price.unit || 'EUR',\r\n            departureDate,\r\n            returnDate: null,  // One-way flight\r\n            discountPercent: Math.round(dealStatus.discountPercent),\r\n            averagePrice: Math.round(dealStatus.avgPrice),\r\n            savings: Math.round(dealStatus.avgPrice - price),\r\n            deepLink: cheapestOption.deepLink || '',\r\n            lastMinute: dealStatus.lastMinute,\r\n            expiryTime: this.calculateDealExpiry(dealStatus),\r\n            confidence: dealStatus.confidence\r\n          });\r\n        }\r\n      }\r\n      \r\n      return deals;\r\n    } catch (error) {\r\n      console.error(`Error finding deals for ${origin} to ${destination}:`, error);\r\n      return [];\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Calculate when a deal expires (better deals last longer)\r\n   */\r\n  calculateDealExpiry(dealStatus) {\r\n    const now = new Date();\r\n    let hoursToAdd = 24; // Default 24 hours\r\n    \r\n    // Better deals last longer\r\n    if (dealStatus.discountPercent >= 40) {\r\n      hoursToAdd = 72; // 3 days\r\n    } else if (dealStatus.discountPercent >= 30) {\r\n      hoursToAdd = 48; // 2 days\r\n    }\r\n    \r\n    // Last minute deals expire quicker\r\n    if (dealStatus.lastMinute) {\r\n      hoursToAdd = Math.min(hoursToAdd, 36);\r\n    }\r\n    \r\n    const expiry = new Date(now.getTime() + hoursToAdd * 60 * 60 * 1000);\r\n    return expiry.toISOString();\r\n  }\r\n  \r\n  /**\r\n   * Find deals from a specific origin to anywhere\r\n   */\r\n  async findDealsFromOrigin(origin, limit = 10) {\r\n    try {\r\n      // Get cheap flights from this origin to anywhere\r\n      const flights = await skyscannerService.getCheapFlights(origin);\r\n      \r\n      if (!flights || flights.length === 0) {\r\n        return [];\r\n      }\r\n      \r\n      const deals = [];\r\n      \r\n      // Process each flight to find deals\r\n      for (const flight of flights) {\r\n        if (!flight.price) continue;\r\n        \r\n        // Record this price in our history\r\n        this.recordPrice(origin, flight.to, flight.price);\r\n        \r\n        // Check if this is a deal\r\n        const dealStatus = this.isDeal(origin, flight.to, flight.price, flight.departure);\r\n        \r\n        if (dealStatus.isDeal) {\r\n          // Create deal object\r\n          deals.push({\r\n            id: `deal-${origin}-${flight.to}-${Date.now()}`,\r\n            origin,\r\n            destination: flight.to,\r\n            destinationName: flight.destinationName,\r\n            price: flight.price,\r\n            currency: flight.currency || 'EUR',\r\n            departureDate: flight.departure,\r\n            returnDate: flight.return || null,\r\n            discountPercent: Math.round(dealStatus.discountPercent),\r\n            averagePrice: Math.round(dealStatus.avgPrice),\r\n            savings: Math.round(dealStatus.avgPrice - flight.price),\r\n            deepLink: flight.deep_link || '',\r\n            lastMinute: dealStatus.lastMinute,\r\n            expiryTime: this.calculateDealExpiry(dealStatus),\r\n            confidence: dealStatus.confidence,\r\n            airline: flight.airline,\r\n            duration: flight.duration\r\n          });\r\n        }\r\n      }\r\n      \r\n      // Sort by discount percentage and limit results\r\n      return deals\r\n        .sort((a, b) => b.discountPercent - a.discountPercent)\r\n        .slice(0, limit);\r\n    } catch (error) {\r\n      console.error(`Error finding deals from ${origin}:`, error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\nexport default new DealDetectionService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}