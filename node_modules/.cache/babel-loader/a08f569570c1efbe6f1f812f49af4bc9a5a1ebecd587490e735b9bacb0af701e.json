{"ast":null,"code":"/**\r\n * Utility functions for packing list recommendations and management\r\n */\n\n/**\r\n * Generate packing recommendations based on destination, trip duration, and weather\r\n * \r\n * @param {string} destination - The trip destination\r\n * @param {number} duration - Trip duration in days\r\n * @param {Object} weatherData - Weather forecast data\r\n * @param {string} tripType - Type of trip (leisure, business, adventure, etc.)\r\n * @returns {Array} Array of packing categories with recommended items\r\n */\nexport function getPackingRecommendations(destination, duration, weatherData, tripType = 'leisure') {\n  // Base items everyone needs regardless of destination\n  const baseRecommendations = [{\n    id: 'essentials',\n    name: 'Essentials',\n    icon: '⭐',\n    items: [{\n      name: 'Passport/ID',\n      essential: true\n    }, {\n      name: 'Wallet',\n      essential: true\n    }, {\n      name: 'Phone',\n      essential: true\n    }, {\n      name: 'Phone charger',\n      essential: true\n    }, {\n      name: 'Travel insurance documents',\n      essential: true\n    }, {\n      name: 'Cash/credit cards',\n      essential: true\n    }, {\n      name: 'House keys',\n      essential: true\n    }]\n  }, {\n    id: 'clothing',\n    name: 'Clothing',\n    icon: '👕',\n    items: [{\n      name: 'Underwear',\n      essential: true,\n      quantity: duration\n    }, {\n      name: 'Socks',\n      essential: true,\n      quantity: duration\n    }, {\n      name: 'T-shirts',\n      essential: true,\n      quantity: Math.ceil(duration / 2)\n    }, {\n      name: 'Pants/shorts',\n      essential: true,\n      quantity: Math.ceil(duration / 3)\n    }, {\n      name: 'Sleepwear',\n      essential: false\n    }, {\n      name: 'Belt',\n      essential: false\n    }]\n  }, {\n    id: 'toiletries',\n    name: 'Toiletries',\n    icon: '🧴',\n    items: [{\n      name: 'Toothbrush',\n      essential: true\n    }, {\n      name: 'Toothpaste',\n      essential: true\n    }, {\n      name: 'Deodorant',\n      essential: true\n    }, {\n      name: 'Shampoo',\n      essential: false\n    }, {\n      name: 'Soap/shower gel',\n      essential: false\n    }, {\n      name: 'Razor',\n      essential: false\n    }, {\n      name: 'Hairbrush/comb',\n      essential: false\n    }]\n  }, {\n    id: 'electronics',\n    name: 'Electronics',\n    icon: '📱',\n    items: [{\n      name: 'Camera',\n      essential: false\n    }, {\n      name: 'Headphones',\n      essential: false\n    }, {\n      name: 'Travel adapter',\n      essential: false\n    }, {\n      name: 'Power bank',\n      essential: false\n    }]\n  }, {\n    id: 'medications',\n    name: 'Medications',\n    icon: '💊',\n    items: [{\n      name: 'Personal medications',\n      essential: true\n    }, {\n      name: 'Pain relievers',\n      essential: false\n    }, {\n      name: 'Band-aids',\n      essential: false\n    }, {\n      name: 'Antidiarrheals',\n      essential: false\n    }, {\n      name: 'Motion sickness pills',\n      essential: false\n    }]\n  }];\n\n  // Climate-specific items\n  let climateItems = [];\n  if (weatherData) {\n    // Hot weather items\n    if (weatherData.avgTemp > 25) {\n      climateItems.push({\n        category: 'clothing',\n        name: 'Sunglasses',\n        essential: true\n      }, {\n        category: 'clothing',\n        name: 'Hat or cap',\n        essential: true\n      }, {\n        category: 'clothing',\n        name: 'Sandals',\n        essential: false\n      }, {\n        category: 'clothing',\n        name: 'Swimwear',\n        essential: false\n      }, {\n        category: 'toiletries',\n        name: 'Sunscreen',\n        essential: true\n      }, {\n        category: 'toiletries',\n        name: 'After-sun lotion',\n        essential: false\n      }, {\n        category: 'accessories',\n        name: 'Portable fan',\n        essential: false\n      });\n    }\n\n    // Cold weather items\n    if (weatherData.avgTemp < 15) {\n      climateItems.push({\n        category: 'clothing',\n        name: 'Winter coat',\n        essential: true\n      }, {\n        category: 'clothing',\n        name: 'Sweaters/jumpers',\n        essential: true\n      }, {\n        category: 'clothing',\n        name: 'Thermal underwear',\n        essential: false\n      }, {\n        category: 'clothing',\n        name: 'Gloves',\n        essential: true\n      }, {\n        category: 'clothing',\n        name: 'Scarf',\n        essential: false\n      }, {\n        category: 'clothing',\n        name: 'Winter hat',\n        essential: true\n      }, {\n        category: 'clothing',\n        name: 'Warm socks',\n        essential: true\n      });\n    }\n\n    // Rainy weather items\n    if (weatherData.rainfall === 'high' || weatherData.conditions.includes('rain')) {\n      climateItems.push({\n        category: 'clothing',\n        name: 'Rain jacket',\n        essential: true\n      }, {\n        category: 'clothing',\n        name: 'Waterproof shoes',\n        essential: true\n      }, {\n        category: 'accessories',\n        name: 'Umbrella',\n        essential: true\n      }, {\n        category: 'accessories',\n        name: 'Waterproof bag cover',\n        essential: false\n      });\n    }\n\n    // Humid weather\n    if (weatherData.conditions === 'humid') {\n      climateItems.push({\n        category: 'clothing',\n        name: 'Lightweight clothes',\n        essential: true\n      }, {\n        category: 'toiletries',\n        name: 'Anti-humidity hair product',\n        essential: false\n      }, {\n        category: 'toiletries',\n        name: 'Mosquito repellent',\n        essential: true\n      });\n    }\n  }\n\n  // Trip type specific items\n  let tripTypeItems = [];\n  switch (tripType.toLowerCase()) {\n    case 'business':\n      tripTypeItems.push({\n        category: 'clothing',\n        name: 'Business suits',\n        essential: true\n      }, {\n        category: 'clothing',\n        name: 'Formal shoes',\n        essential: true\n      }, {\n        category: 'clothing',\n        name: 'Ties/Scarves',\n        essential: false\n      }, {\n        category: 'electronics',\n        name: 'Laptop',\n        essential: true\n      }, {\n        category: 'electronics',\n        name: 'Laptop charger',\n        essential: true\n      }, {\n        category: 'documents',\n        name: 'Business cards',\n        essential: false\n      }, {\n        category: 'documents',\n        name: 'Notebook',\n        essential: false\n      }, {\n        category: 'documents',\n        name: 'Presentation materials',\n        essential: false\n      });\n      break;\n    case 'beach':\n      tripTypeItems.push({\n        category: 'clothing',\n        name: 'Swimwear',\n        essential: true\n      }, {\n        category: 'clothing',\n        name: 'Beach cover-up',\n        essential: false\n      }, {\n        category: 'clothing',\n        name: 'Flip-flops',\n        essential: true\n      }, {\n        category: 'accessories',\n        name: 'Beach towel',\n        essential: false\n      }, {\n        category: 'accessories',\n        name: 'Beach bag',\n        essential: false\n      }, {\n        category: 'toiletries',\n        name: 'Sunscreen',\n        essential: true\n      }, {\n        category: 'toiletries',\n        name: 'After-sun lotion',\n        essential: false\n      });\n      break;\n    case 'adventure':\n    case 'hiking':\n      tripTypeItems.push({\n        category: 'clothing',\n        name: 'Hiking boots',\n        essential: true\n      }, {\n        category: 'clothing',\n        name: 'Moisture-wicking shirts',\n        essential: true\n      }, {\n        category: 'clothing',\n        name: 'Hiking pants/shorts',\n        essential: true\n      }, {\n        category: 'accessories',\n        name: 'Backpack',\n        essential: true\n      }, {\n        category: 'accessories',\n        name: 'Water bottle',\n        essential: true\n      }, {\n        category: 'accessories',\n        name: 'Flashlight/headlamp',\n        essential: true\n      }, {\n        category: 'accessories',\n        name: 'Multi-tool',\n        essential: false\n      }, {\n        category: 'toiletries',\n        name: 'Insect repellent',\n        essential: true\n      }, {\n        category: 'toiletries',\n        name: 'Sunscreen',\n        essential: true\n      });\n      break;\n    case 'winter':\n    case 'ski':\n      tripTypeItems.push({\n        category: 'clothing',\n        name: 'Ski jacket',\n        essential: true\n      }, {\n        category: 'clothing',\n        name: 'Ski pants',\n        essential: true\n      }, {\n        category: 'clothing',\n        name: 'Thermal base layers',\n        essential: true\n      }, {\n        category: 'clothing',\n        name: 'Thick socks',\n        essential: true\n      }, {\n        category: 'clothing',\n        name: 'Gloves',\n        essential: true\n      }, {\n        category: 'clothing',\n        name: 'Winter hat',\n        essential: true\n      }, {\n        category: 'accessories',\n        name: 'Ski goggles',\n        essential: true\n      }, {\n        category: 'toiletries',\n        name: 'Lip balm',\n        essential: true\n      }, {\n        category: 'toiletries',\n        name: 'Moisturizer',\n        essential: true\n      });\n      break;\n  }\n\n  // Destination-specific items\n  let destinationItems = [];\n\n  // Parse destination to extract potential country/region\n  const destinationLower = destination.toLowerCase();\n\n  // Beach or tropical destination\n  if (destinationLower.includes('beach') || destinationLower.includes('hawaii') || destinationLower.includes('bali') || destinationLower.includes('caribbean')) {\n    destinationItems.push({\n      category: 'clothing',\n      name: 'Swimwear',\n      essential: true\n    }, {\n      category: 'clothing',\n      name: 'Sandals',\n      essential: true\n    }, {\n      category: 'toiletries',\n      name: 'Sunscreen',\n      essential: true\n    }, {\n      category: 'accessories',\n      name: 'Beach towel',\n      essential: false\n    });\n  }\n\n  // Urban/city trip\n  if (destinationLower.includes('city') || destinationLower.includes('new york') || destinationLower.includes('paris') || destinationLower.includes('london') || destinationLower.includes('tokyo')) {\n    destinationItems.push({\n      category: 'clothing',\n      name: 'Comfortable walking shoes',\n      essential: true\n    }, {\n      category: 'accessories',\n      name: 'Day bag/backpack',\n      essential: true\n    }, {\n      category: 'electronics',\n      name: 'Camera',\n      essential: false\n    }, {\n      category: 'documents',\n      name: 'City map/guide',\n      essential: false\n    });\n  }\n\n  // Merge all item recommendations and group by category\n  const allItems = [...climateItems, ...tripTypeItems, ...destinationItems];\n\n  // Create a deep copy of baseRecommendations\n  const recommendations = JSON.parse(JSON.stringify(baseRecommendations));\n\n  // Additional categories that might not be in base recommendations\n  const additionalCategories = [{\n    id: 'accessories',\n    name: 'Accessories',\n    icon: '👓'\n  }, {\n    id: 'documents',\n    name: 'Documents',\n    icon: '📄'\n  }, {\n    id: 'misc',\n    name: 'Miscellaneous',\n    icon: '🔮'\n  }];\n\n  // Add any missing categories to recommendations\n  additionalCategories.forEach(category => {\n    if (!recommendations.some(rec => rec.id === category.id)) {\n      recommendations.push({\n        id: category.id,\n        name: category.name,\n        icon: category.icon,\n        items: []\n      });\n    }\n  });\n\n  // Add all specific items to appropriate categories\n  allItems.forEach(item => {\n    const category = recommendations.find(cat => cat.id === item.category);\n    if (category) {\n      // Check if item already exists in the category\n      if (!category.items.some(existingItem => existingItem.name === item.name)) {\n        category.items.push({\n          name: item.name,\n          essential: item.essential\n        });\n      }\n    }\n  });\n\n  // Sort by essential first within each category\n  recommendations.forEach(category => {\n    category.items.sort((a, b) => {\n      if (a.essential && !b.essential) return -1;\n      if (!a.essential && b.essential) return 1;\n      return a.name.localeCompare(b.name);\n    });\n  });\n  return recommendations;\n}\n\n/**\r\n * Calculate the optimal number of clothing items based on trip duration\r\n * \r\n * @param {number} duration - Trip duration in days\r\n * @returns {Object} Recommended quantities for different clothing items\r\n */\nexport function calculateClothingQuantities(duration) {\n  return {\n    underwear: duration,\n    socks: duration,\n    shirts: Math.ceil(duration / 2),\n    pants: Math.ceil(duration / 3),\n    dressShirts: Math.ceil(duration / 2),\n    // For business trips\n    formalOutfits: Math.ceil(duration / 3) // For business trips\n  };\n}\n\n/**\r\n * Check if a destination is likely to be international\r\n * (simplified implementation - would be more comprehensive in a real app)\r\n *\r\n * @param {string} destination - The trip destination\r\n * @returns {boolean} Whether the destination is likely international\r\n */\nexport function isInternationalDestination(destination) {\n  // List of countries (partial)\n  const countries = ['france', 'italy', 'spain', 'germany', 'japan', 'china', 'australia', 'canada', 'mexico', 'brazil', 'argentina', 'thailand', 'vietnam', 'indonesia', 'india', 'russia', 'south africa', 'egypt', 'morocco', 'united kingdom', 'ireland', 'greece', 'portugal', 'netherlands'];\n\n  // Check if any country name appears in the destination\n  const destinationLower = destination.toLowerCase();\n  return countries.some(country => destinationLower.includes(country));\n}\n\n/**\r\n * Generate document recommendations based on destination\r\n * \r\n * @param {string} destination - The trip destination\r\n * @returns {Array} Recommended documents\r\n */\nexport function getDocumentRecommendations(destination) {\n  const isInternational = isInternationalDestination(destination);\n  const baseDocuments = [{\n    name: 'ID/Driver\\'s License',\n    essential: true\n  }, {\n    name: 'Credit/Debit Cards',\n    essential: true\n  }, {\n    name: 'Travel Insurance Info',\n    essential: true\n  }, {\n    name: 'Emergency Contact List',\n    essential: true\n  }, {\n    name: 'Hotel Reservation',\n    essential: true\n  }, {\n    name: 'Transportation Tickets',\n    essential: true\n  }];\n  if (isInternational) {\n    return [...baseDocuments, {\n      name: 'Passport',\n      essential: true\n    }, {\n      name: 'Visa Documentation',\n      essential: true\n    }, {\n      name: 'International Driver\\'s Permit',\n      essential: false\n    }, {\n      name: 'Vaccination Records',\n      essential: false\n    }, {\n      name: 'Currency Exchange Info',\n      essential: false\n    }, {\n      name: 'Embassy Contact Info',\n      essential: false\n    }, {\n      name: 'Travel Adapter Info',\n      essential: false\n    }];\n  }\n  return baseDocuments;\n}","map":{"version":3,"names":["getPackingRecommendations","destination","duration","weatherData","tripType","baseRecommendations","id","name","icon","items","essential","quantity","Math","ceil","climateItems","avgTemp","push","category","rainfall","conditions","includes","tripTypeItems","toLowerCase","destinationItems","destinationLower","allItems","recommendations","JSON","parse","stringify","additionalCategories","forEach","some","rec","item","find","cat","existingItem","sort","a","b","localeCompare","calculateClothingQuantities","underwear","socks","shirts","pants","dressShirts","formalOutfits","isInternationalDestination","countries","country","getDocumentRecommendations","isInternational","baseDocuments"],"sources":["C:/Users/juliu/Desktop/web/src/components/Packing/EnhancedPackingList.jsx"],"sourcesContent":["/**\r\n * Utility functions for packing list recommendations and management\r\n */\r\n\r\n/**\r\n * Generate packing recommendations based on destination, trip duration, and weather\r\n * \r\n * @param {string} destination - The trip destination\r\n * @param {number} duration - Trip duration in days\r\n * @param {Object} weatherData - Weather forecast data\r\n * @param {string} tripType - Type of trip (leisure, business, adventure, etc.)\r\n * @returns {Array} Array of packing categories with recommended items\r\n */\r\nexport function getPackingRecommendations(destination, duration, weatherData, tripType = 'leisure') {\r\n    // Base items everyone needs regardless of destination\r\n    const baseRecommendations = [\r\n      {\r\n        id: 'essentials',\r\n        name: 'Essentials',\r\n        icon: '⭐',\r\n        items: [\r\n          { name: 'Passport/ID', essential: true },\r\n          { name: 'Wallet', essential: true },\r\n          { name: 'Phone', essential: true },\r\n          { name: 'Phone charger', essential: true },\r\n          { name: 'Travel insurance documents', essential: true },\r\n          { name: 'Cash/credit cards', essential: true },\r\n          { name: 'House keys', essential: true },\r\n        ]\r\n      },\r\n      {\r\n        id: 'clothing',\r\n        name: 'Clothing',\r\n        icon: '👕',\r\n        items: [\r\n          { name: 'Underwear', essential: true, quantity: duration },\r\n          { name: 'Socks', essential: true, quantity: duration },\r\n          { name: 'T-shirts', essential: true, quantity: Math.ceil(duration / 2) },\r\n          { name: 'Pants/shorts', essential: true, quantity: Math.ceil(duration / 3) },\r\n          { name: 'Sleepwear', essential: false },\r\n          { name: 'Belt', essential: false },\r\n        ]\r\n      },\r\n      {\r\n        id: 'toiletries',\r\n        name: 'Toiletries',\r\n        icon: '🧴',\r\n        items: [\r\n          { name: 'Toothbrush', essential: true },\r\n          { name: 'Toothpaste', essential: true },\r\n          { name: 'Deodorant', essential: true },\r\n          { name: 'Shampoo', essential: false },\r\n          { name: 'Soap/shower gel', essential: false },\r\n          { name: 'Razor', essential: false },\r\n          { name: 'Hairbrush/comb', essential: false },\r\n        ]\r\n      },\r\n      {\r\n        id: 'electronics',\r\n        name: 'Electronics',\r\n        icon: '📱',\r\n        items: [\r\n          { name: 'Camera', essential: false },\r\n          { name: 'Headphones', essential: false },\r\n          { name: 'Travel adapter', essential: false },\r\n          { name: 'Power bank', essential: false },\r\n        ]\r\n      },\r\n      {\r\n        id: 'medications',\r\n        name: 'Medications',\r\n        icon: '💊',\r\n        items: [\r\n          { name: 'Personal medications', essential: true },\r\n          { name: 'Pain relievers', essential: false },\r\n          { name: 'Band-aids', essential: false },\r\n          { name: 'Antidiarrheals', essential: false },\r\n          { name: 'Motion sickness pills', essential: false },\r\n        ]\r\n      }\r\n    ];\r\n    \r\n    // Climate-specific items\r\n    let climateItems = [];\r\n    \r\n    if (weatherData) {\r\n      // Hot weather items\r\n      if (weatherData.avgTemp > 25) {\r\n        climateItems.push(\r\n          { category: 'clothing', name: 'Sunglasses', essential: true },\r\n          { category: 'clothing', name: 'Hat or cap', essential: true },\r\n          { category: 'clothing', name: 'Sandals', essential: false },\r\n          { category: 'clothing', name: 'Swimwear', essential: false },\r\n          { category: 'toiletries', name: 'Sunscreen', essential: true },\r\n          { category: 'toiletries', name: 'After-sun lotion', essential: false },\r\n          { category: 'accessories', name: 'Portable fan', essential: false }\r\n        );\r\n      }\r\n      \r\n      // Cold weather items\r\n      if (weatherData.avgTemp < 15) {\r\n        climateItems.push(\r\n          { category: 'clothing', name: 'Winter coat', essential: true },\r\n          { category: 'clothing', name: 'Sweaters/jumpers', essential: true },\r\n          { category: 'clothing', name: 'Thermal underwear', essential: false },\r\n          { category: 'clothing', name: 'Gloves', essential: true },\r\n          { category: 'clothing', name: 'Scarf', essential: false },\r\n          { category: 'clothing', name: 'Winter hat', essential: true },\r\n          { category: 'clothing', name: 'Warm socks', essential: true }\r\n        );\r\n      }\r\n      \r\n      // Rainy weather items\r\n      if (weatherData.rainfall === 'high' || weatherData.conditions.includes('rain')) {\r\n        climateItems.push(\r\n          { category: 'clothing', name: 'Rain jacket', essential: true },\r\n          { category: 'clothing', name: 'Waterproof shoes', essential: true },\r\n          { category: 'accessories', name: 'Umbrella', essential: true },\r\n          { category: 'accessories', name: 'Waterproof bag cover', essential: false }\r\n        );\r\n      }\r\n      \r\n      // Humid weather\r\n      if (weatherData.conditions === 'humid') {\r\n        climateItems.push(\r\n          { category: 'clothing', name: 'Lightweight clothes', essential: true },\r\n          { category: 'toiletries', name: 'Anti-humidity hair product', essential: false },\r\n          { category: 'toiletries', name: 'Mosquito repellent', essential: true }\r\n        );\r\n      }\r\n    }\r\n    \r\n    // Trip type specific items\r\n    let tripTypeItems = [];\r\n    \r\n    switch (tripType.toLowerCase()) {\r\n      case 'business':\r\n        tripTypeItems.push(\r\n          { category: 'clothing', name: 'Business suits', essential: true },\r\n          { category: 'clothing', name: 'Formal shoes', essential: true },\r\n          { category: 'clothing', name: 'Ties/Scarves', essential: false },\r\n          { category: 'electronics', name: 'Laptop', essential: true },\r\n          { category: 'electronics', name: 'Laptop charger', essential: true },\r\n          { category: 'documents', name: 'Business cards', essential: false },\r\n          { category: 'documents', name: 'Notebook', essential: false },\r\n          { category: 'documents', name: 'Presentation materials', essential: false }\r\n        );\r\n        break;\r\n        \r\n      case 'beach':\r\n        tripTypeItems.push(\r\n          { category: 'clothing', name: 'Swimwear', essential: true },\r\n          { category: 'clothing', name: 'Beach cover-up', essential: false },\r\n          { category: 'clothing', name: 'Flip-flops', essential: true },\r\n          { category: 'accessories', name: 'Beach towel', essential: false },\r\n          { category: 'accessories', name: 'Beach bag', essential: false },\r\n          { category: 'toiletries', name: 'Sunscreen', essential: true },\r\n          { category: 'toiletries', name: 'After-sun lotion', essential: false }\r\n        );\r\n        break;\r\n        \r\n      case 'adventure':\r\n      case 'hiking':\r\n        tripTypeItems.push(\r\n          { category: 'clothing', name: 'Hiking boots', essential: true },\r\n          { category: 'clothing', name: 'Moisture-wicking shirts', essential: true },\r\n          { category: 'clothing', name: 'Hiking pants/shorts', essential: true },\r\n          { category: 'accessories', name: 'Backpack', essential: true },\r\n          { category: 'accessories', name: 'Water bottle', essential: true },\r\n          { category: 'accessories', name: 'Flashlight/headlamp', essential: true },\r\n          { category: 'accessories', name: 'Multi-tool', essential: false },\r\n          { category: 'toiletries', name: 'Insect repellent', essential: true },\r\n          { category: 'toiletries', name: 'Sunscreen', essential: true }\r\n        );\r\n        break;\r\n        \r\n      case 'winter':\r\n      case 'ski':\r\n        tripTypeItems.push(\r\n          { category: 'clothing', name: 'Ski jacket', essential: true },\r\n          { category: 'clothing', name: 'Ski pants', essential: true },\r\n          { category: 'clothing', name: 'Thermal base layers', essential: true },\r\n          { category: 'clothing', name: 'Thick socks', essential: true },\r\n          { category: 'clothing', name: 'Gloves', essential: true },\r\n          { category: 'clothing', name: 'Winter hat', essential: true },\r\n          { category: 'accessories', name: 'Ski goggles', essential: true },\r\n          { category: 'toiletries', name: 'Lip balm', essential: true },\r\n          { category: 'toiletries', name: 'Moisturizer', essential: true }\r\n        );\r\n        break;\r\n    }\r\n    \r\n    // Destination-specific items\r\n    let destinationItems = [];\r\n    \r\n    // Parse destination to extract potential country/region\r\n    const destinationLower = destination.toLowerCase();\r\n    \r\n    // Beach or tropical destination\r\n    if (destinationLower.includes('beach') || \r\n        destinationLower.includes('hawaii') ||\r\n        destinationLower.includes('bali') ||\r\n        destinationLower.includes('caribbean')) {\r\n      destinationItems.push(\r\n        { category: 'clothing', name: 'Swimwear', essential: true },\r\n        { category: 'clothing', name: 'Sandals', essential: true },\r\n        { category: 'toiletries', name: 'Sunscreen', essential: true },\r\n        { category: 'accessories', name: 'Beach towel', essential: false }\r\n      );\r\n    }\r\n    \r\n    // Urban/city trip\r\n    if (destinationLower.includes('city') ||\r\n        destinationLower.includes('new york') ||\r\n        destinationLower.includes('paris') ||\r\n        destinationLower.includes('london') ||\r\n        destinationLower.includes('tokyo')) {\r\n      destinationItems.push(\r\n        { category: 'clothing', name: 'Comfortable walking shoes', essential: true },\r\n        { category: 'accessories', name: 'Day bag/backpack', essential: true },\r\n        { category: 'electronics', name: 'Camera', essential: false },\r\n        { category: 'documents', name: 'City map/guide', essential: false }\r\n      );\r\n    }\r\n    \r\n    // Merge all item recommendations and group by category\r\n    const allItems = [\r\n      ...climateItems,\r\n      ...tripTypeItems,\r\n      ...destinationItems\r\n    ];\r\n    \r\n    // Create a deep copy of baseRecommendations\r\n    const recommendations = JSON.parse(JSON.stringify(baseRecommendations));\r\n    \r\n    // Additional categories that might not be in base recommendations\r\n    const additionalCategories = [\r\n      { id: 'accessories', name: 'Accessories', icon: '👓' },\r\n      { id: 'documents', name: 'Documents', icon: '📄' },\r\n      { id: 'misc', name: 'Miscellaneous', icon: '🔮' }\r\n    ];\r\n    \r\n    // Add any missing categories to recommendations\r\n    additionalCategories.forEach(category => {\r\n      if (!recommendations.some(rec => rec.id === category.id)) {\r\n        recommendations.push({\r\n          id: category.id,\r\n          name: category.name,\r\n          icon: category.icon,\r\n          items: []\r\n        });\r\n      }\r\n    });\r\n    \r\n    // Add all specific items to appropriate categories\r\n    allItems.forEach(item => {\r\n      const category = recommendations.find(cat => cat.id === item.category);\r\n      if (category) {\r\n        // Check if item already exists in the category\r\n        if (!category.items.some(existingItem => existingItem.name === item.name)) {\r\n          category.items.push({\r\n            name: item.name,\r\n            essential: item.essential\r\n          });\r\n        }\r\n      }\r\n    });\r\n    \r\n    // Sort by essential first within each category\r\n    recommendations.forEach(category => {\r\n      category.items.sort((a, b) => {\r\n        if (a.essential && !b.essential) return -1;\r\n        if (!a.essential && b.essential) return 1;\r\n        return a.name.localeCompare(b.name);\r\n      });\r\n    });\r\n    \r\n    return recommendations;\r\n  }\r\n  \r\n  /**\r\n   * Calculate the optimal number of clothing items based on trip duration\r\n   * \r\n   * @param {number} duration - Trip duration in days\r\n   * @returns {Object} Recommended quantities for different clothing items\r\n   */\r\n  export function calculateClothingQuantities(duration) {\r\n    return {\r\n      underwear: duration,\r\n      socks: duration,\r\n      shirts: Math.ceil(duration / 2),\r\n      pants: Math.ceil(duration / 3),\r\n      dressShirts: Math.ceil(duration / 2), // For business trips\r\n      formalOutfits: Math.ceil(duration / 3)  // For business trips\r\n    };\r\n  }\r\n  \r\n  /**\r\n   * Check if a destination is likely to be international\r\n   * (simplified implementation - would be more comprehensive in a real app)\r\n   *\r\n   * @param {string} destination - The trip destination\r\n   * @returns {boolean} Whether the destination is likely international\r\n   */\r\n  export function isInternationalDestination(destination) {\r\n    // List of countries (partial)\r\n    const countries = [\r\n      'france', 'italy', 'spain', 'germany', 'japan', 'china', 'australia',\r\n      'canada', 'mexico', 'brazil', 'argentina', 'thailand', 'vietnam',\r\n      'indonesia', 'india', 'russia', 'south africa', 'egypt', 'morocco',\r\n      'united kingdom', 'ireland', 'greece', 'portugal', 'netherlands'\r\n    ];\r\n    \r\n    // Check if any country name appears in the destination\r\n    const destinationLower = destination.toLowerCase();\r\n    return countries.some(country => destinationLower.includes(country));\r\n  }\r\n  \r\n  /**\r\n   * Generate document recommendations based on destination\r\n   * \r\n   * @param {string} destination - The trip destination\r\n   * @returns {Array} Recommended documents\r\n   */\r\n  export function getDocumentRecommendations(destination) {\r\n    const isInternational = isInternationalDestination(destination);\r\n    \r\n    const baseDocuments = [\r\n      { name: 'ID/Driver\\'s License', essential: true },\r\n      { name: 'Credit/Debit Cards', essential: true },\r\n      { name: 'Travel Insurance Info', essential: true },\r\n      { name: 'Emergency Contact List', essential: true },\r\n      { name: 'Hotel Reservation', essential: true },\r\n      { name: 'Transportation Tickets', essential: true },\r\n    ];\r\n    \r\n    if (isInternational) {\r\n      return [\r\n        ...baseDocuments,\r\n        { name: 'Passport', essential: true },\r\n        { name: 'Visa Documentation', essential: true },\r\n        { name: 'International Driver\\'s Permit', essential: false },\r\n        { name: 'Vaccination Records', essential: false },\r\n        { name: 'Currency Exchange Info', essential: false },\r\n        { name: 'Embassy Contact Info', essential: false },\r\n        { name: 'Travel Adapter Info', essential: false },\r\n      ];\r\n    }\r\n    \r\n    return baseDocuments;\r\n  }"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,yBAAyBA,CAACC,WAAW,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,QAAQ,GAAG,SAAS,EAAE;EAChG;EACA,MAAMC,mBAAmB,GAAG,CAC1B;IACEC,EAAE,EAAE,YAAY;IAChBC,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE,GAAG;IACTC,KAAK,EAAE,CACL;MAAEF,IAAI,EAAE,aAAa;MAAEG,SAAS,EAAE;IAAK,CAAC,EACxC;MAAEH,IAAI,EAAE,QAAQ;MAAEG,SAAS,EAAE;IAAK,CAAC,EACnC;MAAEH,IAAI,EAAE,OAAO;MAAEG,SAAS,EAAE;IAAK,CAAC,EAClC;MAAEH,IAAI,EAAE,eAAe;MAAEG,SAAS,EAAE;IAAK,CAAC,EAC1C;MAAEH,IAAI,EAAE,4BAA4B;MAAEG,SAAS,EAAE;IAAK,CAAC,EACvD;MAAEH,IAAI,EAAE,mBAAmB;MAAEG,SAAS,EAAE;IAAK,CAAC,EAC9C;MAAEH,IAAI,EAAE,YAAY;MAAEG,SAAS,EAAE;IAAK,CAAC;EAE3C,CAAC,EACD;IACEJ,EAAE,EAAE,UAAU;IACdC,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE,CACL;MAAEF,IAAI,EAAE,WAAW;MAAEG,SAAS,EAAE,IAAI;MAAEC,QAAQ,EAAET;IAAS,CAAC,EAC1D;MAAEK,IAAI,EAAE,OAAO;MAAEG,SAAS,EAAE,IAAI;MAAEC,QAAQ,EAAET;IAAS,CAAC,EACtD;MAAEK,IAAI,EAAE,UAAU;MAAEG,SAAS,EAAE,IAAI;MAAEC,QAAQ,EAAEC,IAAI,CAACC,IAAI,CAACX,QAAQ,GAAG,CAAC;IAAE,CAAC,EACxE;MAAEK,IAAI,EAAE,cAAc;MAAEG,SAAS,EAAE,IAAI;MAAEC,QAAQ,EAAEC,IAAI,CAACC,IAAI,CAACX,QAAQ,GAAG,CAAC;IAAE,CAAC,EAC5E;MAAEK,IAAI,EAAE,WAAW;MAAEG,SAAS,EAAE;IAAM,CAAC,EACvC;MAAEH,IAAI,EAAE,MAAM;MAAEG,SAAS,EAAE;IAAM,CAAC;EAEtC,CAAC,EACD;IACEJ,EAAE,EAAE,YAAY;IAChBC,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE,CACL;MAAEF,IAAI,EAAE,YAAY;MAAEG,SAAS,EAAE;IAAK,CAAC,EACvC;MAAEH,IAAI,EAAE,YAAY;MAAEG,SAAS,EAAE;IAAK,CAAC,EACvC;MAAEH,IAAI,EAAE,WAAW;MAAEG,SAAS,EAAE;IAAK,CAAC,EACtC;MAAEH,IAAI,EAAE,SAAS;MAAEG,SAAS,EAAE;IAAM,CAAC,EACrC;MAAEH,IAAI,EAAE,iBAAiB;MAAEG,SAAS,EAAE;IAAM,CAAC,EAC7C;MAAEH,IAAI,EAAE,OAAO;MAAEG,SAAS,EAAE;IAAM,CAAC,EACnC;MAAEH,IAAI,EAAE,gBAAgB;MAAEG,SAAS,EAAE;IAAM,CAAC;EAEhD,CAAC,EACD;IACEJ,EAAE,EAAE,aAAa;IACjBC,IAAI,EAAE,aAAa;IACnBC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE,CACL;MAAEF,IAAI,EAAE,QAAQ;MAAEG,SAAS,EAAE;IAAM,CAAC,EACpC;MAAEH,IAAI,EAAE,YAAY;MAAEG,SAAS,EAAE;IAAM,CAAC,EACxC;MAAEH,IAAI,EAAE,gBAAgB;MAAEG,SAAS,EAAE;IAAM,CAAC,EAC5C;MAAEH,IAAI,EAAE,YAAY;MAAEG,SAAS,EAAE;IAAM,CAAC;EAE5C,CAAC,EACD;IACEJ,EAAE,EAAE,aAAa;IACjBC,IAAI,EAAE,aAAa;IACnBC,IAAI,EAAE,IAAI;IACVC,KAAK,EAAE,CACL;MAAEF,IAAI,EAAE,sBAAsB;MAAEG,SAAS,EAAE;IAAK,CAAC,EACjD;MAAEH,IAAI,EAAE,gBAAgB;MAAEG,SAAS,EAAE;IAAM,CAAC,EAC5C;MAAEH,IAAI,EAAE,WAAW;MAAEG,SAAS,EAAE;IAAM,CAAC,EACvC;MAAEH,IAAI,EAAE,gBAAgB;MAAEG,SAAS,EAAE;IAAM,CAAC,EAC5C;MAAEH,IAAI,EAAE,uBAAuB;MAAEG,SAAS,EAAE;IAAM,CAAC;EAEvD,CAAC,CACF;;EAED;EACA,IAAII,YAAY,GAAG,EAAE;EAErB,IAAIX,WAAW,EAAE;IACf;IACA,IAAIA,WAAW,CAACY,OAAO,GAAG,EAAE,EAAE;MAC5BD,YAAY,CAACE,IAAI,CACf;QAAEC,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,YAAY;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC7D;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,YAAY;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC7D;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,SAAS;QAAEG,SAAS,EAAE;MAAM,CAAC,EAC3D;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,UAAU;QAAEG,SAAS,EAAE;MAAM,CAAC,EAC5D;QAAEO,QAAQ,EAAE,YAAY;QAAEV,IAAI,EAAE,WAAW;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC9D;QAAEO,QAAQ,EAAE,YAAY;QAAEV,IAAI,EAAE,kBAAkB;QAAEG,SAAS,EAAE;MAAM,CAAC,EACtE;QAAEO,QAAQ,EAAE,aAAa;QAAEV,IAAI,EAAE,cAAc;QAAEG,SAAS,EAAE;MAAM,CACpE,CAAC;IACH;;IAEA;IACA,IAAIP,WAAW,CAACY,OAAO,GAAG,EAAE,EAAE;MAC5BD,YAAY,CAACE,IAAI,CACf;QAAEC,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,aAAa;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC9D;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,kBAAkB;QAAEG,SAAS,EAAE;MAAK,CAAC,EACnE;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,mBAAmB;QAAEG,SAAS,EAAE;MAAM,CAAC,EACrE;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,QAAQ;QAAEG,SAAS,EAAE;MAAK,CAAC,EACzD;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,OAAO;QAAEG,SAAS,EAAE;MAAM,CAAC,EACzD;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,YAAY;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC7D;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,YAAY;QAAEG,SAAS,EAAE;MAAK,CAC9D,CAAC;IACH;;IAEA;IACA,IAAIP,WAAW,CAACe,QAAQ,KAAK,MAAM,IAAIf,WAAW,CAACgB,UAAU,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;MAC9EN,YAAY,CAACE,IAAI,CACf;QAAEC,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,aAAa;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC9D;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,kBAAkB;QAAEG,SAAS,EAAE;MAAK,CAAC,EACnE;QAAEO,QAAQ,EAAE,aAAa;QAAEV,IAAI,EAAE,UAAU;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC9D;QAAEO,QAAQ,EAAE,aAAa;QAAEV,IAAI,EAAE,sBAAsB;QAAEG,SAAS,EAAE;MAAM,CAC5E,CAAC;IACH;;IAEA;IACA,IAAIP,WAAW,CAACgB,UAAU,KAAK,OAAO,EAAE;MACtCL,YAAY,CAACE,IAAI,CACf;QAAEC,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,qBAAqB;QAAEG,SAAS,EAAE;MAAK,CAAC,EACtE;QAAEO,QAAQ,EAAE,YAAY;QAAEV,IAAI,EAAE,4BAA4B;QAAEG,SAAS,EAAE;MAAM,CAAC,EAChF;QAAEO,QAAQ,EAAE,YAAY;QAAEV,IAAI,EAAE,oBAAoB;QAAEG,SAAS,EAAE;MAAK,CACxE,CAAC;IACH;EACF;;EAEA;EACA,IAAIW,aAAa,GAAG,EAAE;EAEtB,QAAQjB,QAAQ,CAACkB,WAAW,CAAC,CAAC;IAC5B,KAAK,UAAU;MACbD,aAAa,CAACL,IAAI,CAChB;QAAEC,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,gBAAgB;QAAEG,SAAS,EAAE;MAAK,CAAC,EACjE;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,cAAc;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC/D;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,cAAc;QAAEG,SAAS,EAAE;MAAM,CAAC,EAChE;QAAEO,QAAQ,EAAE,aAAa;QAAEV,IAAI,EAAE,QAAQ;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC5D;QAAEO,QAAQ,EAAE,aAAa;QAAEV,IAAI,EAAE,gBAAgB;QAAEG,SAAS,EAAE;MAAK,CAAC,EACpE;QAAEO,QAAQ,EAAE,WAAW;QAAEV,IAAI,EAAE,gBAAgB;QAAEG,SAAS,EAAE;MAAM,CAAC,EACnE;QAAEO,QAAQ,EAAE,WAAW;QAAEV,IAAI,EAAE,UAAU;QAAEG,SAAS,EAAE;MAAM,CAAC,EAC7D;QAAEO,QAAQ,EAAE,WAAW;QAAEV,IAAI,EAAE,wBAAwB;QAAEG,SAAS,EAAE;MAAM,CAC5E,CAAC;MACD;IAEF,KAAK,OAAO;MACVW,aAAa,CAACL,IAAI,CAChB;QAAEC,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,UAAU;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC3D;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,gBAAgB;QAAEG,SAAS,EAAE;MAAM,CAAC,EAClE;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,YAAY;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC7D;QAAEO,QAAQ,EAAE,aAAa;QAAEV,IAAI,EAAE,aAAa;QAAEG,SAAS,EAAE;MAAM,CAAC,EAClE;QAAEO,QAAQ,EAAE,aAAa;QAAEV,IAAI,EAAE,WAAW;QAAEG,SAAS,EAAE;MAAM,CAAC,EAChE;QAAEO,QAAQ,EAAE,YAAY;QAAEV,IAAI,EAAE,WAAW;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC9D;QAAEO,QAAQ,EAAE,YAAY;QAAEV,IAAI,EAAE,kBAAkB;QAAEG,SAAS,EAAE;MAAM,CACvE,CAAC;MACD;IAEF,KAAK,WAAW;IAChB,KAAK,QAAQ;MACXW,aAAa,CAACL,IAAI,CAChB;QAAEC,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,cAAc;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC/D;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,yBAAyB;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC1E;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,qBAAqB;QAAEG,SAAS,EAAE;MAAK,CAAC,EACtE;QAAEO,QAAQ,EAAE,aAAa;QAAEV,IAAI,EAAE,UAAU;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC9D;QAAEO,QAAQ,EAAE,aAAa;QAAEV,IAAI,EAAE,cAAc;QAAEG,SAAS,EAAE;MAAK,CAAC,EAClE;QAAEO,QAAQ,EAAE,aAAa;QAAEV,IAAI,EAAE,qBAAqB;QAAEG,SAAS,EAAE;MAAK,CAAC,EACzE;QAAEO,QAAQ,EAAE,aAAa;QAAEV,IAAI,EAAE,YAAY;QAAEG,SAAS,EAAE;MAAM,CAAC,EACjE;QAAEO,QAAQ,EAAE,YAAY;QAAEV,IAAI,EAAE,kBAAkB;QAAEG,SAAS,EAAE;MAAK,CAAC,EACrE;QAAEO,QAAQ,EAAE,YAAY;QAAEV,IAAI,EAAE,WAAW;QAAEG,SAAS,EAAE;MAAK,CAC/D,CAAC;MACD;IAEF,KAAK,QAAQ;IACb,KAAK,KAAK;MACRW,aAAa,CAACL,IAAI,CAChB;QAAEC,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,YAAY;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC7D;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,WAAW;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC5D;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,qBAAqB;QAAEG,SAAS,EAAE;MAAK,CAAC,EACtE;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,aAAa;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC9D;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,QAAQ;QAAEG,SAAS,EAAE;MAAK,CAAC,EACzD;QAAEO,QAAQ,EAAE,UAAU;QAAEV,IAAI,EAAE,YAAY;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC7D;QAAEO,QAAQ,EAAE,aAAa;QAAEV,IAAI,EAAE,aAAa;QAAEG,SAAS,EAAE;MAAK,CAAC,EACjE;QAAEO,QAAQ,EAAE,YAAY;QAAEV,IAAI,EAAE,UAAU;QAAEG,SAAS,EAAE;MAAK,CAAC,EAC7D;QAAEO,QAAQ,EAAE,YAAY;QAAEV,IAAI,EAAE,aAAa;QAAEG,SAAS,EAAE;MAAK,CACjE,CAAC;MACD;EACJ;;EAEA;EACA,IAAIa,gBAAgB,GAAG,EAAE;;EAEzB;EACA,MAAMC,gBAAgB,GAAGvB,WAAW,CAACqB,WAAW,CAAC,CAAC;;EAElD;EACA,IAAIE,gBAAgB,CAACJ,QAAQ,CAAC,OAAO,CAAC,IAClCI,gBAAgB,CAACJ,QAAQ,CAAC,QAAQ,CAAC,IACnCI,gBAAgB,CAACJ,QAAQ,CAAC,MAAM,CAAC,IACjCI,gBAAgB,CAACJ,QAAQ,CAAC,WAAW,CAAC,EAAE;IAC1CG,gBAAgB,CAACP,IAAI,CACnB;MAAEC,QAAQ,EAAE,UAAU;MAAEV,IAAI,EAAE,UAAU;MAAEG,SAAS,EAAE;IAAK,CAAC,EAC3D;MAAEO,QAAQ,EAAE,UAAU;MAAEV,IAAI,EAAE,SAAS;MAAEG,SAAS,EAAE;IAAK,CAAC,EAC1D;MAAEO,QAAQ,EAAE,YAAY;MAAEV,IAAI,EAAE,WAAW;MAAEG,SAAS,EAAE;IAAK,CAAC,EAC9D;MAAEO,QAAQ,EAAE,aAAa;MAAEV,IAAI,EAAE,aAAa;MAAEG,SAAS,EAAE;IAAM,CACnE,CAAC;EACH;;EAEA;EACA,IAAIc,gBAAgB,CAACJ,QAAQ,CAAC,MAAM,CAAC,IACjCI,gBAAgB,CAACJ,QAAQ,CAAC,UAAU,CAAC,IACrCI,gBAAgB,CAACJ,QAAQ,CAAC,OAAO,CAAC,IAClCI,gBAAgB,CAACJ,QAAQ,CAAC,QAAQ,CAAC,IACnCI,gBAAgB,CAACJ,QAAQ,CAAC,OAAO,CAAC,EAAE;IACtCG,gBAAgB,CAACP,IAAI,CACnB;MAAEC,QAAQ,EAAE,UAAU;MAAEV,IAAI,EAAE,2BAA2B;MAAEG,SAAS,EAAE;IAAK,CAAC,EAC5E;MAAEO,QAAQ,EAAE,aAAa;MAAEV,IAAI,EAAE,kBAAkB;MAAEG,SAAS,EAAE;IAAK,CAAC,EACtE;MAAEO,QAAQ,EAAE,aAAa;MAAEV,IAAI,EAAE,QAAQ;MAAEG,SAAS,EAAE;IAAM,CAAC,EAC7D;MAAEO,QAAQ,EAAE,WAAW;MAAEV,IAAI,EAAE,gBAAgB;MAAEG,SAAS,EAAE;IAAM,CACpE,CAAC;EACH;;EAEA;EACA,MAAMe,QAAQ,GAAG,CACf,GAAGX,YAAY,EACf,GAAGO,aAAa,EAChB,GAAGE,gBAAgB,CACpB;;EAED;EACA,MAAMG,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACxB,mBAAmB,CAAC,CAAC;;EAEvE;EACA,MAAMyB,oBAAoB,GAAG,CAC3B;IAAExB,EAAE,EAAE,aAAa;IAAEC,IAAI,EAAE,aAAa;IAAEC,IAAI,EAAE;EAAK,CAAC,EACtD;IAAEF,EAAE,EAAE,WAAW;IAAEC,IAAI,EAAE,WAAW;IAAEC,IAAI,EAAE;EAAK,CAAC,EAClD;IAAEF,EAAE,EAAE,MAAM;IAAEC,IAAI,EAAE,eAAe;IAAEC,IAAI,EAAE;EAAK,CAAC,CAClD;;EAED;EACAsB,oBAAoB,CAACC,OAAO,CAACd,QAAQ,IAAI;IACvC,IAAI,CAACS,eAAe,CAACM,IAAI,CAACC,GAAG,IAAIA,GAAG,CAAC3B,EAAE,KAAKW,QAAQ,CAACX,EAAE,CAAC,EAAE;MACxDoB,eAAe,CAACV,IAAI,CAAC;QACnBV,EAAE,EAAEW,QAAQ,CAACX,EAAE;QACfC,IAAI,EAAEU,QAAQ,CAACV,IAAI;QACnBC,IAAI,EAAES,QAAQ,CAACT,IAAI;QACnBC,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;;EAEF;EACAgB,QAAQ,CAACM,OAAO,CAACG,IAAI,IAAI;IACvB,MAAMjB,QAAQ,GAAGS,eAAe,CAACS,IAAI,CAACC,GAAG,IAAIA,GAAG,CAAC9B,EAAE,KAAK4B,IAAI,CAACjB,QAAQ,CAAC;IACtE,IAAIA,QAAQ,EAAE;MACZ;MACA,IAAI,CAACA,QAAQ,CAACR,KAAK,CAACuB,IAAI,CAACK,YAAY,IAAIA,YAAY,CAAC9B,IAAI,KAAK2B,IAAI,CAAC3B,IAAI,CAAC,EAAE;QACzEU,QAAQ,CAACR,KAAK,CAACO,IAAI,CAAC;UAClBT,IAAI,EAAE2B,IAAI,CAAC3B,IAAI;UACfG,SAAS,EAAEwB,IAAI,CAACxB;QAClB,CAAC,CAAC;MACJ;IACF;EACF,CAAC,CAAC;;EAEF;EACAgB,eAAe,CAACK,OAAO,CAACd,QAAQ,IAAI;IAClCA,QAAQ,CAACR,KAAK,CAAC6B,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC5B,IAAID,CAAC,CAAC7B,SAAS,IAAI,CAAC8B,CAAC,CAAC9B,SAAS,EAAE,OAAO,CAAC,CAAC;MAC1C,IAAI,CAAC6B,CAAC,CAAC7B,SAAS,IAAI8B,CAAC,CAAC9B,SAAS,EAAE,OAAO,CAAC;MACzC,OAAO6B,CAAC,CAAChC,IAAI,CAACkC,aAAa,CAACD,CAAC,CAACjC,IAAI,CAAC;IACrC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAOmB,eAAe;AACxB;;AAEA;AACF;AACA;AACA;AACA;AACA;AACE,OAAO,SAASgB,2BAA2BA,CAACxC,QAAQ,EAAE;EACpD,OAAO;IACLyC,SAAS,EAAEzC,QAAQ;IACnB0C,KAAK,EAAE1C,QAAQ;IACf2C,MAAM,EAAEjC,IAAI,CAACC,IAAI,CAACX,QAAQ,GAAG,CAAC,CAAC;IAC/B4C,KAAK,EAAElC,IAAI,CAACC,IAAI,CAACX,QAAQ,GAAG,CAAC,CAAC;IAC9B6C,WAAW,EAAEnC,IAAI,CAACC,IAAI,CAACX,QAAQ,GAAG,CAAC,CAAC;IAAE;IACtC8C,aAAa,EAAEpC,IAAI,CAACC,IAAI,CAACX,QAAQ,GAAG,CAAC,CAAC,CAAE;EAC1C,CAAC;AACH;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACE,OAAO,SAAS+C,0BAA0BA,CAAChD,WAAW,EAAE;EACtD;EACA,MAAMiD,SAAS,GAAG,CAChB,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,WAAW,EACpE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE,SAAS,EAChE,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,OAAO,EAAE,SAAS,EAClE,gBAAgB,EAAE,SAAS,EAAE,QAAQ,EAAE,UAAU,EAAE,aAAa,CACjE;;EAED;EACA,MAAM1B,gBAAgB,GAAGvB,WAAW,CAACqB,WAAW,CAAC,CAAC;EAClD,OAAO4B,SAAS,CAAClB,IAAI,CAACmB,OAAO,IAAI3B,gBAAgB,CAACJ,QAAQ,CAAC+B,OAAO,CAAC,CAAC;AACtE;;AAEA;AACF;AACA;AACA;AACA;AACA;AACE,OAAO,SAASC,0BAA0BA,CAACnD,WAAW,EAAE;EACtD,MAAMoD,eAAe,GAAGJ,0BAA0B,CAAChD,WAAW,CAAC;EAE/D,MAAMqD,aAAa,GAAG,CACpB;IAAE/C,IAAI,EAAE,sBAAsB;IAAEG,SAAS,EAAE;EAAK,CAAC,EACjD;IAAEH,IAAI,EAAE,oBAAoB;IAAEG,SAAS,EAAE;EAAK,CAAC,EAC/C;IAAEH,IAAI,EAAE,uBAAuB;IAAEG,SAAS,EAAE;EAAK,CAAC,EAClD;IAAEH,IAAI,EAAE,wBAAwB;IAAEG,SAAS,EAAE;EAAK,CAAC,EACnD;IAAEH,IAAI,EAAE,mBAAmB;IAAEG,SAAS,EAAE;EAAK,CAAC,EAC9C;IAAEH,IAAI,EAAE,wBAAwB;IAAEG,SAAS,EAAE;EAAK,CAAC,CACpD;EAED,IAAI2C,eAAe,EAAE;IACnB,OAAO,CACL,GAAGC,aAAa,EAChB;MAAE/C,IAAI,EAAE,UAAU;MAAEG,SAAS,EAAE;IAAK,CAAC,EACrC;MAAEH,IAAI,EAAE,oBAAoB;MAAEG,SAAS,EAAE;IAAK,CAAC,EAC/C;MAAEH,IAAI,EAAE,gCAAgC;MAAEG,SAAS,EAAE;IAAM,CAAC,EAC5D;MAAEH,IAAI,EAAE,qBAAqB;MAAEG,SAAS,EAAE;IAAM,CAAC,EACjD;MAAEH,IAAI,EAAE,wBAAwB;MAAEG,SAAS,EAAE;IAAM,CAAC,EACpD;MAAEH,IAAI,EAAE,sBAAsB;MAAEG,SAAS,EAAE;IAAM,CAAC,EAClD;MAAEH,IAAI,EAAE,qBAAqB;MAAEG,SAAS,EAAE;IAAM,CAAC,CAClD;EACH;EAEA,OAAO4C,aAAa;AACtB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}