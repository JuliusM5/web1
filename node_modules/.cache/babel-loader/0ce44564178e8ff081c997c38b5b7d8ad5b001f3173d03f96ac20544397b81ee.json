{"ast":null,"code":"/**\r\n * Utilities for previewing settings changes\r\n */import translations from'./translations';// Map of preview elements for different settings\nconst previewElements={};/**\r\n * Create or update a preview element for settings previews\r\n * \r\n * @param {string} id Unique identifier for the preview\r\n * @param {Object} settings Settings to preview\r\n * @param {string} type Type of preview (appearance, currency, date, accessibility, darkMode)\r\n * @param {string} language Current language code\r\n * @returns {HTMLElement} The preview element\r\n */export const createSettingsPreview=function(id,settings,type){let language=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'en-US';// Create a translate function for the current language\nconst t=createTranslateFunction(language);// Check if we already have a preview element for this ID\nlet previewElement=previewElements[id];if(!previewElement){// Create a new preview element\npreviewElement=document.createElement('div');previewElement.id=`settings-preview-${id}`;previewElement.style.position='fixed';previewElement.style.bottom='20px';previewElement.style.right='20px';previewElement.style.padding='10px';previewElement.style.borderRadius='6px';previewElement.style.boxShadow='0 4px 6px rgba(0, 0, 0, 0.1)';previewElement.style.zIndex='9999';previewElement.style.transition='all 0.3s ease';// Add to document\ndocument.body.appendChild(previewElement);// Store for future use\npreviewElements[id]=previewElement;}// Update the preview based on type\nif(type==='appearance'){updateAppearancePreview(previewElement,settings.appearance,t);}else if(type==='currency'){updateCurrencyPreview(previewElement,settings.preferences,t);}else if(type==='date'){updateDatePreview(previewElement,settings.preferences,t);}else if(type==='accessibility'){updateAccessibilityPreview(previewElement,settings.accessibility,t);}else if(type==='darkMode'){updateDarkModePreview(previewElement,settings.appearance,t);}// Show the preview\npreviewElement.style.display='block';// Return the element\nreturn previewElement;};/**\r\n * Create a translation function for the specified language\r\n * \r\n * @param {string} language Language code (e.g., 'en-US', 'es-ES')\r\n * @returns {Function} Translation function\r\n */const createTranslateFunction=language=>{const defaultLanguage='en-US';// Return a translation function that gets strings for the specified language\nreturn function(key){var _translations$languag,_translations$default;let replacements=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};// Get the translation from the current language or fall back to default\nlet translation=((_translations$languag=translations[language])===null||_translations$languag===void 0?void 0:_translations$languag[key])||((_translations$default=translations[defaultLanguage])===null||_translations$default===void 0?void 0:_translations$default[key])||key;// Replace placeholders with actual values\nObject.entries(replacements).forEach(_ref=>{let[placeholder,value]=_ref;translation=translation.replace(`{${placeholder}}`,value);});return translation;};};/**\r\n * Hide a preview element\r\n * \r\n * @param {string} id Unique identifier for the preview\r\n */export const hideSettingsPreview=id=>{const previewElement=previewElements[id];if(previewElement){previewElement.style.display='none';}};/**\r\n * Update appearance preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} appearance Appearance settings\r\n * @param {Function} t Translation function\r\n */const updateAppearancePreview=(element,appearance,t)=>{// Set background color based on color scheme\nconst colorMap={'blue':'#3b82f6','purple':'#8b5cf6','green':'#10b981','red':'#ef4444','amber':'#f59e0b','indigo':'#6366f1'};// Set font size based on setting\nconst fontSizeMap={'small':'14px','medium':'16px','large':'18px'};// Get dark mode status\nconst isDarkMode=appearance.darkMode||false;// Update preview styles based on dark mode\nif(isDarkMode){element.style.backgroundColor='#1e1e1e';element.style.color='white';element.style.borderLeft=`4px solid ${colorMap[appearance.colorScheme]||'#3b82f6'}`;}else{element.style.backgroundColor='white';element.style.color='#333';element.style.borderLeft=`4px solid ${colorMap[appearance.colorScheme]||'#3b82f6'}`;}element.style.fontSize=fontSizeMap[appearance.fontSize]||'16px';// Update content\nelement.innerHTML=`\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">${t('settings.preview.theme')}</div>\n    <div>${t('settings.preview.color')}: ${t(`settings.colors.${appearance.colorScheme}`)}</div>\n    <div>${t('settings.preview.fontSize')}: ${t(`settings.fontSizes.${appearance.fontSize}`)}</div>\n    <div>${t('settings.preview.darkMode')}: ${isDarkMode?t('settings.preview.on'):t('settings.preview.off')}</div>\n    <div style=\"margin-top: 8px; text-align: center; font-size: 12px;\">${t('settings.preview.changesWillApply')}</div>\n  `;};/**\r\n * Update dark mode preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} appearance Appearance settings\r\n * @param {Function} t Translation function\r\n */const updateDarkModePreview=(element,appearance,t)=>{const isDarkMode=appearance.darkMode||false;// Style the preview element\nif(isDarkMode){element.style.backgroundColor='#1e1e1e';element.style.color='#e0e0e0';element.style.border='1px solid #444';}else{element.style.backgroundColor='white';element.style.color='#333';element.style.border='1px solid #d1d5db';}// Sample content to demonstrate dark mode\nelement.innerHTML=`\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">${t('settings.preview.darkModeTitle')}</div>\n    <div style=\"display: flex; gap: 10px; margin-bottom: 10px;\">\n      <div style=\"width: 60px; height: 30px; background-color: ${isDarkMode?'#333':'#f3f4f6'}; border: 1px solid ${isDarkMode?'#555':'#d1d5db'}; display: flex; align-items: center; justify-content: center; font-size: 12px;\">${t('form.button')}</div>\n      <div style=\"width: 60px; height: 30px; background-color: ${isDarkMode?'#3b82f6':'#3b82f6'}; color: white; display: flex; align-items: center; justify-content: center; font-size: 12px;\">${t('form.primary')}</div>\n    </div>\n    <div style=\"padding: 8px; background-color: ${isDarkMode?'#333':'#f9fafb'}; border-radius: 4px; margin-bottom: 10px; font-size: 12px;\">\n      ${t('settings.preview.cardsAppearance',{mode:isDarkMode?t('settings.preview.dark'):t('settings.preview.light')})}\n    </div>\n    <div style=\"margin-top: 8px; text-align: center; font-size: 12px;\">${t('settings.preview.changesWillApply')}</div>\n  `;};/**\r\n * Update currency preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} preferences Preference settings\r\n * @param {Function} t Translation function\r\n */const updateCurrencyPreview=(element,preferences,t)=>{const currencyCode=preferences.defaultCurrency||'USD';// Currency symbol mapping\nconst currencySymbols={'USD':'$','EUR':'€','GBP':'£','JPY':'¥','CAD':'CA$','AUD':'AU$','CNY':'¥','INR':'₹'};const symbol=currencySymbols[currencyCode]||currencyCode;// Sample amount\nconst sampleAmount=1234.56;// Format the amount\nlet formattedAmount;if(currencyCode==='JPY'||currencyCode==='CNY'){formattedAmount=Math.round(sampleAmount).toLocaleString();}else{formattedAmount=sampleAmount.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g,'$&,');}// Update preview element\nelement.style.backgroundColor='#f0f9ff';element.style.color='#0369a1';element.style.border='1px solid #bae6fd';// Update content\nelement.innerHTML=`\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">${t('settings.preview.currencyTitle')}</div>\n    <div style=\"font-size: 18px; margin-bottom: 5px;\">${symbol}${formattedAmount}</div>\n    <div style=\"font-size: 12px;\">${t('settings.preview.currency')}: ${currencyCode}</div>\n    <div style=\"margin-top: 8px; text-align: center; font-size: 12px;\">${t('settings.preview.changesWillApply')}</div>\n  `;};/**\r\n * Update date preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} preferences Preference settings\r\n * @param {Function} t Translation function\r\n */const updateDatePreview=(element,preferences,t)=>{const format=preferences.dateFormat||'MM/DD/YYYY';// Current date\nconst now=new Date();// Format the date based on the selected format\nlet formattedDate;switch(format){case'DD/MM/YYYY':formattedDate=`${padZero(now.getDate())}/${padZero(now.getMonth()+1)}/${now.getFullYear()}`;break;case'YYYY-MM-DD':formattedDate=`${now.getFullYear()}-${padZero(now.getMonth()+1)}-${padZero(now.getDate())}`;break;case'MMMM D, YYYY':formattedDate=`${getMonthName(now.getMonth(),t)} ${now.getDate()}, ${now.getFullYear()}`;break;case'D MMMM YYYY':formattedDate=`${now.getDate()} ${getMonthName(now.getMonth(),t)} ${now.getFullYear()}`;break;case'MM/DD/YYYY':default:formattedDate=`${padZero(now.getMonth()+1)}/${padZero(now.getDate())}/${now.getFullYear()}`;break;}// Update preview element\nelement.style.backgroundColor='#f0fdf4';element.style.color='#166534';element.style.border='1px solid #86efac';// Update content\nelement.innerHTML=`\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">${t('settings.preview.dateFormatTitle')}</div>\n    <div style=\"font-size: 18px; margin-bottom: 5px;\">${formattedDate}</div>\n    <div style=\"font-size: 12px;\">${t('settings.preview.format')}: ${format}</div>\n    <div style=\"margin-top: 8px; text-align: center; font-size: 12px;\">${t('settings.preview.changesWillApply')}</div>\n  `;};/**\r\n * Update accessibility preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} accessibility Accessibility settings\r\n * @param {Function} t Translation function\r\n */const updateAccessibilityPreview=(element,accessibility,t)=>{const highContrast=accessibility.highContrast||false;const largerClickTargets=accessibility.largerClickTargets||false;const textScaling=accessibility.textScaling||100;// Style the preview element\nif(highContrast){element.style.backgroundColor='black';element.style.color='white';element.style.border='2px solid white';}else{element.style.backgroundColor='#f3f4f6';element.style.color='#1f2937';element.style.border='1px solid #d1d5db';}// Apply text scaling\nconst scaleFactor=textScaling/100;// Update content\nelement.innerHTML=`\n    <div style=\"font-weight: bold; margin-bottom: 5px; font-size: ${16*scaleFactor}px;\">${t('settings.preview.accessibilityTitle')}</div>\n    <div style=\"margin-bottom: 10px; font-size: ${14*scaleFactor}px;\">\n      <div>${t('settings.preview.highContrast')}: ${highContrast?t('settings.preview.on'):t('settings.preview.off')}</div>\n      <div>${t('settings.preview.largerTargets')}: ${largerClickTargets?t('settings.preview.on'):t('settings.preview.off')}</div>\n      <div>${t('settings.preview.textScale')}: ${textScaling}%</div>\n    </div>\n    <div style=\"display: flex; gap: 5px; margin-bottom: 5px;\">\n      <button style=\"\n        padding: ${largerClickTargets?'12px':'6px'} ${largerClickTargets?'16px':'8px'};\n        background-color: ${highContrast?'black':'#e5e7eb'};\n        color: ${highContrast?'yellow':'#374151'};\n        border: ${highContrast?'2px solid white':'1px solid #d1d5db'};\n        font-size: ${12*scaleFactor}px;\n      \">${t('form.button')}</button>\n      <button style=\"\n        padding: ${largerClickTargets?'12px':'6px'} ${largerClickTargets?'16px':'8px'};\n        background-color: ${highContrast?'yellow':'#3b82f6'};\n        color: ${highContrast?'black':'white'};\n        border: none;\n        font-size: ${12*scaleFactor}px;\n      \">${t('form.primary')}</button>\n    </div>\n    <div style=\"margin-top: 8px; text-align: center; font-size: ${12*scaleFactor}px;\">\n      ${t('settings.preview.changesWillApply')}\n    </div>\n  `;};// Helper functions\nconst padZero=num=>{return num.toString().padStart(2,'0');};const getMonthName=(monthIndex,t)=>{return t(`date.month.${monthIndex}`);};","map":{"version":3,"names":["translations","previewElements","createSettingsPreview","id","settings","type","language","arguments","length","undefined","t","createTranslateFunction","previewElement","document","createElement","style","position","bottom","right","padding","borderRadius","boxShadow","zIndex","transition","body","appendChild","updateAppearancePreview","appearance","updateCurrencyPreview","preferences","updateDatePreview","updateAccessibilityPreview","accessibility","updateDarkModePreview","display","defaultLanguage","key","_translations$languag","_translations$default","replacements","translation","Object","entries","forEach","_ref","placeholder","value","replace","hideSettingsPreview","element","colorMap","fontSizeMap","isDarkMode","darkMode","backgroundColor","color","borderLeft","colorScheme","fontSize","innerHTML","border","mode","currencyCode","defaultCurrency","currencySymbols","symbol","sampleAmount","formattedAmount","Math","round","toLocaleString","toFixed","format","dateFormat","now","Date","formattedDate","padZero","getDate","getMonth","getFullYear","getMonthName","highContrast","largerClickTargets","textScaling","scaleFactor","num","toString","padStart","monthIndex"],"sources":["C:/Users/juliu/Desktop/web/src/utils/settingsPreviewUtils.js"],"sourcesContent":["/**\r\n * Utilities for previewing settings changes\r\n */\r\nimport translations from './translations';\r\n\r\n// Map of preview elements for different settings\r\nconst previewElements = {};\r\n\r\n/**\r\n * Create or update a preview element for settings previews\r\n * \r\n * @param {string} id Unique identifier for the preview\r\n * @param {Object} settings Settings to preview\r\n * @param {string} type Type of preview (appearance, currency, date, accessibility, darkMode)\r\n * @param {string} language Current language code\r\n * @returns {HTMLElement} The preview element\r\n */\r\nexport const createSettingsPreview = (id, settings, type, language = 'en-US') => {\r\n  // Create a translate function for the current language\r\n  const t = createTranslateFunction(language);\r\n  \r\n  // Check if we already have a preview element for this ID\r\n  let previewElement = previewElements[id];\r\n  \r\n  if (!previewElement) {\r\n    // Create a new preview element\r\n    previewElement = document.createElement('div');\r\n    previewElement.id = `settings-preview-${id}`;\r\n    previewElement.style.position = 'fixed';\r\n    previewElement.style.bottom = '20px';\r\n    previewElement.style.right = '20px';\r\n    previewElement.style.padding = '10px';\r\n    previewElement.style.borderRadius = '6px';\r\n    previewElement.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';\r\n    previewElement.style.zIndex = '9999';\r\n    previewElement.style.transition = 'all 0.3s ease';\r\n    \r\n    // Add to document\r\n    document.body.appendChild(previewElement);\r\n    \r\n    // Store for future use\r\n    previewElements[id] = previewElement;\r\n  }\r\n  \r\n  // Update the preview based on type\r\n  if (type === 'appearance') {\r\n    updateAppearancePreview(previewElement, settings.appearance, t);\r\n  } else if (type === 'currency') {\r\n    updateCurrencyPreview(previewElement, settings.preferences, t);\r\n  } else if (type === 'date') {\r\n    updateDatePreview(previewElement, settings.preferences, t);\r\n  } else if (type === 'accessibility') {\r\n    updateAccessibilityPreview(previewElement, settings.accessibility, t);\r\n  } else if (type === 'darkMode') {\r\n    updateDarkModePreview(previewElement, settings.appearance, t);\r\n  }\r\n  \r\n  // Show the preview\r\n  previewElement.style.display = 'block';\r\n  \r\n  // Return the element\r\n  return previewElement;\r\n};\r\n\r\n/**\r\n * Create a translation function for the specified language\r\n * \r\n * @param {string} language Language code (e.g., 'en-US', 'es-ES')\r\n * @returns {Function} Translation function\r\n */\r\nconst createTranslateFunction = (language) => {\r\n  const defaultLanguage = 'en-US';\r\n  \r\n  // Return a translation function that gets strings for the specified language\r\n  return (key, replacements = {}) => {\r\n    // Get the translation from the current language or fall back to default\r\n    let translation = translations[language]?.[key] || translations[defaultLanguage]?.[key] || key;\r\n    \r\n    // Replace placeholders with actual values\r\n    Object.entries(replacements).forEach(([placeholder, value]) => {\r\n      translation = translation.replace(`{${placeholder}}`, value);\r\n    });\r\n    \r\n    return translation;\r\n  };\r\n};\r\n\r\n/**\r\n * Hide a preview element\r\n * \r\n * @param {string} id Unique identifier for the preview\r\n */\r\nexport const hideSettingsPreview = (id) => {\r\n  const previewElement = previewElements[id];\r\n  \r\n  if (previewElement) {\r\n    previewElement.style.display = 'none';\r\n  }\r\n};\r\n\r\n/**\r\n * Update appearance preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} appearance Appearance settings\r\n * @param {Function} t Translation function\r\n */\r\nconst updateAppearancePreview = (element, appearance, t) => {\r\n  // Set background color based on color scheme\r\n  const colorMap = {\r\n    'blue': '#3b82f6',\r\n    'purple': '#8b5cf6',\r\n    'green': '#10b981',\r\n    'red': '#ef4444',\r\n    'amber': '#f59e0b',\r\n    'indigo': '#6366f1'\r\n  };\r\n  \r\n  // Set font size based on setting\r\n  const fontSizeMap = {\r\n    'small': '14px',\r\n    'medium': '16px',\r\n    'large': '18px'\r\n  };\r\n  \r\n  // Get dark mode status\r\n  const isDarkMode = appearance.darkMode || false;\r\n  \r\n  // Update preview styles based on dark mode\r\n  if (isDarkMode) {\r\n    element.style.backgroundColor = '#1e1e1e';\r\n    element.style.color = 'white';\r\n    element.style.borderLeft = `4px solid ${colorMap[appearance.colorScheme] || '#3b82f6'}`;\r\n  } else {\r\n    element.style.backgroundColor = 'white';\r\n    element.style.color = '#333';\r\n    element.style.borderLeft = `4px solid ${colorMap[appearance.colorScheme] || '#3b82f6'}`;\r\n  }\r\n  \r\n  element.style.fontSize = fontSizeMap[appearance.fontSize] || '16px';\r\n  \r\n  // Update content\r\n  element.innerHTML = `\r\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">${t('settings.preview.theme')}</div>\r\n    <div>${t('settings.preview.color')}: ${t(`settings.colors.${appearance.colorScheme}`)}</div>\r\n    <div>${t('settings.preview.fontSize')}: ${t(`settings.fontSizes.${appearance.fontSize}`)}</div>\r\n    <div>${t('settings.preview.darkMode')}: ${isDarkMode ? t('settings.preview.on') : t('settings.preview.off')}</div>\r\n    <div style=\"margin-top: 8px; text-align: center; font-size: 12px;\">${t('settings.preview.changesWillApply')}</div>\r\n  `;\r\n};\r\n\r\n/**\r\n * Update dark mode preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} appearance Appearance settings\r\n * @param {Function} t Translation function\r\n */\r\nconst updateDarkModePreview = (element, appearance, t) => {\r\n  const isDarkMode = appearance.darkMode || false;\r\n  \r\n  // Style the preview element\r\n  if (isDarkMode) {\r\n    element.style.backgroundColor = '#1e1e1e';\r\n    element.style.color = '#e0e0e0';\r\n    element.style.border = '1px solid #444';\r\n  } else {\r\n    element.style.backgroundColor = 'white';\r\n    element.style.color = '#333';\r\n    element.style.border = '1px solid #d1d5db';\r\n  }\r\n  \r\n  // Sample content to demonstrate dark mode\r\n  element.innerHTML = `\r\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">${t('settings.preview.darkModeTitle')}</div>\r\n    <div style=\"display: flex; gap: 10px; margin-bottom: 10px;\">\r\n      <div style=\"width: 60px; height: 30px; background-color: ${isDarkMode ? '#333' : '#f3f4f6'}; border: 1px solid ${isDarkMode ? '#555' : '#d1d5db'}; display: flex; align-items: center; justify-content: center; font-size: 12px;\">${t('form.button')}</div>\r\n      <div style=\"width: 60px; height: 30px; background-color: ${isDarkMode ? '#3b82f6' : '#3b82f6'}; color: white; display: flex; align-items: center; justify-content: center; font-size: 12px;\">${t('form.primary')}</div>\r\n    </div>\r\n    <div style=\"padding: 8px; background-color: ${isDarkMode ? '#333' : '#f9fafb'}; border-radius: 4px; margin-bottom: 10px; font-size: 12px;\">\r\n      ${t('settings.preview.cardsAppearance', { mode: isDarkMode ? t('settings.preview.dark') : t('settings.preview.light') })}\r\n    </div>\r\n    <div style=\"margin-top: 8px; text-align: center; font-size: 12px;\">${t('settings.preview.changesWillApply')}</div>\r\n  `;\r\n};\r\n\r\n/**\r\n * Update currency preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} preferences Preference settings\r\n * @param {Function} t Translation function\r\n */\r\nconst updateCurrencyPreview = (element, preferences, t) => {\r\n  const currencyCode = preferences.defaultCurrency || 'USD';\r\n  \r\n  // Currency symbol mapping\r\n  const currencySymbols = {\r\n    'USD': '$',\r\n    'EUR': '€',\r\n    'GBP': '£',\r\n    'JPY': '¥',\r\n    'CAD': 'CA$',\r\n    'AUD': 'AU$',\r\n    'CNY': '¥',\r\n    'INR': '₹'\r\n  };\r\n  \r\n  const symbol = currencySymbols[currencyCode] || currencyCode;\r\n  \r\n  // Sample amount\r\n  const sampleAmount = 1234.56;\r\n  \r\n  // Format the amount\r\n  let formattedAmount;\r\n  if (currencyCode === 'JPY' || currencyCode === 'CNY') {\r\n    formattedAmount = Math.round(sampleAmount).toLocaleString();\r\n  } else {\r\n    formattedAmount = sampleAmount.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n  }\r\n  \r\n  // Update preview element\r\n  element.style.backgroundColor = '#f0f9ff';\r\n  element.style.color = '#0369a1';\r\n  element.style.border = '1px solid #bae6fd';\r\n  \r\n  // Update content\r\n  element.innerHTML = `\r\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">${t('settings.preview.currencyTitle')}</div>\r\n    <div style=\"font-size: 18px; margin-bottom: 5px;\">${symbol}${formattedAmount}</div>\r\n    <div style=\"font-size: 12px;\">${t('settings.preview.currency')}: ${currencyCode}</div>\r\n    <div style=\"margin-top: 8px; text-align: center; font-size: 12px;\">${t('settings.preview.changesWillApply')}</div>\r\n  `;\r\n};\r\n\r\n/**\r\n * Update date preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} preferences Preference settings\r\n * @param {Function} t Translation function\r\n */\r\nconst updateDatePreview = (element, preferences, t) => {\r\n  const format = preferences.dateFormat || 'MM/DD/YYYY';\r\n  \r\n  // Current date\r\n  const now = new Date();\r\n  \r\n  // Format the date based on the selected format\r\n  let formattedDate;\r\n  switch (format) {\r\n    case 'DD/MM/YYYY':\r\n      formattedDate = `${padZero(now.getDate())}/${padZero(now.getMonth() + 1)}/${now.getFullYear()}`;\r\n      break;\r\n    case 'YYYY-MM-DD':\r\n      formattedDate = `${now.getFullYear()}-${padZero(now.getMonth() + 1)}-${padZero(now.getDate())}`;\r\n      break;\r\n    case 'MMMM D, YYYY':\r\n      formattedDate = `${getMonthName(now.getMonth(), t)} ${now.getDate()}, ${now.getFullYear()}`;\r\n      break;\r\n    case 'D MMMM YYYY':\r\n      formattedDate = `${now.getDate()} ${getMonthName(now.getMonth(), t)} ${now.getFullYear()}`;\r\n      break;\r\n    case 'MM/DD/YYYY':\r\n    default:\r\n      formattedDate = `${padZero(now.getMonth() + 1)}/${padZero(now.getDate())}/${now.getFullYear()}`;\r\n      break;\r\n  }\r\n  \r\n  // Update preview element\r\n  element.style.backgroundColor = '#f0fdf4';\r\n  element.style.color = '#166534';\r\n  element.style.border = '1px solid #86efac';\r\n  \r\n  // Update content\r\n  element.innerHTML = `\r\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">${t('settings.preview.dateFormatTitle')}</div>\r\n    <div style=\"font-size: 18px; margin-bottom: 5px;\">${formattedDate}</div>\r\n    <div style=\"font-size: 12px;\">${t('settings.preview.format')}: ${format}</div>\r\n    <div style=\"margin-top: 8px; text-align: center; font-size: 12px;\">${t('settings.preview.changesWillApply')}</div>\r\n  `;\r\n};\r\n\r\n/**\r\n * Update accessibility preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} accessibility Accessibility settings\r\n * @param {Function} t Translation function\r\n */\r\nconst updateAccessibilityPreview = (element, accessibility, t) => {\r\n  const highContrast = accessibility.highContrast || false;\r\n  const largerClickTargets = accessibility.largerClickTargets || false;\r\n  const textScaling = accessibility.textScaling || 100;\r\n  \r\n  // Style the preview element\r\n  if (highContrast) {\r\n    element.style.backgroundColor = 'black';\r\n    element.style.color = 'white';\r\n    element.style.border = '2px solid white';\r\n  } else {\r\n    element.style.backgroundColor = '#f3f4f6';\r\n    element.style.color = '#1f2937';\r\n    element.style.border = '1px solid #d1d5db';\r\n  }\r\n  \r\n  // Apply text scaling\r\n  const scaleFactor = textScaling / 100;\r\n  \r\n  // Update content\r\n  element.innerHTML = `\r\n    <div style=\"font-weight: bold; margin-bottom: 5px; font-size: ${16 * scaleFactor}px;\">${t('settings.preview.accessibilityTitle')}</div>\r\n    <div style=\"margin-bottom: 10px; font-size: ${14 * scaleFactor}px;\">\r\n      <div>${t('settings.preview.highContrast')}: ${highContrast ? t('settings.preview.on') : t('settings.preview.off')}</div>\r\n      <div>${t('settings.preview.largerTargets')}: ${largerClickTargets ? t('settings.preview.on') : t('settings.preview.off')}</div>\r\n      <div>${t('settings.preview.textScale')}: ${textScaling}%</div>\r\n    </div>\r\n    <div style=\"display: flex; gap: 5px; margin-bottom: 5px;\">\r\n      <button style=\"\r\n        padding: ${largerClickTargets ? '12px' : '6px'} ${largerClickTargets ? '16px' : '8px'};\r\n        background-color: ${highContrast ? 'black' : '#e5e7eb'};\r\n        color: ${highContrast ? 'yellow' : '#374151'};\r\n        border: ${highContrast ? '2px solid white' : '1px solid #d1d5db'};\r\n        font-size: ${12 * scaleFactor}px;\r\n      \">${t('form.button')}</button>\r\n      <button style=\"\r\n        padding: ${largerClickTargets ? '12px' : '6px'} ${largerClickTargets ? '16px' : '8px'};\r\n        background-color: ${highContrast ? 'yellow' : '#3b82f6'};\r\n        color: ${highContrast ? 'black' : 'white'};\r\n        border: none;\r\n        font-size: ${12 * scaleFactor}px;\r\n      \">${t('form.primary')}</button>\r\n    </div>\r\n    <div style=\"margin-top: 8px; text-align: center; font-size: ${12 * scaleFactor}px;\">\r\n      ${t('settings.preview.changesWillApply')}\r\n    </div>\r\n  `;\r\n};\r\n\r\n// Helper functions\r\nconst padZero = (num) => {\r\n  return num.toString().padStart(2, '0');\r\n};\r\n\r\nconst getMonthName = (monthIndex, t) => {\r\n  return t(`date.month.${monthIndex}`);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}