{"ast":null,"code":"// src/services/MobileSubscriptionService.web.js\n\n/**\r\n * Web implementation of MobileSubscriptionService\r\n * This version is used when running in a browser environment\r\n */\nclass MobileSubscriptionService {\n  constructor() {\n    this.storage = window.localStorage;\n    this.isWeb = true;\n  }\n\n  /**\r\n   * Initialize the subscription service\r\n   */\n  async initialize() {\n    // Nothing to initialize in web version\n    return {\n      success: true\n    };\n  }\n\n  /**\r\n   * Get subscription status\r\n   */\n  async getSubscriptionStatus() {\n    try {\n      // Check for a web receipt (from code activation)\n      const webReceipt = this.storage.getItem('mobile_web_receipt');\n      if (webReceipt) {\n        try {\n          const receiptData = JSON.parse(webReceipt);\n          const currentTime = new Date().getTime();\n\n          // Check if the receipt has an expiry date\n          if (receiptData.expiresAt && new Date(receiptData.expiresAt) > new Date()) {\n            return {\n              isSubscribed: true,\n              plan: receiptData.plan || 'premium',\n              expiresAt: receiptData.expiresAt,\n              source: 'web_code'\n            };\n          }\n        } catch (err) {\n          console.error('Error parsing web receipt:', err);\n          // Continue to check other methods\n        }\n      }\n\n      // Check for a web token in localStorage\n      const token = this.storage.getItem('subscription_token');\n      const expiryDate = this.storage.getItem('subscription_expiry');\n      if (token && expiryDate && new Date(expiryDate) > new Date()) {\n        return {\n          isSubscribed: true,\n          plan: this.storage.getItem('subscription_plan') || 'premium',\n          expiresAt: expiryDate,\n          source: 'web'\n        };\n      }\n\n      // No valid subscription found\n      return {\n        isSubscribed: false,\n        plan: null,\n        expiresAt: null\n      };\n    } catch (error) {\n      console.error('Error getting subscription status:', error);\n      return {\n        isSubscribed: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\r\n   * Activate subscription with web access code\r\n   */\n  async activateWithCode(code) {\n    try {\n      // Validate code format\n      if (!code || !/^[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}$/.test(code)) {\n        return {\n          success: false,\n          error: 'Invalid code format'\n        };\n      }\n\n      // In a real implementation, this would make an API call\n      // For now, we'll simulate a successful activation\n      const response = await fetch('/api/mobile/activate-code', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          code,\n          platform: 'web'\n        })\n      });\n\n      // For development, simulate success if API is not available\n      let result;\n      try {\n        result = await response.json();\n      } catch (err) {\n        console.warn('API not available, using mock response');\n\n        // Generate mock expiry date (30 days from now)\n        const expiryDate = new Date();\n        expiryDate.setDate(expiryDate.getDate() + 30);\n        result = {\n          success: true,\n          webReceipt: JSON.stringify({\n            accessToken: 'mock_token_' + Date.now(),\n            code: code,\n            expiresAt: expiryDate.toISOString(),\n            plan: 'premium'\n          }),\n          plan: 'premium',\n          expiresAt: expiryDate.toISOString()\n        };\n      }\n      if (!result.success) {\n        return result; // Pass through the error\n      }\n\n      // Store the receipt\n      this.storage.setItem('mobile_web_receipt', result.webReceipt);\n\n      // Also store standard web tokens for compatibility\n      const receiptData = JSON.parse(result.webReceipt);\n      this.storage.setItem('subscription_token', receiptData.accessToken);\n      this.storage.setItem('subscription_expiry', result.expiresAt);\n      this.storage.setItem('subscription_plan', result.plan);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Code activation error:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to activate code'\n      };\n    }\n  }\n\n  /**\r\n   * Restore purchases from app store\r\n   */\n  async restorePurchases() {\n    // Not applicable for web\n    return {\n      success: false,\n      message: 'Not applicable in web environment'\n    };\n  }\n}\nexport default new MobileSubscriptionService();","map":{"version":3,"names":["MobileSubscriptionService","constructor","storage","window","localStorage","isWeb","initialize","success","getSubscriptionStatus","webReceipt","getItem","receiptData","JSON","parse","currentTime","Date","getTime","expiresAt","isSubscribed","plan","source","err","console","error","token","expiryDate","message","activateWithCode","code","test","response","fetch","method","headers","body","stringify","platform","result","json","warn","setDate","getDate","accessToken","now","toISOString","setItem","restorePurchases"],"sources":["C:/Users/juliu/Desktop/web/src/services/MobileSubscriptionService.web.js"],"sourcesContent":["// src/services/MobileSubscriptionService.web.js\r\n\r\n/**\r\n * Web implementation of MobileSubscriptionService\r\n * This version is used when running in a browser environment\r\n */\r\nclass MobileSubscriptionService {\r\n  constructor() {\r\n    this.storage = window.localStorage;\r\n    this.isWeb = true;\r\n  }\r\n\r\n  /**\r\n   * Initialize the subscription service\r\n   */\r\n  async initialize() {\r\n    // Nothing to initialize in web version\r\n    return { success: true };\r\n  }\r\n\r\n  /**\r\n   * Get subscription status\r\n   */\r\n  async getSubscriptionStatus() {\r\n    try {\r\n      // Check for a web receipt (from code activation)\r\n      const webReceipt = this.storage.getItem('mobile_web_receipt');\r\n      \r\n      if (webReceipt) {\r\n        try {\r\n          const receiptData = JSON.parse(webReceipt);\r\n          const currentTime = new Date().getTime();\r\n          \r\n          // Check if the receipt has an expiry date\r\n          if (receiptData.expiresAt && new Date(receiptData.expiresAt) > new Date()) {\r\n            return {\r\n              isSubscribed: true,\r\n              plan: receiptData.plan || 'premium',\r\n              expiresAt: receiptData.expiresAt,\r\n              source: 'web_code'\r\n            };\r\n          }\r\n        } catch (err) {\r\n          console.error('Error parsing web receipt:', err);\r\n          // Continue to check other methods\r\n        }\r\n      }\r\n      \r\n      // Check for a web token in localStorage\r\n      const token = this.storage.getItem('subscription_token');\r\n      const expiryDate = this.storage.getItem('subscription_expiry');\r\n      \r\n      if (token && expiryDate && new Date(expiryDate) > new Date()) {\r\n        return {\r\n          isSubscribed: true,\r\n          plan: this.storage.getItem('subscription_plan') || 'premium',\r\n          expiresAt: expiryDate,\r\n          source: 'web'\r\n        };\r\n      }\r\n      \r\n      // No valid subscription found\r\n      return {\r\n        isSubscribed: false,\r\n        plan: null,\r\n        expiresAt: null\r\n      };\r\n    } catch (error) {\r\n      console.error('Error getting subscription status:', error);\r\n      return {\r\n        isSubscribed: false,\r\n        error: error.message\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Activate subscription with web access code\r\n   */\r\n  async activateWithCode(code) {\r\n    try {\r\n      // Validate code format\r\n      if (!code || !/^[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}$/.test(code)) {\r\n        return { success: false, error: 'Invalid code format' };\r\n      }\r\n      \r\n      // In a real implementation, this would make an API call\r\n      // For now, we'll simulate a successful activation\r\n      const response = await fetch('/api/mobile/activate-code', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          code,\r\n          platform: 'web'\r\n        })\r\n      });\r\n      \r\n      // For development, simulate success if API is not available\r\n      let result;\r\n      try {\r\n        result = await response.json();\r\n      } catch (err) {\r\n        console.warn('API not available, using mock response');\r\n        \r\n        // Generate mock expiry date (30 days from now)\r\n        const expiryDate = new Date();\r\n        expiryDate.setDate(expiryDate.getDate() + 30);\r\n        \r\n        result = {\r\n          success: true,\r\n          webReceipt: JSON.stringify({\r\n            accessToken: 'mock_token_' + Date.now(),\r\n            code: code,\r\n            expiresAt: expiryDate.toISOString(),\r\n            plan: 'premium'\r\n          }),\r\n          plan: 'premium',\r\n          expiresAt: expiryDate.toISOString()\r\n        };\r\n      }\r\n      \r\n      if (!result.success) {\r\n        return result; // Pass through the error\r\n      }\r\n      \r\n      // Store the receipt\r\n      this.storage.setItem('mobile_web_receipt', result.webReceipt);\r\n      \r\n      // Also store standard web tokens for compatibility\r\n      const receiptData = JSON.parse(result.webReceipt);\r\n      this.storage.setItem('subscription_token', receiptData.accessToken);\r\n      this.storage.setItem('subscription_expiry', result.expiresAt);\r\n      this.storage.setItem('subscription_plan', result.plan);\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Code activation error:', error);\r\n      return { success: false, error: error.message || 'Failed to activate code' };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restore purchases from app store\r\n   */\r\n  async restorePurchases() {\r\n    // Not applicable for web\r\n    return { success: false, message: 'Not applicable in web environment' };\r\n  }\r\n}\r\n\r\nexport default new MobileSubscriptionService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}