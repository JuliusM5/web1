{"ast":null,"code":"// Import the DEFAULT_SETTINGS from SettingsContext\nimport { DEFAULT_SETTINGS } from '../context/SettingsContext';\nimport translations from './translations';\n\n// Get current user settings (or defaults if none exist)\nexport const getUserSettings = () => {\n  try {\n    const savedSettings = localStorage.getItem('userSettings');\n    if (!savedSettings) return DEFAULT_SETTINGS;\n    const parsedSettings = JSON.parse(savedSettings);\n\n    // Ensure all expected properties exist (handles partial settings from older versions)\n    return {\n      appearance: {\n        ...DEFAULT_SETTINGS.appearance,\n        ...parsedSettings.appearance\n      },\n      preferences: {\n        ...DEFAULT_SETTINGS.preferences,\n        ...parsedSettings.preferences\n      },\n      notifications: {\n        ...DEFAULT_SETTINGS.notifications,\n        ...parsedSettings.notifications\n      },\n      privacy: {\n        ...DEFAULT_SETTINGS.privacy,\n        ...parsedSettings.privacy\n      },\n      accessibility: {\n        ...DEFAULT_SETTINGS.accessibility,\n        ...parsedSettings.accessibility\n      }\n    };\n  } catch (error) {\n    console.error(\"Error loading user settings:\", error);\n    return DEFAULT_SETTINGS;\n  }\n};\n\n// Save user settings\nexport const saveUserSettings = settings => {\n  try {\n    localStorage.setItem('userSettings', JSON.stringify(settings));\n    return true;\n  } catch (error) {\n    console.error(\"Error saving user settings:\", error);\n    return false;\n  }\n};\n\n// Keep track of the last applied settings to prevent redundant application\nlet lastAppliedSettings = null;\n\n// Track the last settings application timestamp to limit frequency\nlet lastSettingsApplicationTime = 0;\nconst SETTINGS_DEBOUNCE_TIME = 300; // milliseconds\n\n// Apply theme settings to the document with debouncing\nexport const applyThemeSettings = settings => {\n  if (!settings || !settings.appearance) {\n    console.error(\"Invalid settings object provided to applyThemeSettings\");\n    return false;\n  }\n  const {\n    fontSize,\n    colorScheme,\n    darkMode\n  } = settings.appearance;\n\n  // Check if these settings are already applied\n  const settingsKey = `${fontSize}-${colorScheme}-${darkMode}`;\n  if (lastAppliedSettings === settingsKey) {\n    return true; // Settings already applied, skip\n  }\n\n  // Debounce settings application\n  const now = Date.now();\n  if (now - lastSettingsApplicationTime < SETTINGS_DEBOUNCE_TIME) {\n    // Schedule a delayed application instead of applying immediately\n    setTimeout(() => {\n      // Check again if settings have changed\n      if (lastAppliedSettings !== settingsKey) {\n        actuallyApplyThemeSettings(settings);\n      }\n    }, SETTINGS_DEBOUNCE_TIME);\n    return true;\n  }\n  return actuallyApplyThemeSettings(settings);\n};\n\n// The actual theme application function\nconst actuallyApplyThemeSettings = settings => {\n  const {\n    fontSize,\n    colorScheme,\n    darkMode\n  } = settings.appearance;\n  const settingsKey = `${fontSize}-${colorScheme}-${darkMode}`;\n\n  // Log only when actually changing settings\n  console.log(\"Applying theme settings:\", {\n    fontSize,\n    colorScheme,\n    darkMode\n  });\n\n  // Apply font size\n  document.documentElement.classList.remove('text-sm', 'text-base', 'text-lg');\n  if (fontSize === 'small') {\n    document.documentElement.classList.add('text-sm');\n  } else if (fontSize === 'medium') {\n    document.documentElement.classList.add('text-base');\n  } else if (fontSize === 'large') {\n    document.documentElement.classList.add('text-lg');\n  }\n\n  // Apply color scheme\n  // Remove any existing color scheme classes\n  const colorSchemeClasses = ['theme-blue', 'theme-purple', 'theme-green', 'theme-red', 'theme-amber', 'theme-indigo'];\n  document.documentElement.classList.remove(...colorSchemeClasses);\n\n  // Add the new color scheme class\n  const themeClass = `theme-${colorScheme}`;\n  document.documentElement.classList.add(themeClass);\n\n  // Apply dark mode\n  if (darkMode) {\n    document.documentElement.classList.add('dark-mode');\n    document.body.classList.add('dark-mode');\n    console.log(\"Dark mode classes applied\");\n  } else {\n    document.documentElement.classList.remove('dark-mode');\n    document.body.classList.remove('dark-mode');\n    console.log(\"Dark mode classes removed\");\n  }\n\n  // Set a custom property to track current theme\n  document.documentElement.style.setProperty('--current-theme', colorScheme);\n  document.documentElement.setAttribute('data-theme', darkMode ? 'dark' : 'light');\n\n  // Update tracking variables\n  lastAppliedSettings = settingsKey;\n  lastSettingsApplicationTime = Date.now();\n  console.log(`Applied theme: ${colorScheme}, font size: ${fontSize}, dark mode: ${darkMode}`);\n  return true;\n};\n\n// Keep track of the last applied accessibility settings to prevent redundant application\nlet lastAppliedAccessibility = null;\n\n// Apply accessibility settings\nexport const applyAccessibilitySettings = settings => {\n  if (!settings || !settings.accessibility) return false;\n  const {\n    highContrast,\n    reducedMotion,\n    largerClickTargets,\n    textScaling,\n    screenReaderOptimized\n  } = settings.accessibility;\n\n  // Check if these settings are already applied\n  const accessibilityKey = `${highContrast}-${reducedMotion}-${largerClickTargets}-${textScaling}-${screenReaderOptimized}`;\n  if (lastAppliedAccessibility === accessibilityKey) {\n    return true; // Settings already applied, skip\n  }\n\n  // Apply high contrast mode\n  if (highContrast) {\n    document.documentElement.classList.add('high-contrast');\n  } else {\n    document.documentElement.classList.remove('high-contrast');\n  }\n\n  // Apply reduced motion\n  if (reducedMotion) {\n    document.documentElement.classList.add('reduced-motion');\n  } else {\n    document.documentElement.classList.remove('reduced-motion');\n  }\n\n  // Apply larger click targets\n  if (largerClickTargets) {\n    document.documentElement.classList.add('larger-targets');\n  } else {\n    document.documentElement.classList.remove('larger-targets');\n  }\n\n  // Apply text scaling\n  if (textScaling && textScaling !== 100) {\n    document.documentElement.style.setProperty('--text-scale-ratio', `${textScaling / 100}`);\n    document.documentElement.classList.add('custom-text-scaling');\n  } else {\n    document.documentElement.classList.remove('custom-text-scaling');\n  }\n\n  // Apply screen reader optimizations\n  if (screenReaderOptimized) {\n    document.documentElement.setAttribute('data-screen-reader-optimized', 'true');\n  } else {\n    document.documentElement.removeAttribute('data-screen-reader-optimized');\n  }\n\n  // Update last applied accessibility settings\n  lastAppliedAccessibility = accessibilityKey;\n  return true;\n};\n\n/**\r\n * Create a translation function for the specified language\r\n * \r\n * @param {string} language Language code (e.g., 'en-US', 'es-ES')\r\n * @returns {Function} Translation function\r\n */\nexport const createTranslateFunction = language => {\n  const defaultLanguage = 'en-US';\n\n  // Return a translation function that gets strings for the specified language\n  return (key, replacements = {}) => {\n    var _translations$languag, _translations$default;\n    // Get the translation from the current language or fall back to default\n    let translation = ((_translations$languag = translations[language]) === null || _translations$languag === void 0 ? void 0 : _translations$languag[key]) || ((_translations$default = translations[defaultLanguage]) === null || _translations$default === void 0 ? void 0 : _translations$default[key]) || key;\n\n    // Replace placeholders with actual values\n    Object.entries(replacements).forEach(([placeholder, value]) => {\n      translation = translation.replace(`{${placeholder}}`, value);\n    });\n    return translation;\n  };\n};\n\n// Format date according to user preferences with internationalization\nexport const formatDate = (dateString, settings, language = 'en-US') => {\n  var _settings$preferences;\n  if (!dateString) return '';\n  const date = new Date(dateString);\n  const format = (settings === null || settings === void 0 ? void 0 : (_settings$preferences = settings.preferences) === null || _settings$preferences === void 0 ? void 0 : _settings$preferences.dateFormat) || 'MM/DD/YYYY';\n  const t = createTranslateFunction(language);\n  switch (format) {\n    case 'DD/MM/YYYY':\n      return `${padZero(date.getDate())}/${padZero(date.getMonth() + 1)}/${date.getFullYear()}`;\n    case 'YYYY-MM-DD':\n      return `${date.getFullYear()}-${padZero(date.getMonth() + 1)}-${padZero(date.getDate())}`;\n    case 'MMMM D, YYYY':\n      return `${getMonthName(date.getMonth(), language, t)} ${date.getDate()}, ${date.getFullYear()}`;\n    case 'D MMMM YYYY':\n      return `${date.getDate()} ${getMonthName(date.getMonth(), language, t)} ${date.getFullYear()}`;\n    case 'MM/DD/YYYY':\n    default:\n      return `${padZero(date.getMonth() + 1)}/${padZero(date.getDate())}/${date.getFullYear()}`;\n  }\n};\n\n// Format currency according to user preferences\nexport const formatCurrency = (amount, settings, language = 'en-US') => {\n  var _settings$preferences2;\n  if (amount === undefined || amount === null) return '';\n  const currencyCode = (settings === null || settings === void 0 ? void 0 : (_settings$preferences2 = settings.preferences) === null || _settings$preferences2 === void 0 ? void 0 : _settings$preferences2.defaultCurrency) || 'USD';\n\n  // Simple mapping of currency codes to symbols\n  const currencySymbols = {\n    'USD': '$',\n    'EUR': '€',\n    'GBP': '£',\n    'JPY': '¥',\n    'CAD': 'CA$',\n    'AUD': 'AU$',\n    'CNY': '¥',\n    'INR': '₹'\n  };\n  const symbol = currencySymbols[currencyCode] || currencyCode;\n\n  // Format the amount with 2 decimal places (except for JPY)\n  let formattedAmount;\n  if (currencyCode === 'JPY' || currencyCode === 'CNY') {\n    formattedAmount = Math.round(amount).toLocaleString(language);\n  } else {\n    // Use locale-sensitive number formatting\n    formattedAmount = Number(amount).toLocaleString(language, {\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2\n    });\n  }\n  return `${symbol}${formattedAmount}`;\n};\n\n// Convert temperature according to user preferences\nexport const formatTemperature = (celsius, settings, language = 'en-US') => {\n  var _settings$preferences3;\n  const t = createTranslateFunction(language);\n  const unit = (settings === null || settings === void 0 ? void 0 : (_settings$preferences3 = settings.preferences) === null || _settings$preferences3 === void 0 ? void 0 : _settings$preferences3.temperatureUnit) || 'fahrenheit';\n  if (unit === 'celsius') {\n    return t('format.temperature.celsius', {\n      value: Math.round(celsius)\n    });\n  } else {\n    // Convert to Fahrenheit\n    const fahrenheit = celsius * 9 / 5 + 32;\n    return t('format.temperature.fahrenheit', {\n      value: Math.round(fahrenheit)\n    });\n  }\n};\n\n// Convert distance according to user preferences\nexport const formatDistance = (kilometers, settings, language = 'en-US') => {\n  var _settings$preferences4;\n  const t = createTranslateFunction(language);\n  const unit = (settings === null || settings === void 0 ? void 0 : (_settings$preferences4 = settings.preferences) === null || _settings$preferences4 === void 0 ? void 0 : _settings$preferences4.distanceUnit) || 'miles';\n  if (unit === 'kilometers') {\n    return t('format.distance.kilometers', {\n      value: kilometers.toFixed(1)\n    });\n  } else {\n    // Convert to miles\n    const miles = kilometers * 0.621371;\n    return t('format.distance.miles', {\n      value: miles.toFixed(1)\n    });\n  }\n};\n\n// Helper functions\nconst padZero = num => {\n  return num.toString().padStart(2, '0');\n};\nconst getMonthName = (monthIndex, language = 'en-US', t = null) => {\n  // If translation function is provided, use it\n  if (t) {\n    return t(`date.month.${monthIndex}`);\n  }\n\n  // Fallback to using localized month names\n  try {\n    const date = new Date();\n    date.setMonth(monthIndex);\n    return date.toLocaleString(language, {\n      month: 'long'\n    });\n  } catch (error) {\n    // Fallback to English month names if locale is not supported\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    return months[monthIndex];\n  }\n};\n\n// Reset all app data (for privacy clear option)\nexport const clearAllAppData = (language = 'en-US') => {\n  const t = createTranslateFunction(language);\n  if (window.confirm(t('settings.privacy.confirmClearAllData'))) {\n    try {\n      localStorage.clear();\n      return true;\n    } catch (error) {\n      console.error(\"Error clearing app data:\", error);\n      return false;\n    }\n  }\n  return false;\n};\n\n// Export all user data as JSON\nexport const exportUserData = (language = 'en-US') => {\n  try {\n    const data = {\n      trips: JSON.parse(localStorage.getItem('travelPlannerTrips') || '[]'),\n      templates: JSON.parse(localStorage.getItem('tripTemplates') || '[]'),\n      settings: JSON.parse(localStorage.getItem('userSettings') || '{}')\n    };\n    const dataStr = JSON.stringify(data, null, 2);\n    const dataUri = `data:application/json;charset=utf-8,${encodeURIComponent(dataStr)}`;\n    const t = createTranslateFunction(language);\n    const currentDate = new Date().toISOString().split('T')[0];\n    const exportFileName = `${t('app.name').toLowerCase()}_backup_${currentDate}.json`;\n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileName);\n    linkElement.click();\n    return true;\n  } catch (error) {\n    console.error(\"Error exporting user data:\", error);\n    return false;\n  }\n};\n\n// Import user data from JSON file\nexport const importUserData = async (file, language = 'en-US') => {\n  const t = createTranslateFunction(language);\n  try {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = event => {\n        try {\n          const data = JSON.parse(event.target.result);\n\n          // Validate the imported data has expected structure\n          if (!data.trips || !data.templates || !data.settings) {\n            reject(new Error(t('settings.import.invalidDataFormat')));\n            return;\n          }\n\n          // Import the data\n          localStorage.setItem('travelPlannerTrips', JSON.stringify(data.trips));\n          localStorage.setItem('tripTemplates', JSON.stringify(data.templates));\n          localStorage.setItem('userSettings', JSON.stringify(data.settings));\n          resolve(true);\n        } catch (error) {\n          reject(new Error(t('settings.import.parseError', {\n            error: error.message\n          })));\n        }\n      };\n      reader.onerror = () => {\n        reject(new Error(t('settings.import.readError')));\n      };\n      reader.readAsText(file);\n    });\n  } catch (error) {\n    console.error(\"Error importing user data:\", error);\n    return false;\n  }\n};","map":{"version":3,"names":["DEFAULT_SETTINGS","translations","getUserSettings","savedSettings","localStorage","getItem","parsedSettings","JSON","parse","appearance","preferences","notifications","privacy","accessibility","error","console","saveUserSettings","settings","setItem","stringify","lastAppliedSettings","lastSettingsApplicationTime","SETTINGS_DEBOUNCE_TIME","applyThemeSettings","fontSize","colorScheme","darkMode","settingsKey","now","Date","setTimeout","actuallyApplyThemeSettings","log","document","documentElement","classList","remove","add","colorSchemeClasses","themeClass","body","style","setProperty","setAttribute","lastAppliedAccessibility","applyAccessibilitySettings","highContrast","reducedMotion","largerClickTargets","textScaling","screenReaderOptimized","accessibilityKey","removeAttribute","createTranslateFunction","language","defaultLanguage","key","replacements","_translations$languag","_translations$default","translation","Object","entries","forEach","placeholder","value","replace","formatDate","dateString","_settings$preferences","date","format","dateFormat","t","padZero","getDate","getMonth","getFullYear","getMonthName","formatCurrency","amount","_settings$preferences2","undefined","currencyCode","defaultCurrency","currencySymbols","symbol","formattedAmount","Math","round","toLocaleString","Number","minimumFractionDigits","maximumFractionDigits","formatTemperature","celsius","_settings$preferences3","unit","temperatureUnit","fahrenheit","formatDistance","kilometers","_settings$preferences4","distanceUnit","toFixed","miles","num","toString","padStart","monthIndex","setMonth","month","months","clearAllAppData","window","confirm","clear","exportUserData","data","trips","templates","dataStr","dataUri","encodeURIComponent","currentDate","toISOString","split","exportFileName","toLowerCase","linkElement","createElement","click","importUserData","file","Promise","resolve","reject","reader","FileReader","onload","event","target","result","Error","message","onerror","readAsText"],"sources":["C:/Users/juliu/Desktop/web/src/utils/settingsUtils.js"],"sourcesContent":["// Import the DEFAULT_SETTINGS from SettingsContext\r\nimport { DEFAULT_SETTINGS } from '../context/SettingsContext';\r\nimport translations from './translations';\r\n\r\n// Get current user settings (or defaults if none exist)\r\nexport const getUserSettings = () => {\r\n  try {\r\n    const savedSettings = localStorage.getItem('userSettings');\r\n    if (!savedSettings) return DEFAULT_SETTINGS;\r\n    \r\n    const parsedSettings = JSON.parse(savedSettings);\r\n    \r\n    // Ensure all expected properties exist (handles partial settings from older versions)\r\n    return {\r\n      appearance: { ...DEFAULT_SETTINGS.appearance, ...parsedSettings.appearance },\r\n      preferences: { ...DEFAULT_SETTINGS.preferences, ...parsedSettings.preferences },\r\n      notifications: { ...DEFAULT_SETTINGS.notifications, ...parsedSettings.notifications },\r\n      privacy: { ...DEFAULT_SETTINGS.privacy, ...parsedSettings.privacy },\r\n      accessibility: { ...DEFAULT_SETTINGS.accessibility, ...parsedSettings.accessibility }\r\n    };\r\n  } catch (error) {\r\n    console.error(\"Error loading user settings:\", error);\r\n    return DEFAULT_SETTINGS;\r\n  }\r\n};\r\n\r\n// Save user settings\r\nexport const saveUserSettings = (settings) => {\r\n  try {\r\n    localStorage.setItem('userSettings', JSON.stringify(settings));\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error saving user settings:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Keep track of the last applied settings to prevent redundant application\r\nlet lastAppliedSettings = null;\r\n\r\n// Track the last settings application timestamp to limit frequency\r\nlet lastSettingsApplicationTime = 0;\r\nconst SETTINGS_DEBOUNCE_TIME = 300; // milliseconds\r\n\r\n// Apply theme settings to the document with debouncing\r\nexport const applyThemeSettings = (settings) => {\r\n  if (!settings || !settings.appearance) {\r\n    console.error(\"Invalid settings object provided to applyThemeSettings\");\r\n    return false;\r\n  }\r\n  \r\n  const { fontSize, colorScheme, darkMode } = settings.appearance;\r\n  \r\n  // Check if these settings are already applied\r\n  const settingsKey = `${fontSize}-${colorScheme}-${darkMode}`;\r\n  if (lastAppliedSettings === settingsKey) {\r\n    return true; // Settings already applied, skip\r\n  }\r\n  \r\n  // Debounce settings application\r\n  const now = Date.now();\r\n  if (now - lastSettingsApplicationTime < SETTINGS_DEBOUNCE_TIME) {\r\n    // Schedule a delayed application instead of applying immediately\r\n    setTimeout(() => {\r\n      // Check again if settings have changed\r\n      if (lastAppliedSettings !== settingsKey) {\r\n        actuallyApplyThemeSettings(settings);\r\n      }\r\n    }, SETTINGS_DEBOUNCE_TIME);\r\n    return true;\r\n  }\r\n  \r\n  return actuallyApplyThemeSettings(settings);\r\n};\r\n\r\n// The actual theme application function\r\nconst actuallyApplyThemeSettings = (settings) => {\r\n  const { fontSize, colorScheme, darkMode } = settings.appearance;\r\n  const settingsKey = `${fontSize}-${colorScheme}-${darkMode}`;\r\n  \r\n  // Log only when actually changing settings\r\n  console.log(\"Applying theme settings:\", { fontSize, colorScheme, darkMode });\r\n  \r\n  // Apply font size\r\n  document.documentElement.classList.remove('text-sm', 'text-base', 'text-lg');\r\n  if (fontSize === 'small') {\r\n    document.documentElement.classList.add('text-sm');\r\n  } else if (fontSize === 'medium') {\r\n    document.documentElement.classList.add('text-base');\r\n  } else if (fontSize === 'large') {\r\n    document.documentElement.classList.add('text-lg');\r\n  }\r\n  \r\n  // Apply color scheme\r\n  // Remove any existing color scheme classes\r\n  const colorSchemeClasses = [\r\n    'theme-blue', 'theme-purple', 'theme-green', \r\n    'theme-red', 'theme-amber', 'theme-indigo'\r\n  ];\r\n  document.documentElement.classList.remove(...colorSchemeClasses);\r\n  \r\n  // Add the new color scheme class\r\n  const themeClass = `theme-${colorScheme}`;\r\n  document.documentElement.classList.add(themeClass);\r\n  \r\n  // Apply dark mode\r\n  if (darkMode) {\r\n    document.documentElement.classList.add('dark-mode');\r\n    document.body.classList.add('dark-mode');\r\n    console.log(\"Dark mode classes applied\");\r\n  } else {\r\n    document.documentElement.classList.remove('dark-mode');\r\n    document.body.classList.remove('dark-mode');\r\n    console.log(\"Dark mode classes removed\");\r\n  }\r\n  \r\n  // Set a custom property to track current theme\r\n  document.documentElement.style.setProperty('--current-theme', colorScheme);\r\n  document.documentElement.setAttribute('data-theme', darkMode ? 'dark' : 'light');\r\n  \r\n  // Update tracking variables\r\n  lastAppliedSettings = settingsKey;\r\n  lastSettingsApplicationTime = Date.now();\r\n  \r\n  console.log(`Applied theme: ${colorScheme}, font size: ${fontSize}, dark mode: ${darkMode}`);\r\n  \r\n  return true;\r\n};\r\n\r\n// Keep track of the last applied accessibility settings to prevent redundant application\r\nlet lastAppliedAccessibility = null;\r\n\r\n// Apply accessibility settings\r\nexport const applyAccessibilitySettings = (settings) => {\r\n  if (!settings || !settings.accessibility) return false;\r\n\r\n  const { highContrast, reducedMotion, largerClickTargets, textScaling, screenReaderOptimized } = settings.accessibility;\r\n\r\n  // Check if these settings are already applied\r\n  const accessibilityKey = `${highContrast}-${reducedMotion}-${largerClickTargets}-${textScaling}-${screenReaderOptimized}`;\r\n  if (lastAppliedAccessibility === accessibilityKey) {\r\n    return true; // Settings already applied, skip\r\n  }\r\n\r\n  // Apply high contrast mode\r\n  if (highContrast) {\r\n    document.documentElement.classList.add('high-contrast');\r\n  } else {\r\n    document.documentElement.classList.remove('high-contrast');\r\n  }\r\n\r\n  // Apply reduced motion\r\n  if (reducedMotion) {\r\n    document.documentElement.classList.add('reduced-motion');\r\n  } else {\r\n    document.documentElement.classList.remove('reduced-motion');\r\n  }\r\n\r\n  // Apply larger click targets\r\n  if (largerClickTargets) {\r\n    document.documentElement.classList.add('larger-targets');\r\n  } else {\r\n    document.documentElement.classList.remove('larger-targets');\r\n  }\r\n\r\n  // Apply text scaling\r\n  if (textScaling && textScaling !== 100) {\r\n    document.documentElement.style.setProperty('--text-scale-ratio', `${textScaling / 100}`);\r\n    document.documentElement.classList.add('custom-text-scaling');\r\n  } else {\r\n    document.documentElement.classList.remove('custom-text-scaling');\r\n  }\r\n\r\n  // Apply screen reader optimizations\r\n  if (screenReaderOptimized) {\r\n    document.documentElement.setAttribute('data-screen-reader-optimized', 'true');\r\n  } else {\r\n    document.documentElement.removeAttribute('data-screen-reader-optimized');\r\n  }\r\n\r\n  // Update last applied accessibility settings\r\n  lastAppliedAccessibility = accessibilityKey;\r\n\r\n  return true;\r\n};\r\n\r\n/**\r\n * Create a translation function for the specified language\r\n * \r\n * @param {string} language Language code (e.g., 'en-US', 'es-ES')\r\n * @returns {Function} Translation function\r\n */\r\nexport const createTranslateFunction = (language) => {\r\n  const defaultLanguage = 'en-US';\r\n  \r\n  // Return a translation function that gets strings for the specified language\r\n  return (key, replacements = {}) => {\r\n    // Get the translation from the current language or fall back to default\r\n    let translation = translations[language]?.[key] || translations[defaultLanguage]?.[key] || key;\r\n    \r\n    // Replace placeholders with actual values\r\n    Object.entries(replacements).forEach(([placeholder, value]) => {\r\n      translation = translation.replace(`{${placeholder}}`, value);\r\n    });\r\n    \r\n    return translation;\r\n  };\r\n};\r\n\r\n// Format date according to user preferences with internationalization\r\nexport const formatDate = (dateString, settings, language = 'en-US') => {\r\n  if (!dateString) return '';\r\n  \r\n  const date = new Date(dateString);\r\n  const format = settings?.preferences?.dateFormat || 'MM/DD/YYYY';\r\n  const t = createTranslateFunction(language);\r\n  \r\n  switch (format) {\r\n    case 'DD/MM/YYYY':\r\n      return `${padZero(date.getDate())}/${padZero(date.getMonth() + 1)}/${date.getFullYear()}`;\r\n    case 'YYYY-MM-DD':\r\n      return `${date.getFullYear()}-${padZero(date.getMonth() + 1)}-${padZero(date.getDate())}`;\r\n    case 'MMMM D, YYYY':\r\n      return `${getMonthName(date.getMonth(), language, t)} ${date.getDate()}, ${date.getFullYear()}`;\r\n    case 'D MMMM YYYY':\r\n      return `${date.getDate()} ${getMonthName(date.getMonth(), language, t)} ${date.getFullYear()}`;\r\n    case 'MM/DD/YYYY':\r\n    default:\r\n      return `${padZero(date.getMonth() + 1)}/${padZero(date.getDate())}/${date.getFullYear()}`;\r\n  }\r\n};\r\n\r\n// Format currency according to user preferences\r\nexport const formatCurrency = (amount, settings, language = 'en-US') => {\r\n  if (amount === undefined || amount === null) return '';\r\n  \r\n  const currencyCode = settings?.preferences?.defaultCurrency || 'USD';\r\n  \r\n  // Simple mapping of currency codes to symbols\r\n  const currencySymbols = {\r\n    'USD': '$',\r\n    'EUR': '€',\r\n    'GBP': '£',\r\n    'JPY': '¥',\r\n    'CAD': 'CA$',\r\n    'AUD': 'AU$',\r\n    'CNY': '¥',\r\n    'INR': '₹',\r\n  };\r\n  \r\n  const symbol = currencySymbols[currencyCode] || currencyCode;\r\n  \r\n  // Format the amount with 2 decimal places (except for JPY)\r\n  let formattedAmount;\r\n  if (currencyCode === 'JPY' || currencyCode === 'CNY') {\r\n    formattedAmount = Math.round(amount).toLocaleString(language);\r\n  } else {\r\n    // Use locale-sensitive number formatting\r\n    formattedAmount = Number(amount).toLocaleString(language, {\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2\r\n    });\r\n  }\r\n  \r\n  return `${symbol}${formattedAmount}`;\r\n};\r\n\r\n// Convert temperature according to user preferences\r\nexport const formatTemperature = (celsius, settings, language = 'en-US') => {\r\n  const t = createTranslateFunction(language);\r\n  const unit = settings?.preferences?.temperatureUnit || 'fahrenheit';\r\n  \r\n  if (unit === 'celsius') {\r\n    return t('format.temperature.celsius', { value: Math.round(celsius) });\r\n  } else {\r\n    // Convert to Fahrenheit\r\n    const fahrenheit = (celsius * 9/5) + 32;\r\n    return t('format.temperature.fahrenheit', { value: Math.round(fahrenheit) });\r\n  }\r\n};\r\n\r\n// Convert distance according to user preferences\r\nexport const formatDistance = (kilometers, settings, language = 'en-US') => {\r\n  const t = createTranslateFunction(language);\r\n  const unit = settings?.preferences?.distanceUnit || 'miles';\r\n  \r\n  if (unit === 'kilometers') {\r\n    return t('format.distance.kilometers', { value: kilometers.toFixed(1) });\r\n  } else {\r\n    // Convert to miles\r\n    const miles = kilometers * 0.621371;\r\n    return t('format.distance.miles', { value: miles.toFixed(1) });\r\n  }\r\n};\r\n\r\n// Helper functions\r\nconst padZero = (num) => {\r\n  return num.toString().padStart(2, '0');\r\n};\r\n\r\nconst getMonthName = (monthIndex, language = 'en-US', t = null) => {\r\n  // If translation function is provided, use it\r\n  if (t) {\r\n    return t(`date.month.${monthIndex}`);\r\n  }\r\n  \r\n  // Fallback to using localized month names\r\n  try {\r\n    const date = new Date();\r\n    date.setMonth(monthIndex);\r\n    return date.toLocaleString(language, { month: 'long' });\r\n  } catch (error) {\r\n    // Fallback to English month names if locale is not supported\r\n    const months = [\r\n      'January', 'February', 'March', 'April', 'May', 'June',\r\n      'July', 'August', 'September', 'October', 'November', 'December'\r\n    ];\r\n    return months[monthIndex];\r\n  }\r\n};\r\n\r\n// Reset all app data (for privacy clear option)\r\nexport const clearAllAppData = (language = 'en-US') => {\r\n  const t = createTranslateFunction(language);\r\n  \r\n  if (window.confirm(t('settings.privacy.confirmClearAllData'))) {\r\n    try {\r\n      localStorage.clear();\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error clearing app data:\", error);\r\n      return false;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n// Export all user data as JSON\r\nexport const exportUserData = (language = 'en-US') => {\r\n  try {\r\n    const data = {\r\n      trips: JSON.parse(localStorage.getItem('travelPlannerTrips') || '[]'),\r\n      templates: JSON.parse(localStorage.getItem('tripTemplates') || '[]'),\r\n      settings: JSON.parse(localStorage.getItem('userSettings') || '{}')\r\n    };\r\n    \r\n    const dataStr = JSON.stringify(data, null, 2);\r\n    const dataUri = `data:application/json;charset=utf-8,${encodeURIComponent(dataStr)}`;\r\n    \r\n    const t = createTranslateFunction(language);\r\n    const currentDate = new Date().toISOString().split('T')[0];\r\n    const exportFileName = `${t('app.name').toLowerCase()}_backup_${currentDate}.json`;\r\n    \r\n    const linkElement = document.createElement('a');\r\n    linkElement.setAttribute('href', dataUri);\r\n    linkElement.setAttribute('download', exportFileName);\r\n    linkElement.click();\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error exporting user data:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Import user data from JSON file\r\nexport const importUserData = async (file, language = 'en-US') => {\r\n  const t = createTranslateFunction(language);\r\n  \r\n  try {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      \r\n      reader.onload = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.target.result);\r\n          \r\n          // Validate the imported data has expected structure\r\n          if (!data.trips || !data.templates || !data.settings) {\r\n            reject(new Error(t('settings.import.invalidDataFormat')));\r\n            return;\r\n          }\r\n          \r\n          // Import the data\r\n          localStorage.setItem('travelPlannerTrips', JSON.stringify(data.trips));\r\n          localStorage.setItem('tripTemplates', JSON.stringify(data.templates));\r\n          localStorage.setItem('userSettings', JSON.stringify(data.settings));\r\n          \r\n          resolve(true);\r\n        } catch (error) {\r\n          reject(new Error(t('settings.import.parseError', { error: error.message })));\r\n        }\r\n      };\r\n      \r\n      reader.onerror = () => {\r\n        reject(new Error(t('settings.import.readError')));\r\n      };\r\n      \r\n      reader.readAsText(file);\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error importing user data:\", error);\r\n    return false;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}