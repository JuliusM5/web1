{"ast":null,"code":"/**\r\n * Accessibility Utilities\r\n * \r\n * Provides utilities for improving accessibility in the application,\r\n * including keyboard navigation, screen reader support, and more.\r\n */\n\n// Constants\nconst FOCUS_SELECTORS = 'a[href], button, input, textarea, select, details, [tabindex]:not([tabindex=\"-1\"])';\n\n/**\r\n * Generate a unique ID with an optional prefix\r\n * \r\n * @param {string} prefix Prefix for the ID\r\n * @returns {string} Unique ID\r\n */\nexport const generateUniqueId = (prefix = 'id') => {\n  return `${prefix}-${Math.random().toString(36).substring(2, 9)}`;\n};\n\n/**\r\n * Create a focus trap for modals and other UI elements\r\n * \r\n * @param {HTMLElement} container Element to trap focus within\r\n * @returns {Function} Function to remove the focus trap\r\n */\nexport const createFocusTrap = container => {\n  if (!container) return () => {};\n\n  // Find all focusable elements in the container\n  const focusableElements = Array.from(container.querySelectorAll(FOCUS_SELECTORS)).filter(el => !el.disabled && !el.getAttribute('aria-hidden'));\n\n  // If no focusable elements, return empty function\n  if (focusableElements.length === 0) return () => {};\n\n  // Focus the first element\n  const firstElement = focusableElements[0];\n  const lastElement = focusableElements[focusableElements.length - 1];\n\n  // Set focus to the first element\n  setTimeout(() => {\n    firstElement.focus();\n  }, 50);\n\n  // Handle keydown events to trap focus\n  const handleKeyDown = event => {\n    // If not Tab key, ignore\n    if (event.key !== 'Tab') return;\n\n    // If Shift+Tab and focus is on first element, move to last element\n    if (event.shiftKey && document.activeElement === firstElement) {\n      event.preventDefault();\n      lastElement.focus();\n    }\n\n    // If Tab and focus is on last element, move to first element\n    else if (!event.shiftKey && document.activeElement === lastElement) {\n      event.preventDefault();\n      firstElement.focus();\n    }\n  };\n\n  // Add event listener\n  container.addEventListener('keydown', handleKeyDown);\n\n  // Return function to remove focus trap\n  return () => {\n    container.removeEventListener('keydown', handleKeyDown);\n  };\n};\n\n/**\r\n * Get props for a skip link component\r\n * \r\n * @param {Object} options Options for the skip link\r\n * @param {string} options.target ID of the target element to skip to\r\n * @param {string} options.label Label for the skip link\r\n * @returns {Object} Props for the skip link component\r\n */\nexport const getSkipLinkProps = ({\n  target,\n  label = 'Skip to main content'\n}) => {\n  if (!target) {\n    console.warn('No target specified for skip link');\n    return {};\n  }\n  return {\n    href: `#${target}`,\n    className: `\n      absolute top-0 left-0 -translate-y-full focus:translate-y-0 z-50\n      bg-white text-blue-600 px-4 py-2 border-b border-r border-gray-200\n      focus:outline-none focus:ring-2 focus:ring-blue-500 transition-transform\n    `,\n    children: label,\n    onKeyDown: e => {\n      // If Enter or Space is pressed, focus the target element\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        const targetElement = document.getElementById(target);\n        if (targetElement) {\n          targetElement.setAttribute('tabindex', '-1');\n          targetElement.focus();\n          // Remove tabindex after focus\n          setTimeout(() => {\n            targetElement.removeAttribute('tabindex');\n          }, 100);\n        }\n      }\n    }\n  };\n};\n\n/**\r\n * Announce a message to screen readers using an ARIA live region\r\n * \r\n * @param {string} message Message to announce\r\n * @param {string} priority Priority of the announcement ('polite' or 'assertive')\r\n */\nexport const announceToScreenReader = (message, priority = 'polite') => {\n  // Validate priority\n  if (priority !== 'polite' && priority !== 'assertive') {\n    console.warn(`Invalid priority: ${priority}. Using 'polite' instead.`);\n    priority = 'polite';\n  }\n\n  // Find or create the announcer element\n  let announcer = document.getElementById(`sr-announcer-${priority}`);\n  if (!announcer) {\n    announcer = document.createElement('div');\n    announcer.id = `sr-announcer-${priority}`;\n    announcer.setAttribute('aria-live', priority);\n    announcer.setAttribute('aria-atomic', 'true');\n    announcer.className = 'sr-only';\n    document.body.appendChild(announcer);\n  }\n\n  // Update the announcer with the message\n  // We use a timeout to ensure the message is announced even if it hasn't changed\n  setTimeout(() => {\n    announcer.textContent = '';\n    // Another timeout to ensure the empty string is registered\n    setTimeout(() => {\n      announcer.textContent = message;\n    }, 50);\n  }, 50);\n};\n\n/**\r\n * Check if high contrast mode is enabled\r\n * \r\n * @returns {boolean} True if high contrast mode is enabled\r\n */\nexport const isHighContrastMode = () => {\n  // Check for Windows high contrast mode\n  if (window.matchMedia('(-ms-high-contrast: active)').matches) {\n    return true;\n  }\n\n  // Check for forced colors mode (newer browsers)\n  if (window.matchMedia('(forced-colors: active)').matches) {\n    return true;\n  }\n  return false;\n};\n\n/**\r\n * Check if reduced motion preference is enabled\r\n * \r\n * @returns {boolean} True if reduced motion is preferred\r\n */\nexport const prefersReducedMotion = () => {\n  return window.matchMedia('(prefers-reduced-motion: reduce)').matches;\n};\n\n/**\r\n * Get ARIA attributes for an element based on its state\r\n * \r\n * @param {Object} options Options for generating ARIA attributes\r\n * @returns {Object} ARIA attributes\r\n */\nexport const getAriaAttributes = (options = {}) => {\n  const {\n    isRequired,\n    hasError,\n    errorMessage,\n    isDisabled,\n    isExpanded,\n    hasPopup,\n    isPressed,\n    isSelected,\n    controls,\n    describedBy,\n    labelledBy,\n    current\n  } = options;\n  const attributes = {};\n  if (isRequired) attributes['aria-required'] = 'true';\n  if (hasError) attributes['aria-invalid'] = 'true';\n  if (errorMessage) attributes['aria-errormessage'] = errorMessage;\n  if (isDisabled) attributes['aria-disabled'] = 'true';\n  if (isExpanded !== undefined) attributes['aria-expanded'] = isExpanded ? 'true' : 'false';\n  if (hasPopup) attributes['aria-haspopup'] = 'true';\n  if (isPressed !== undefined) attributes['aria-pressed'] = isPressed ? 'true' : 'false';\n  if (isSelected !== undefined) attributes['aria-selected'] = isSelected ? 'true' : 'false';\n  if (controls) attributes['aria-controls'] = controls;\n  if (describedBy) attributes['aria-describedby'] = describedBy;\n  if (labelledBy) attributes['aria-labelledby'] = labelledBy;\n  if (current) attributes['aria-current'] = current;\n  return attributes;\n};\n\n/**\r\n * Get the heading level based on context\r\n * \r\n * @param {number} baseLevel Base heading level\r\n * @param {number} contextLevel Context heading level\r\n * @returns {number} Appropriate heading level (1-6)\r\n */\nexport const getHeadingLevel = (baseLevel = 1, contextLevel = 0) => {\n  const level = baseLevel + contextLevel;\n  return Math.max(1, Math.min(6, level));\n};\n\n/**\r\n * Ensure a string is safe for use as an HTML ID\r\n * \r\n * @param {string} str String to sanitize\r\n * @returns {string} Sanitized string safe for use as an ID\r\n */\nexport const sanitizeId = str => {\n  if (!str) return '';\n  return str.toString().toLowerCase().replace(/\\s+/g, '-') // Replace spaces with hyphens\n  .replace(/[^\\w\\-]+/g, '') // Remove non-word characters\n  .replace(/\\-\\-+/g, '-') // Replace multiple hyphens with single hyphen\n  .replace(/^-+/, '') // Trim hyphens from start\n  .replace(/-+$/, ''); // Trim hyphens from end\n};\n\n/**\r\n * Check if an element is currently visible in the viewport\r\n * \r\n * @param {HTMLElement} element Element to check\r\n * @param {Object} options Options for the check\r\n * @returns {boolean} True if the element is visible\r\n */\nexport const isElementInViewport = (element, options = {}) => {\n  if (!element) return false;\n  const {\n    fully = false,\n    // Whether the element needs to be fully visible\n    offset = 0 // Offset from the viewport edges\n  } = options;\n  const rect = element.getBoundingClientRect();\n  if (fully) {\n    return rect.top >= offset && rect.left >= offset && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) - offset && rect.right <= (window.innerWidth || document.documentElement.clientWidth) - offset;\n  }\n  return rect.bottom >= offset && rect.right >= offset && rect.top <= (window.innerHeight || document.documentElement.clientHeight) - offset && rect.left <= (window.innerWidth || document.documentElement.clientWidth) - offset;\n};","map":{"version":3,"names":["FOCUS_SELECTORS","generateUniqueId","prefix","Math","random","toString","substring","createFocusTrap","container","focusableElements","Array","from","querySelectorAll","filter","el","disabled","getAttribute","length","firstElement","lastElement","setTimeout","focus","handleKeyDown","event","key","shiftKey","document","activeElement","preventDefault","addEventListener","removeEventListener","getSkipLinkProps","target","label","console","warn","href","className","children","onKeyDown","e","targetElement","getElementById","setAttribute","removeAttribute","announceToScreenReader","message","priority","announcer","createElement","id","body","appendChild","textContent","isHighContrastMode","window","matchMedia","matches","prefersReducedMotion","getAriaAttributes","options","isRequired","hasError","errorMessage","isDisabled","isExpanded","hasPopup","isPressed","isSelected","controls","describedBy","labelledBy","current","attributes","undefined","getHeadingLevel","baseLevel","contextLevel","level","max","min","sanitizeId","str","toLowerCase","replace","isElementInViewport","element","fully","offset","rect","getBoundingClientRect","top","left","bottom","innerHeight","documentElement","clientHeight","right","innerWidth","clientWidth"],"sources":["C:/Users/juliu/Desktop/web/src/utils/accessibilityUtils.js"],"sourcesContent":["/**\r\n * Accessibility Utilities\r\n * \r\n * Provides utilities for improving accessibility in the application,\r\n * including keyboard navigation, screen reader support, and more.\r\n */\r\n\r\n// Constants\r\nconst FOCUS_SELECTORS = 'a[href], button, input, textarea, select, details, [tabindex]:not([tabindex=\"-1\"])';\r\n\r\n/**\r\n * Generate a unique ID with an optional prefix\r\n * \r\n * @param {string} prefix Prefix for the ID\r\n * @returns {string} Unique ID\r\n */\r\nexport const generateUniqueId = (prefix = 'id') => {\r\n  return `${prefix}-${Math.random().toString(36).substring(2, 9)}`;\r\n};\r\n\r\n/**\r\n * Create a focus trap for modals and other UI elements\r\n * \r\n * @param {HTMLElement} container Element to trap focus within\r\n * @returns {Function} Function to remove the focus trap\r\n */\r\nexport const createFocusTrap = (container) => {\r\n  if (!container) return () => {};\r\n  \r\n  // Find all focusable elements in the container\r\n  const focusableElements = Array.from(container.querySelectorAll(FOCUS_SELECTORS))\r\n    .filter(el => !el.disabled && !el.getAttribute('aria-hidden'));\r\n  \r\n  // If no focusable elements, return empty function\r\n  if (focusableElements.length === 0) return () => {};\r\n  \r\n  // Focus the first element\r\n  const firstElement = focusableElements[0];\r\n  const lastElement = focusableElements[focusableElements.length - 1];\r\n  \r\n  // Set focus to the first element\r\n  setTimeout(() => {\r\n    firstElement.focus();\r\n  }, 50);\r\n  \r\n  // Handle keydown events to trap focus\r\n  const handleKeyDown = (event) => {\r\n    // If not Tab key, ignore\r\n    if (event.key !== 'Tab') return;\r\n    \r\n    // If Shift+Tab and focus is on first element, move to last element\r\n    if (event.shiftKey && document.activeElement === firstElement) {\r\n      event.preventDefault();\r\n      lastElement.focus();\r\n    }\r\n    \r\n    // If Tab and focus is on last element, move to first element\r\n    else if (!event.shiftKey && document.activeElement === lastElement) {\r\n      event.preventDefault();\r\n      firstElement.focus();\r\n    }\r\n  };\r\n  \r\n  // Add event listener\r\n  container.addEventListener('keydown', handleKeyDown);\r\n  \r\n  // Return function to remove focus trap\r\n  return () => {\r\n    container.removeEventListener('keydown', handleKeyDown);\r\n  };\r\n};\r\n\r\n/**\r\n * Get props for a skip link component\r\n * \r\n * @param {Object} options Options for the skip link\r\n * @param {string} options.target ID of the target element to skip to\r\n * @param {string} options.label Label for the skip link\r\n * @returns {Object} Props for the skip link component\r\n */\r\nexport const getSkipLinkProps = ({ target, label = 'Skip to main content' }) => {\r\n  if (!target) {\r\n    console.warn('No target specified for skip link');\r\n    return {};\r\n  }\r\n  \r\n  return {\r\n    href: `#${target}`,\r\n    className: `\r\n      absolute top-0 left-0 -translate-y-full focus:translate-y-0 z-50\r\n      bg-white text-blue-600 px-4 py-2 border-b border-r border-gray-200\r\n      focus:outline-none focus:ring-2 focus:ring-blue-500 transition-transform\r\n    `,\r\n    children: label,\r\n    onKeyDown: (e) => {\r\n      // If Enter or Space is pressed, focus the target element\r\n      if (e.key === 'Enter' || e.key === ' ') {\r\n        e.preventDefault();\r\n        const targetElement = document.getElementById(target);\r\n        if (targetElement) {\r\n          targetElement.setAttribute('tabindex', '-1');\r\n          targetElement.focus();\r\n          // Remove tabindex after focus\r\n          setTimeout(() => {\r\n            targetElement.removeAttribute('tabindex');\r\n          }, 100);\r\n        }\r\n      }\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Announce a message to screen readers using an ARIA live region\r\n * \r\n * @param {string} message Message to announce\r\n * @param {string} priority Priority of the announcement ('polite' or 'assertive')\r\n */\r\nexport const announceToScreenReader = (message, priority = 'polite') => {\r\n  // Validate priority\r\n  if (priority !== 'polite' && priority !== 'assertive') {\r\n    console.warn(`Invalid priority: ${priority}. Using 'polite' instead.`);\r\n    priority = 'polite';\r\n  }\r\n  \r\n  // Find or create the announcer element\r\n  let announcer = document.getElementById(`sr-announcer-${priority}`);\r\n  \r\n  if (!announcer) {\r\n    announcer = document.createElement('div');\r\n    announcer.id = `sr-announcer-${priority}`;\r\n    announcer.setAttribute('aria-live', priority);\r\n    announcer.setAttribute('aria-atomic', 'true');\r\n    announcer.className = 'sr-only';\r\n    document.body.appendChild(announcer);\r\n  }\r\n  \r\n  // Update the announcer with the message\r\n  // We use a timeout to ensure the message is announced even if it hasn't changed\r\n  setTimeout(() => {\r\n    announcer.textContent = '';\r\n    // Another timeout to ensure the empty string is registered\r\n    setTimeout(() => {\r\n      announcer.textContent = message;\r\n    }, 50);\r\n  }, 50);\r\n};\r\n\r\n/**\r\n * Check if high contrast mode is enabled\r\n * \r\n * @returns {boolean} True if high contrast mode is enabled\r\n */\r\nexport const isHighContrastMode = () => {\r\n  // Check for Windows high contrast mode\r\n  if (window.matchMedia('(-ms-high-contrast: active)').matches) {\r\n    return true;\r\n  }\r\n  \r\n  // Check for forced colors mode (newer browsers)\r\n  if (window.matchMedia('(forced-colors: active)').matches) {\r\n    return true;\r\n  }\r\n  \r\n  return false;\r\n};\r\n\r\n/**\r\n * Check if reduced motion preference is enabled\r\n * \r\n * @returns {boolean} True if reduced motion is preferred\r\n */\r\nexport const prefersReducedMotion = () => {\r\n  return window.matchMedia('(prefers-reduced-motion: reduce)').matches;\r\n};\r\n\r\n/**\r\n * Get ARIA attributes for an element based on its state\r\n * \r\n * @param {Object} options Options for generating ARIA attributes\r\n * @returns {Object} ARIA attributes\r\n */\r\nexport const getAriaAttributes = (options = {}) => {\r\n  const {\r\n    isRequired,\r\n    hasError,\r\n    errorMessage,\r\n    isDisabled,\r\n    isExpanded,\r\n    hasPopup,\r\n    isPressed,\r\n    isSelected,\r\n    controls,\r\n    describedBy,\r\n    labelledBy,\r\n    current\r\n  } = options;\r\n  \r\n  const attributes = {};\r\n  \r\n  if (isRequired) attributes['aria-required'] = 'true';\r\n  if (hasError) attributes['aria-invalid'] = 'true';\r\n  if (errorMessage) attributes['aria-errormessage'] = errorMessage;\r\n  if (isDisabled) attributes['aria-disabled'] = 'true';\r\n  if (isExpanded !== undefined) attributes['aria-expanded'] = isExpanded ? 'true' : 'false';\r\n  if (hasPopup) attributes['aria-haspopup'] = 'true';\r\n  if (isPressed !== undefined) attributes['aria-pressed'] = isPressed ? 'true' : 'false';\r\n  if (isSelected !== undefined) attributes['aria-selected'] = isSelected ? 'true' : 'false';\r\n  if (controls) attributes['aria-controls'] = controls;\r\n  if (describedBy) attributes['aria-describedby'] = describedBy;\r\n  if (labelledBy) attributes['aria-labelledby'] = labelledBy;\r\n  if (current) attributes['aria-current'] = current;\r\n  \r\n  return attributes;\r\n};\r\n\r\n/**\r\n * Get the heading level based on context\r\n * \r\n * @param {number} baseLevel Base heading level\r\n * @param {number} contextLevel Context heading level\r\n * @returns {number} Appropriate heading level (1-6)\r\n */\r\nexport const getHeadingLevel = (baseLevel = 1, contextLevel = 0) => {\r\n  const level = baseLevel + contextLevel;\r\n  return Math.max(1, Math.min(6, level));\r\n};\r\n\r\n/**\r\n * Ensure a string is safe for use as an HTML ID\r\n * \r\n * @param {string} str String to sanitize\r\n * @returns {string} Sanitized string safe for use as an ID\r\n */\r\nexport const sanitizeId = (str) => {\r\n  if (!str) return '';\r\n  \r\n  return str\r\n    .toString()\r\n    .toLowerCase()\r\n    .replace(/\\s+/g, '-')       // Replace spaces with hyphens\r\n    .replace(/[^\\w\\-]+/g, '')   // Remove non-word characters\r\n    .replace(/\\-\\-+/g, '-')     // Replace multiple hyphens with single hyphen\r\n    .replace(/^-+/, '')         // Trim hyphens from start\r\n    .replace(/-+$/, '');        // Trim hyphens from end\r\n};\r\n\r\n/**\r\n * Check if an element is currently visible in the viewport\r\n * \r\n * @param {HTMLElement} element Element to check\r\n * @param {Object} options Options for the check\r\n * @returns {boolean} True if the element is visible\r\n */\r\nexport const isElementInViewport = (element, options = {}) => {\r\n  if (!element) return false;\r\n  \r\n  const {\r\n    fully = false,   // Whether the element needs to be fully visible\r\n    offset = 0       // Offset from the viewport edges\r\n  } = options;\r\n  \r\n  const rect = element.getBoundingClientRect();\r\n  \r\n  if (fully) {\r\n    return (\r\n      rect.top >= offset &&\r\n      rect.left >= offset &&\r\n      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) - offset &&\r\n      rect.right <= (window.innerWidth || document.documentElement.clientWidth) - offset\r\n    );\r\n  }\r\n  \r\n  return (\r\n    rect.bottom >= offset &&\r\n    rect.right >= offset &&\r\n    rect.top <= (window.innerHeight || document.documentElement.clientHeight) - offset &&\r\n    rect.left <= (window.innerWidth || document.documentElement.clientWidth) - offset\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}