{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\context\\\\SettingsContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { getUserSettings, saveUserSettings, applyThemeSettings, DEFAULT_SETTINGS } from '../utils/settingsUtils';\n\n// Create Settings Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SettingsContext = /*#__PURE__*/createContext();\n\n// Custom hook to use the Settings Context\nexport const useSettings = () => {\n  _s();\n  const context = useContext(SettingsContext);\n  if (!context) {\n    throw new Error('useSettings must be used within a SettingsProvider');\n  }\n  return context;\n};\n\n// Settings Provider Component\n_s(useSettings, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const SettingsProvider = ({\n  children\n}) => {\n  _s2();\n  const [settings, setSettings] = useState(getUserSettings());\n  const [loading, setLoading] = useState(true);\n\n  // Apply settings on initial load\n  useEffect(() => {\n    const loadSettings = async () => {\n      const userSettings = getUserSettings();\n      setSettings(userSettings);\n      applyThemeSettings(userSettings);\n      setLoading(false);\n    };\n    loadSettings();\n  }, []);\n\n  // Update settings\n  const updateSettings = newSettings => {\n    setSettings(newSettings);\n    saveUserSettings(newSettings);\n    applyThemeSettings(newSettings);\n    return true;\n  };\n\n  // Reset settings to defaults\n  const resetSettings = () => {\n    setSettings(DEFAULT_SETTINGS);\n    saveUserSettings(DEFAULT_SETTINGS);\n    applyThemeSettings(DEFAULT_SETTINGS);\n    return true;\n  };\n\n  // Context value\n  const value = {\n    settings,\n    updateSettings,\n    resetSettings,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s2(SettingsProvider, \"n4K/E3oPlSDuiJP0tTDuNTaeOLI=\");\n_c = SettingsProvider;\nexport default SettingsContext;\nvar _c;\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","getUserSettings","saveUserSettings","applyThemeSettings","DEFAULT_SETTINGS","jsxDEV","_jsxDEV","SettingsContext","useSettings","_s","context","Error","SettingsProvider","children","_s2","settings","setSettings","loading","setLoading","loadSettings","userSettings","updateSettings","newSettings","resetSettings","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/context/SettingsContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { getUserSettings, saveUserSettings, applyThemeSettings, DEFAULT_SETTINGS } from '../utils/settingsUtils';\r\n\r\n// Create Settings Context\r\nconst SettingsContext = createContext();\r\n\r\n// Custom hook to use the Settings Context\r\nexport const useSettings = () => {\r\n  const context = useContext(SettingsContext);\r\n  if (!context) {\r\n    throw new Error('useSettings must be used within a SettingsProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Settings Provider Component\r\nexport const SettingsProvider = ({ children }) => {\r\n  const [settings, setSettings] = useState(getUserSettings());\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Apply settings on initial load\r\n  useEffect(() => {\r\n    const loadSettings = async () => {\r\n      const userSettings = getUserSettings();\r\n      setSettings(userSettings);\r\n      applyThemeSettings(userSettings);\r\n      setLoading(false);\r\n    };\r\n\r\n    loadSettings();\r\n  }, []);\r\n\r\n  // Update settings\r\n  const updateSettings = (newSettings) => {\r\n    setSettings(newSettings);\r\n    saveUserSettings(newSettings);\r\n    applyThemeSettings(newSettings);\r\n    return true;\r\n  };\r\n\r\n  // Reset settings to defaults\r\n  const resetSettings = () => {\r\n    setSettings(DEFAULT_SETTINGS);\r\n    saveUserSettings(DEFAULT_SETTINGS);\r\n    applyThemeSettings(DEFAULT_SETTINGS);\r\n    return true;\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    settings,\r\n    updateSettings,\r\n    resetSettings,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <SettingsContext.Provider value={value}>\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SettingsContext;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,eAAe,EAAEC,gBAAgB,EAAEC,kBAAkB,EAAEC,gBAAgB,QAAQ,wBAAwB;;AAEhH;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,gBAAGV,aAAa,CAAC,CAAC;;AAEvC;AACA,OAAO,MAAMW,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,OAAO,GAAGX,UAAU,CAACQ,eAAe,CAAC;EAC3C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,oDAAoD,CAAC;EACvE;EACA,OAAOD,OAAO;AAChB,CAAC;;AAED;AAAAD,EAAA,CARaD,WAAW;AASxB,OAAO,MAAMI,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAChD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAACG,eAAe,CAAC,CAAC,CAAC;EAC3D,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAE,SAAS,CAAC,MAAM;IACd,MAAMmB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,MAAMC,YAAY,GAAGnB,eAAe,CAAC,CAAC;MACtCe,WAAW,CAACI,YAAY,CAAC;MACzBjB,kBAAkB,CAACiB,YAAY,CAAC;MAChCF,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC;IAEDC,YAAY,CAAC,CAAC;EAChB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAME,cAAc,GAAIC,WAAW,IAAK;IACtCN,WAAW,CAACM,WAAW,CAAC;IACxBpB,gBAAgB,CAACoB,WAAW,CAAC;IAC7BnB,kBAAkB,CAACmB,WAAW,CAAC;IAC/B,OAAO,IAAI;EACb,CAAC;;EAED;EACA,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1BP,WAAW,CAACZ,gBAAgB,CAAC;IAC7BF,gBAAgB,CAACE,gBAAgB,CAAC;IAClCD,kBAAkB,CAACC,gBAAgB,CAAC;IACpC,OAAO,IAAI;EACb,CAAC;;EAED;EACA,MAAMoB,KAAK,GAAG;IACZT,QAAQ;IACRM,cAAc;IACdE,aAAa;IACbN;EACF,CAAC;EAED,oBACEX,OAAA,CAACC,eAAe,CAACkB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAX,QAAA,EACpCA;EAAQ;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAACf,GAAA,CA7CWF,gBAAgB;AAAAkB,EAAA,GAAhBlB,gBAAgB;AA+C7B,eAAeL,eAAe;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}