{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\components\\\\UI\\\\AppSettingsWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { useSettings } from '../../context/SettingsContext';\nimport settingsManager from '../../utils/settingsManager';\n\n/**\r\n * Component that wraps the application and applies the current theme and settings\r\n * Uses the singleton pattern to prevent multiple settings applications\r\n * \r\n * @param {Object} props Component props\r\n * @param {React.ReactNode} props.children Child components\r\n * @returns {React.ReactNode} Wrapped children\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AppSettingsWrapper({\n  children\n}) {\n  _s();\n  const {\n    settings\n  } = useSettings();\n  const initialSettingsApplied = useRef(false);\n\n  // Initialize the settings manager once\n  useEffect(() => {\n    settingsManager.initializeSettingsManager();\n  }, []);\n\n  // Apply settings once on initial load\n  useEffect(() => {\n    if (!settings || initialSettingsApplied.current) return;\n    console.log('Initial settings application');\n\n    // Apply each type of settings separately to avoid race conditions\n    setTimeout(() => {\n      settingsManager.applyThemeSettings(settings);\n      setTimeout(() => {\n        settingsManager.applyAccessibilitySettings(settings);\n        if (settings.preferences && settings.preferences.language) {\n          setTimeout(() => {\n            settingsManager.applyLanguageSettings(settings.preferences.language);\n            initialSettingsApplied.current = true;\n          }, 50);\n        } else {\n          initialSettingsApplied.current = true;\n        }\n      }, 50);\n    }, 50);\n  }, [settings]);\n\n  // Handle settings updates after initial load\n  useEffect(() => {\n    if (!settings || !initialSettingsApplied.current) return;\n    console.log('Handling settings update');\n\n    // Only apply settings if they have changed\n    settingsManager.applyThemeSettings(settings);\n    settingsManager.applyAccessibilitySettings(settings);\n    if (settings.preferences && settings.preferences.language) {\n      settingsManager.applyLanguageSettings(settings.preferences.language);\n    }\n  }, [settings]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(AppSettingsWrapper, \"OCx+J8DNsw9zyXfx3d6CWpKgxVg=\", false, function () {\n  return [useSettings];\n});\n_c = AppSettingsWrapper;\nexport default AppSettingsWrapper;\nvar _c;\n$RefreshReg$(_c, \"AppSettingsWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useSettings","settingsManager","jsxDEV","_jsxDEV","AppSettingsWrapper","children","_s","settings","initialSettingsApplied","initializeSettingsManager","current","console","log","setTimeout","applyThemeSettings","applyAccessibilitySettings","preferences","language","applyLanguageSettings","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/components/UI/AppSettingsWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { useSettings } from '../../context/SettingsContext';\r\nimport settingsManager from '../../utils/settingsManager';\r\n\r\n/**\r\n * Component that wraps the application and applies the current theme and settings\r\n * Uses the singleton pattern to prevent multiple settings applications\r\n * \r\n * @param {Object} props Component props\r\n * @param {React.ReactNode} props.children Child components\r\n * @returns {React.ReactNode} Wrapped children\r\n */\r\nfunction AppSettingsWrapper({ children }) {\r\n  const { settings } = useSettings();\r\n  const initialSettingsApplied = useRef(false);\r\n  \r\n  // Initialize the settings manager once\r\n  useEffect(() => {\r\n    settingsManager.initializeSettingsManager();\r\n  }, []);\r\n  \r\n  // Apply settings once on initial load\r\n  useEffect(() => {\r\n    if (!settings || initialSettingsApplied.current) return;\r\n    \r\n    console.log('Initial settings application');\r\n    \r\n    // Apply each type of settings separately to avoid race conditions\r\n    setTimeout(() => {\r\n      settingsManager.applyThemeSettings(settings);\r\n      \r\n      setTimeout(() => {\r\n        settingsManager.applyAccessibilitySettings(settings);\r\n        \r\n        if (settings.preferences && settings.preferences.language) {\r\n          setTimeout(() => {\r\n            settingsManager.applyLanguageSettings(settings.preferences.language);\r\n            initialSettingsApplied.current = true;\r\n          }, 50);\r\n        } else {\r\n          initialSettingsApplied.current = true;\r\n        }\r\n      }, 50);\r\n    }, 50);\r\n  }, [settings]);\r\n  \r\n  // Handle settings updates after initial load\r\n  useEffect(() => {\r\n    if (!settings || !initialSettingsApplied.current) return;\r\n    \r\n    console.log('Handling settings update');\r\n    \r\n    // Only apply settings if they have changed\r\n    settingsManager.applyThemeSettings(settings);\r\n    settingsManager.applyAccessibilitySettings(settings);\r\n    \r\n    if (settings.preferences && settings.preferences.language) {\r\n      settingsManager.applyLanguageSettings(settings.preferences.language);\r\n    }\r\n  }, [settings]);\r\n  \r\n  return (\r\n    <div className=\"app-container\">\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppSettingsWrapper;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,SAASC,WAAW,QAAQ,+BAA+B;AAC3D,OAAOC,eAAe,MAAM,6BAA6B;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,SAAAC,MAAA,IAAAC,OAAA;AAQA,SAASC,kBAAkBA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACxC,MAAM;IAAEC;EAAS,CAAC,GAAGP,WAAW,CAAC,CAAC;EAClC,MAAMQ,sBAAsB,GAAGT,MAAM,CAAC,KAAK,CAAC;;EAE5C;EACAD,SAAS,CAAC,MAAM;IACdG,eAAe,CAACQ,yBAAyB,CAAC,CAAC;EAC7C,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAX,SAAS,CAAC,MAAM;IACd,IAAI,CAACS,QAAQ,IAAIC,sBAAsB,CAACE,OAAO,EAAE;IAEjDC,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;;IAE3C;IACAC,UAAU,CAAC,MAAM;MACfZ,eAAe,CAACa,kBAAkB,CAACP,QAAQ,CAAC;MAE5CM,UAAU,CAAC,MAAM;QACfZ,eAAe,CAACc,0BAA0B,CAACR,QAAQ,CAAC;QAEpD,IAAIA,QAAQ,CAACS,WAAW,IAAIT,QAAQ,CAACS,WAAW,CAACC,QAAQ,EAAE;UACzDJ,UAAU,CAAC,MAAM;YACfZ,eAAe,CAACiB,qBAAqB,CAACX,QAAQ,CAACS,WAAW,CAACC,QAAQ,CAAC;YACpET,sBAAsB,CAACE,OAAO,GAAG,IAAI;UACvC,CAAC,EAAE,EAAE,CAAC;QACR,CAAC,MAAM;UACLF,sBAAsB,CAACE,OAAO,GAAG,IAAI;QACvC;MACF,CAAC,EAAE,EAAE,CAAC;IACR,CAAC,EAAE,EAAE,CAAC;EACR,CAAC,EAAE,CAACH,QAAQ,CAAC,CAAC;;EAEd;EACAT,SAAS,CAAC,MAAM;IACd,IAAI,CAACS,QAAQ,IAAI,CAACC,sBAAsB,CAACE,OAAO,EAAE;IAElDC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;;IAEvC;IACAX,eAAe,CAACa,kBAAkB,CAACP,QAAQ,CAAC;IAC5CN,eAAe,CAACc,0BAA0B,CAACR,QAAQ,CAAC;IAEpD,IAAIA,QAAQ,CAACS,WAAW,IAAIT,QAAQ,CAACS,WAAW,CAACC,QAAQ,EAAE;MACzDhB,eAAe,CAACiB,qBAAqB,CAACX,QAAQ,CAACS,WAAW,CAACC,QAAQ,CAAC;IACtE;EACF,CAAC,EAAE,CAACV,QAAQ,CAAC,CAAC;EAEd,oBACEJ,OAAA;IAAKgB,SAAS,EAAC,eAAe;IAAAd,QAAA,EAC3BA;EAAQ;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACjB,EAAA,CAtDQF,kBAAkB;EAAA,QACJJ,WAAW;AAAA;AAAAwB,EAAA,GADzBpB,kBAAkB;AAwD3B,eAAeA,kBAAkB;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}