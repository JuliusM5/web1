{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\context\\\\SubscriptionContext.jsx\",\n  _s = $RefreshSig$();\n// src/context/SubscriptionContext.jsx\n\nimport React, { createContext, useState, useEffect } from 'react';\n\n// Create the context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SubscriptionContext = /*#__PURE__*/createContext(null);\nexport const SubscriptionProvider = ({\n  children\n}) => {\n  _s();\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  const [subscriptionPlan, setSubscriptionPlan] = useState(null);\n  const [freeAlertCount, setFreeAlertCount] = useState(0);\n  const [expiryDate, setExpiryDate] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Load subscription state on mount\n  useEffect(() => {\n    const loadSubscription = async () => {\n      try {\n        const savedState = localStorage.getItem('user_subscription');\n        if (savedState) {\n          const state = JSON.parse(savedState);\n          setIsSubscribed(state.isSubscribed);\n          setSubscriptionPlan(state.plan);\n          setFreeAlertCount(state.freeAlertsUsed || 0);\n          setExpiryDate(state.expiryDate ? new Date(state.expiryDate) : null);\n        }\n      } catch (error) {\n        console.error('Error loading subscription:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadSubscription();\n  }, []);\n  const incrementFreeAlertCount = () => {\n    if (!isSubscribed && freeAlertCount < 3) {\n      const newCount = freeAlertCount + 1;\n      setFreeAlertCount(newCount);\n\n      // Update localStorage\n      try {\n        const savedState = localStorage.getItem('user_subscription');\n        const state = savedState ? JSON.parse(savedState) : {};\n        state.freeAlertsUsed = newCount;\n        localStorage.setItem('user_subscription', JSON.stringify(state));\n      } catch (error) {\n        console.error('Error saving free alert count:', error);\n      }\n      return true;\n    }\n    return false;\n  };\n  const startSubscription = async plan => {\n    setLoading(true);\n    try {\n      // Mock subscription process\n      const expiryDate = new Date();\n      expiryDate.setDate(expiryDate.getDate() + 30); // 30 day subscription\n\n      setIsSubscribed(true);\n      setSubscriptionPlan(plan);\n      setExpiryDate(expiryDate);\n\n      // Update localStorage\n      const state = {\n        isSubscribed: true,\n        plan: plan,\n        expiryDate: expiryDate.toISOString(),\n        freeAlertsUsed: freeAlertCount\n      };\n      localStorage.setItem('user_subscription', JSON.stringify(state));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const cancelSubscription = async () => {\n    setLoading(true);\n    try {\n      setIsSubscribed(false);\n      setSubscriptionPlan(null);\n      setExpiryDate(null);\n\n      // Update localStorage\n      const state = {\n        isSubscribed: false,\n        plan: null,\n        expiryDate: null,\n        freeAlertsUsed: freeAlertCount\n      };\n      localStorage.setItem('user_subscription', JSON.stringify(state));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SubscriptionContext.Provider, {\n    value: {\n      isSubscribed,\n      subscriptionPlan,\n      freeAlertCount,\n      expiryDate,\n      loading,\n      incrementFreeAlertCount,\n      startSubscription,\n      cancelSubscription\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 5\n  }, this);\n};\n_s(SubscriptionProvider, \"ubHWJTlxhnt8lzkN1iO+X6VwAZE=\");\n_c = SubscriptionProvider;\nvar _c;\n$RefreshReg$(_c, \"SubscriptionProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","SubscriptionContext","SubscriptionProvider","children","_s","isSubscribed","setIsSubscribed","subscriptionPlan","setSubscriptionPlan","freeAlertCount","setFreeAlertCount","expiryDate","setExpiryDate","loading","setLoading","loadSubscription","savedState","localStorage","getItem","state","JSON","parse","plan","freeAlertsUsed","Date","error","console","incrementFreeAlertCount","newCount","setItem","stringify","startSubscription","setDate","getDate","toISOString","success","message","cancelSubscription","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/context/SubscriptionContext.jsx"],"sourcesContent":["// src/context/SubscriptionContext.jsx\r\n\r\nimport React, { createContext, useState, useEffect } from 'react';\r\n\r\n// Create the context\r\nexport const SubscriptionContext = createContext(null);\r\n\r\nexport const SubscriptionProvider = ({ children }) => {\r\n  const [isSubscribed, setIsSubscribed] = useState(false);\r\n  const [subscriptionPlan, setSubscriptionPlan] = useState(null);\r\n  const [freeAlertCount, setFreeAlertCount] = useState(0);\r\n  const [expiryDate, setExpiryDate] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  // Load subscription state on mount\r\n  useEffect(() => {\r\n    const loadSubscription = async () => {\r\n      try {\r\n        const savedState = localStorage.getItem('user_subscription');\r\n        if (savedState) {\r\n          const state = JSON.parse(savedState);\r\n          setIsSubscribed(state.isSubscribed);\r\n          setSubscriptionPlan(state.plan);\r\n          setFreeAlertCount(state.freeAlertsUsed || 0);\r\n          setExpiryDate(state.expiryDate ? new Date(state.expiryDate) : null);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading subscription:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadSubscription();\r\n  }, []);\r\n  \r\n  const incrementFreeAlertCount = () => {\r\n    if (!isSubscribed && freeAlertCount < 3) {\r\n      const newCount = freeAlertCount + 1;\r\n      setFreeAlertCount(newCount);\r\n      \r\n      // Update localStorage\r\n      try {\r\n        const savedState = localStorage.getItem('user_subscription');\r\n        const state = savedState ? JSON.parse(savedState) : {};\r\n        state.freeAlertsUsed = newCount;\r\n        localStorage.setItem('user_subscription', JSON.stringify(state));\r\n      } catch (error) {\r\n        console.error('Error saving free alert count:', error);\r\n      }\r\n      \r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  \r\n  const startSubscription = async (plan) => {\r\n    setLoading(true);\r\n    try {\r\n      // Mock subscription process\r\n      const expiryDate = new Date();\r\n      expiryDate.setDate(expiryDate.getDate() + 30); // 30 day subscription\r\n      \r\n      setIsSubscribed(true);\r\n      setSubscriptionPlan(plan);\r\n      setExpiryDate(expiryDate);\r\n      \r\n      // Update localStorage\r\n      const state = {\r\n        isSubscribed: true,\r\n        plan: plan,\r\n        expiryDate: expiryDate.toISOString(),\r\n        freeAlertsUsed: freeAlertCount\r\n      };\r\n      localStorage.setItem('user_subscription', JSON.stringify(state));\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  const cancelSubscription = async () => {\r\n    setLoading(true);\r\n    try {\r\n      setIsSubscribed(false);\r\n      setSubscriptionPlan(null);\r\n      setExpiryDate(null);\r\n      \r\n      // Update localStorage\r\n      const state = {\r\n        isSubscribed: false,\r\n        plan: null,\r\n        expiryDate: null,\r\n        freeAlertsUsed: freeAlertCount\r\n      };\r\n      localStorage.setItem('user_subscription', JSON.stringify(state));\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <SubscriptionContext.Provider value={{\r\n      isSubscribed,\r\n      subscriptionPlan,\r\n      freeAlertCount,\r\n      expiryDate,\r\n      loading,\r\n      incrementFreeAlertCount,\r\n      startSubscription,\r\n      cancelSubscription\r\n    }}>\r\n      {children}\r\n    </SubscriptionContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}