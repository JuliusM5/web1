{"ast":null,"code":"var _s = $RefreshSig$();\n/**\r\n * Device Detection Utilities\r\n * \r\n * Provides functions to detect device type, screen size, capabilities,\r\n * and orientation for responsive design and feature detection.\r\n */\n\nimport { useState, useEffect } from 'react';\nexport const deviceDetection = () => {\n  const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n  return {\n    isMobile: /iPhone|iPad|iPod|Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(userAgent),\n    isAndroid: /Android/i.test(userAgent),\n    isIOS: /iPhone|iPad|iPod/i.test(userAgent) && !window.MSStream,\n    isTablet: /iPad/i.test(userAgent) || /Android/i.test(userAgent) && !/Mobile/i.test(userAgent),\n    isDesktop: !/iPhone|iPad|iPod|Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(userAgent)\n  };\n};\n/**\r\n * Device type constants\r\n */\nexport const DEVICE_TYPES = {\n  MOBILE: 'mobile',\n  TABLET: 'tablet',\n  DESKTOP: 'desktop'\n};\n\n/**\r\n * Screen size breakpoints (in pixels)\r\n */\nexport const BREAKPOINTS = {\n  SMALL: 640,\n  // Mobile\n  MEDIUM: 768,\n  // Small tablet\n  LARGE: 1024,\n  // Large tablet/small desktop\n  XL: 1280,\n  // Desktop\n  XXL: 1536 // Large desktop\n};\n\n/**\r\n * Check if the app is running in a browser environment\r\n * \r\n * @returns {boolean} True if in browser environment\r\n */\nexport const isBrowser = () => {\n  return typeof window !== 'undefined';\n};\n\n/**\r\n * Detect device type based on user agent\r\n * \r\n * @returns {string} Device type (mobile, tablet, or desktop)\r\n */\nexport const detectDeviceType = () => {\n  if (!isBrowser()) return DEVICE_TYPES.DESKTOP;\n  const userAgent = navigator.userAgent.toLowerCase();\n\n  // Check for tablets first (some tablets identify as both mobile and tablet)\n  const isTablet = /(tablet|ipad|playbook|silk)|(android(?!.*mobile))/i.test(userAgent);\n  if (isTablet) return DEVICE_TYPES.TABLET;\n\n  // Check for mobile devices\n  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);\n  if (isMobile) return DEVICE_TYPES.MOBILE;\n\n  // Default to desktop\n  return DEVICE_TYPES.DESKTOP;\n};\n\n/**\r\n * Get current screen size category\r\n * \r\n * @returns {string} Screen size category (sm, md, lg, xl, xxl)\r\n */\nexport const getScreenSizeCategory = () => {\n  if (!isBrowser()) return 'lg';\n  const width = window.innerWidth;\n  if (width < BREAKPOINTS.SMALL) return 'sm';\n  if (width < BREAKPOINTS.MEDIUM) return 'md';\n  if (width < BREAKPOINTS.LARGE) return 'lg';\n  if (width < BREAKPOINTS.XL) return 'xl';\n  return 'xxl';\n};\n\n/**\r\n * Check if the device is using a touch interface\r\n * \r\n * @returns {boolean} True if touch is supported\r\n */\nexport const isTouchDevice = () => {\n  if (!isBrowser()) return false;\n  return 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;\n};\n\n/**\r\n * Get current device orientation\r\n * \r\n * @returns {string} Device orientation (portrait or landscape)\r\n */\nexport const getDeviceOrientation = () => {\n  if (!isBrowser()) return 'landscape';\n  return window.matchMedia(\"(orientation: portrait)\").matches ? 'portrait' : 'landscape';\n};\n\n/**\r\n * Check device network information\r\n * \r\n * @returns {Object} Network information\r\n */\nexport const getNetworkInfo = () => {\n  if (!isBrowser()) {\n    return {\n      online: true,\n      effectiveType: '4g',\n      saveData: false\n    };\n  }\n  const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\n  return {\n    online: navigator.onLine,\n    effectiveType: (connection === null || connection === void 0 ? void 0 : connection.effectiveType) || '4g',\n    saveData: (connection === null || connection === void 0 ? void 0 : connection.saveData) || false\n  };\n};\n\n/**\r\n * Device capability detection\r\n * \r\n * @returns {Object} Device capabilities\r\n */\nexport const detectCapabilities = () => {\n  if (!isBrowser()) {\n    return {\n      pwa: false,\n      notifications: false,\n      geolocation: false,\n      camera: false,\n      bluetooth: false,\n      webShare: false\n    };\n  }\n  return {\n    // PWA installation capability\n    pwa: 'serviceWorker' in navigator && window.matchMedia('(display-mode: standalone)').matches,\n    // Notification support\n    notifications: 'Notification' in window,\n    // Geolocation support\n    geolocation: 'geolocation' in navigator,\n    // Camera access\n    camera: 'mediaDevices' in navigator && 'getUserMedia' in navigator.mediaDevices,\n    // Bluetooth support\n    bluetooth: 'bluetooth' in navigator,\n    // Web share API\n    webShare: 'share' in navigator\n  };\n};\n\n/**\r\n * React hook for device detection\r\n * \r\n * @returns {Object} Device information that updates on window resize\r\n */\nexport const useDeviceDetection = () => {\n  _s();\n  // Default state for SSR\n  const defaultState = {\n    isMobile: false,\n    isTablet: false,\n    isDesktop: true,\n    screenSize: 'lg',\n    orientation: 'landscape',\n    isTouch: false,\n    online: true,\n    capabilities: {\n      pwa: false,\n      notifications: false,\n      geolocation: false,\n      camera: false,\n      bluetooth: false,\n      webShare: false\n    }\n  };\n\n  // Initialize state\n  const [deviceInfo, setDeviceInfo] = useState(defaultState);\n  useEffect(() => {\n    // Function to update device information\n    const updateDeviceInfo = () => {\n      const deviceType = detectDeviceType();\n      const screenSize = getScreenSizeCategory();\n      const orientation = getDeviceOrientation();\n      const isTouch = isTouchDevice();\n      const {\n        online\n      } = getNetworkInfo();\n      const capabilities = detectCapabilities();\n      setDeviceInfo({\n        isMobile: deviceType === DEVICE_TYPES.MOBILE,\n        isTablet: deviceType === DEVICE_TYPES.TABLET,\n        isDesktop: deviceType === DEVICE_TYPES.DESKTOP,\n        screenSize,\n        orientation,\n        isTouch,\n        online,\n        capabilities\n      });\n    };\n\n    // Initial update\n    updateDeviceInfo();\n\n    // Add event listeners\n    window.addEventListener('resize', updateDeviceInfo);\n    window.addEventListener('orientationchange', updateDeviceInfo);\n    window.addEventListener('online', updateDeviceInfo);\n    window.addEventListener('offline', updateDeviceInfo);\n\n    // Cleanup function\n    return () => {\n      window.removeEventListener('resize', updateDeviceInfo);\n      window.removeEventListener('orientationchange', updateDeviceInfo);\n      window.removeEventListener('online', updateDeviceInfo);\n      window.removeEventListener('offline', updateDeviceInfo);\n    };\n  }, []);\n  return deviceInfo;\n};\n\n/**\r\n * Check if the current device is a mobile device\r\n * \r\n * @returns {boolean} True if mobile device\r\n */\n_s(useDeviceDetection, \"dOVIPdIPr3ozTWokj6XuORWEZUk=\");\nexport const isMobileDevice = () => {\n  return detectDeviceType() === DEVICE_TYPES.MOBILE;\n};\n\n/**\r\n * Check if the current device is a tablet\r\n * \r\n * @returns {boolean} True if tablet device\r\n */\nexport const isTabletDevice = () => {\n  return detectDeviceType() === DEVICE_TYPES.TABLET;\n};\n\n/**\r\n * Check if the current device is a desktop\r\n * \r\n * @returns {boolean} True if desktop device\r\n */\nexport const isDesktopDevice = () => {\n  return detectDeviceType() === DEVICE_TYPES.DESKTOP;\n};","map":{"version":3,"names":["useState","useEffect","deviceDetection","userAgent","navigator","vendor","window","opera","isMobile","test","isAndroid","isIOS","MSStream","isTablet","isDesktop","DEVICE_TYPES","MOBILE","TABLET","DESKTOP","BREAKPOINTS","SMALL","MEDIUM","LARGE","XL","XXL","isBrowser","detectDeviceType","toLowerCase","getScreenSizeCategory","width","innerWidth","isTouchDevice","maxTouchPoints","msMaxTouchPoints","getDeviceOrientation","matchMedia","matches","getNetworkInfo","online","effectiveType","saveData","connection","mozConnection","webkitConnection","onLine","detectCapabilities","pwa","notifications","geolocation","camera","bluetooth","webShare","mediaDevices","useDeviceDetection","_s","defaultState","screenSize","orientation","isTouch","capabilities","deviceInfo","setDeviceInfo","updateDeviceInfo","deviceType","addEventListener","removeEventListener","isMobileDevice","isTabletDevice","isDesktopDevice"],"sources":["C:/Users/juliu/Desktop/web/src/utils/deviceDetection.js"],"sourcesContent":["/**\r\n * Device Detection Utilities\r\n * \r\n * Provides functions to detect device type, screen size, capabilities,\r\n * and orientation for responsive design and feature detection.\r\n */\r\n\r\nimport { useState, useEffect } from 'react';\r\nexport const deviceDetection = () => {\r\n  const userAgent = navigator.userAgent || navigator.vendor || window.opera;\r\n  \r\n  return {\r\n    isMobile: /iPhone|iPad|iPod|Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(userAgent),\r\n    isAndroid: /Android/i.test(userAgent),\r\n    isIOS: /iPhone|iPad|iPod/i.test(userAgent) && !window.MSStream,\r\n    isTablet: (/iPad/i.test(userAgent) || \r\n              (/Android/i.test(userAgent) && !/Mobile/i.test(userAgent))),\r\n    isDesktop: !(/iPhone|iPad|iPod|Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(userAgent))\r\n  };\r\n}; \r\n/**\r\n * Device type constants\r\n */\r\nexport const DEVICE_TYPES = {\r\n  MOBILE: 'mobile',\r\n  TABLET: 'tablet',\r\n  DESKTOP: 'desktop'\r\n};\r\n\r\n/**\r\n * Screen size breakpoints (in pixels)\r\n */\r\nexport const BREAKPOINTS = {\r\n  SMALL: 640,   // Mobile\r\n  MEDIUM: 768,  // Small tablet\r\n  LARGE: 1024,  // Large tablet/small desktop\r\n  XL: 1280,     // Desktop\r\n  XXL: 1536     // Large desktop\r\n};\r\n\r\n/**\r\n * Check if the app is running in a browser environment\r\n * \r\n * @returns {boolean} True if in browser environment\r\n */\r\nexport const isBrowser = () => {\r\n  return typeof window !== 'undefined';\r\n};\r\n\r\n/**\r\n * Detect device type based on user agent\r\n * \r\n * @returns {string} Device type (mobile, tablet, or desktop)\r\n */\r\nexport const detectDeviceType = () => {\r\n  if (!isBrowser()) return DEVICE_TYPES.DESKTOP;\r\n  \r\n  const userAgent = navigator.userAgent.toLowerCase();\r\n  \r\n  // Check for tablets first (some tablets identify as both mobile and tablet)\r\n  const isTablet = /(tablet|ipad|playbook|silk)|(android(?!.*mobile))/i.test(userAgent);\r\n  if (isTablet) return DEVICE_TYPES.TABLET;\r\n  \r\n  // Check for mobile devices\r\n  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);\r\n  if (isMobile) return DEVICE_TYPES.MOBILE;\r\n  \r\n  // Default to desktop\r\n  return DEVICE_TYPES.DESKTOP;\r\n};\r\n\r\n/**\r\n * Get current screen size category\r\n * \r\n * @returns {string} Screen size category (sm, md, lg, xl, xxl)\r\n */\r\nexport const getScreenSizeCategory = () => {\r\n  if (!isBrowser()) return 'lg';\r\n  \r\n  const width = window.innerWidth;\r\n  \r\n  if (width < BREAKPOINTS.SMALL) return 'sm';\r\n  if (width < BREAKPOINTS.MEDIUM) return 'md';\r\n  if (width < BREAKPOINTS.LARGE) return 'lg';\r\n  if (width < BREAKPOINTS.XL) return 'xl';\r\n  return 'xxl';\r\n};\r\n\r\n/**\r\n * Check if the device is using a touch interface\r\n * \r\n * @returns {boolean} True if touch is supported\r\n */\r\nexport const isTouchDevice = () => {\r\n  if (!isBrowser()) return false;\r\n  \r\n  return (('ontouchstart' in window) ||\r\n    (navigator.maxTouchPoints > 0) ||\r\n    (navigator.msMaxTouchPoints > 0));\r\n};\r\n\r\n/**\r\n * Get current device orientation\r\n * \r\n * @returns {string} Device orientation (portrait or landscape)\r\n */\r\nexport const getDeviceOrientation = () => {\r\n  if (!isBrowser()) return 'landscape';\r\n  \r\n  return window.matchMedia(\"(orientation: portrait)\").matches ? 'portrait' : 'landscape';\r\n};\r\n\r\n/**\r\n * Check device network information\r\n * \r\n * @returns {Object} Network information\r\n */\r\nexport const getNetworkInfo = () => {\r\n  if (!isBrowser()) {\r\n    return {\r\n      online: true,\r\n      effectiveType: '4g',\r\n      saveData: false\r\n    };\r\n  }\r\n  \r\n  const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\r\n  \r\n  return {\r\n    online: navigator.onLine,\r\n    effectiveType: connection?.effectiveType || '4g',\r\n    saveData: connection?.saveData || false\r\n  };\r\n};\r\n\r\n/**\r\n * Device capability detection\r\n * \r\n * @returns {Object} Device capabilities\r\n */\r\nexport const detectCapabilities = () => {\r\n  if (!isBrowser()) {\r\n    return {\r\n      pwa: false,\r\n      notifications: false,\r\n      geolocation: false,\r\n      camera: false,\r\n      bluetooth: false,\r\n      webShare: false\r\n    };\r\n  }\r\n  \r\n  return {\r\n    // PWA installation capability\r\n    pwa: 'serviceWorker' in navigator && window.matchMedia('(display-mode: standalone)').matches,\r\n    // Notification support\r\n    notifications: 'Notification' in window,\r\n    // Geolocation support\r\n    geolocation: 'geolocation' in navigator,\r\n    // Camera access\r\n    camera: 'mediaDevices' in navigator && 'getUserMedia' in navigator.mediaDevices,\r\n    // Bluetooth support\r\n    bluetooth: 'bluetooth' in navigator,\r\n    // Web share API\r\n    webShare: 'share' in navigator\r\n  };\r\n};\r\n\r\n/**\r\n * React hook for device detection\r\n * \r\n * @returns {Object} Device information that updates on window resize\r\n */\r\nexport const useDeviceDetection = () => {\r\n  // Default state for SSR\r\n  const defaultState = {\r\n    isMobile: false,\r\n    isTablet: false,\r\n    isDesktop: true,\r\n    screenSize: 'lg',\r\n    orientation: 'landscape',\r\n    isTouch: false,\r\n    online: true,\r\n    capabilities: {\r\n      pwa: false,\r\n      notifications: false,\r\n      geolocation: false,\r\n      camera: false,\r\n      bluetooth: false,\r\n      webShare: false\r\n    }\r\n  };\r\n  \r\n  // Initialize state\r\n  const [deviceInfo, setDeviceInfo] = useState(defaultState);\r\n  \r\n  useEffect(() => {\r\n    // Function to update device information\r\n    const updateDeviceInfo = () => {\r\n      const deviceType = detectDeviceType();\r\n      const screenSize = getScreenSizeCategory();\r\n      const orientation = getDeviceOrientation();\r\n      const isTouch = isTouchDevice();\r\n      const { online } = getNetworkInfo();\r\n      const capabilities = detectCapabilities();\r\n      \r\n      setDeviceInfo({\r\n        isMobile: deviceType === DEVICE_TYPES.MOBILE,\r\n        isTablet: deviceType === DEVICE_TYPES.TABLET,\r\n        isDesktop: deviceType === DEVICE_TYPES.DESKTOP,\r\n        screenSize,\r\n        orientation,\r\n        isTouch,\r\n        online,\r\n        capabilities\r\n      });\r\n    };\r\n    \r\n    // Initial update\r\n    updateDeviceInfo();\r\n    \r\n    // Add event listeners\r\n    window.addEventListener('resize', updateDeviceInfo);\r\n    window.addEventListener('orientationchange', updateDeviceInfo);\r\n    window.addEventListener('online', updateDeviceInfo);\r\n    window.addEventListener('offline', updateDeviceInfo);\r\n    \r\n    // Cleanup function\r\n    return () => {\r\n      window.removeEventListener('resize', updateDeviceInfo);\r\n      window.removeEventListener('orientationchange', updateDeviceInfo);\r\n      window.removeEventListener('online', updateDeviceInfo);\r\n      window.removeEventListener('offline', updateDeviceInfo);\r\n    };\r\n  }, []);\r\n  \r\n  return deviceInfo;\r\n};\r\n\r\n/**\r\n * Check if the current device is a mobile device\r\n * \r\n * @returns {boolean} True if mobile device\r\n */\r\nexport const isMobileDevice = () => {\r\n  return detectDeviceType() === DEVICE_TYPES.MOBILE;\r\n};\r\n\r\n/**\r\n * Check if the current device is a tablet\r\n * \r\n * @returns {boolean} True if tablet device\r\n */\r\nexport const isTabletDevice = () => {\r\n  return detectDeviceType() === DEVICE_TYPES.TABLET;\r\n};\r\n\r\n/**\r\n * Check if the current device is a desktop\r\n * \r\n * @returns {boolean} True if desktop device\r\n */\r\nexport const isDesktopDevice = () => {\r\n  return detectDeviceType() === DEVICE_TYPES.DESKTOP;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}