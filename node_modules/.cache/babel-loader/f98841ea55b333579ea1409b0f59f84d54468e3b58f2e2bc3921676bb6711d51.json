{"ast":null,"code":"import{useSettings}from'../context/SettingsContext';import{formatCurrency,formatDate,formatTemperature,formatDistance}from'../utils/settingsUtils';/**\r\n * Custom hook for accessing and using application settings\r\n * Provides formatted values based on user preferences\r\n * \r\n * @returns {Object} Utility functions and settings\r\n */export const useAppSettings=()=>{const{settings,updateSettings,resetSettings}=useSettings();/**\r\n   * Format currency according to user settings\r\n   * \r\n   * @param {number} amount Amount to format\r\n   * @returns {string} Formatted currency string\r\n   */const currency=amount=>formatCurrency(amount,settings);/**\r\n   * Format date according to user settings\r\n   * \r\n   * @param {string|Date} date Date to format\r\n   * @returns {string} Formatted date string\r\n   */const date=dateValue=>formatDate(dateValue,settings);/**\r\n   * Format temperature according to user settings\r\n   * \r\n   * @param {number} celsius Temperature in Celsius\r\n   * @returns {string} Formatted temperature string\r\n   */const temperature=celsius=>formatTemperature(celsius,settings);/**\r\n   * Format distance according to user settings\r\n   * \r\n   * @param {number} kilometers Distance in kilometers\r\n   * @returns {string} Formatted distance string\r\n   */const distance=kilometers=>formatDistance(kilometers,settings);/**\r\n   * Get current color scheme\r\n   * \r\n   * @returns {string} Current color scheme\r\n   */const getColorScheme=()=>settings.appearance.colorScheme;/**\r\n   * Get current font size\r\n   * \r\n   * @returns {string} Current font size\r\n   */const getFontSize=()=>settings.appearance.fontSize;/**\r\n   * Check if dark mode is enabled\r\n   * \r\n   * @returns {boolean} Whether dark mode is enabled\r\n   */const isDarkMode=()=>{var _settings$appearance;return((_settings$appearance=settings.appearance)===null||_settings$appearance===void 0?void 0:_settings$appearance.darkMode)||false;};/**\r\n   * Check if a notification type is enabled\r\n   * \r\n   * @param {string} type Notification type (tripReminders, taskReminders, budgetAlerts, emailNotifications)\r\n   * @returns {boolean} Whether the notification type is enabled\r\n   */const isNotificationEnabled=type=>{if(!settings.notifications)return false;return!!settings.notifications[type];};/**\r\n   * Get the email address for notifications\r\n   * \r\n   * @returns {string} Email address for notifications\r\n   */const getNotificationEmail=()=>{var _settings$notificatio;return((_settings$notificatio=settings.notifications)===null||_settings$notificatio===void 0?void 0:_settings$notificatio.emailAddress)||'';};/**\r\n   * Get the notification frequency\r\n   * \r\n   * @returns {string} Notification frequency (instant, daily, weekly)\r\n   */const getNotificationFrequency=()=>{var _settings$notificatio2;return((_settings$notificatio2=settings.notifications)===null||_settings$notificatio2===void 0?void 0:_settings$notificatio2.emailFrequency)||'daily';};/**\r\n   * Get current language\r\n   * \r\n   * @returns {string} Current language code\r\n   */const getLanguage=()=>settings.preferences.language;/**\r\n   * Check if an accessibility feature is enabled\r\n   * \r\n   * @param {string} feature Accessibility feature (highContrast, reducedMotion, largerClickTargets, screenReaderOptimized)\r\n   * @returns {boolean} Whether the feature is enabled\r\n   */const isAccessibilityFeatureEnabled=feature=>{if(!settings.accessibility)return false;return!!settings.accessibility[feature];};/**\r\n   * Get text scaling percentage\r\n   * \r\n   * @returns {number} Text scaling percentage (100-200)\r\n   */const getTextScaling=()=>{var _settings$accessibili;return((_settings$accessibili=settings.accessibility)===null||_settings$accessibili===void 0?void 0:_settings$accessibili.textScaling)||100;};/**\r\n   * Check if location sharing is enabled\r\n   * \r\n   * @returns {boolean} Whether location sharing is enabled\r\n   */const isLocationSharingEnabled=()=>{var _settings$privacy;return((_settings$privacy=settings.privacy)===null||_settings$privacy===void 0?void 0:_settings$privacy.shareLocationData)||false;};/**\r\n   * Check if analytics collection is enabled\r\n   * \r\n   * @returns {boolean} Whether analytics collection is enabled\r\n   */const isAnalyticsEnabled=()=>{var _settings$privacy2;return((_settings$privacy2=settings.privacy)===null||_settings$privacy2===void 0?void 0:_settings$privacy2.collectAnalytics)||false;};/**\r\n   * Check if auto-save is enabled\r\n   * \r\n   * @returns {boolean} Whether auto-save is enabled\r\n   */const isAutoSaveEnabled=()=>{var _settings$privacy3;return((_settings$privacy3=settings.privacy)===null||_settings$privacy3===void 0?void 0:_settings$privacy3.autoSaveEnabled)||false;};/**\r\n   * Get data retention period\r\n   * \r\n   * @returns {string} Data retention period (1month, 3months, 6months, 1year, forever)\r\n   */const getDataRetention=()=>{var _settings$privacy4;return((_settings$privacy4=settings.privacy)===null||_settings$privacy4===void 0?void 0:_settings$privacy4.dataRetention)||'forever';};return{settings,updateSettings,resetSettings,currency,date,temperature,distance,getColorScheme,getFontSize,isDarkMode,isNotificationEnabled,getNotificationEmail,getNotificationFrequency,getLanguage,isAccessibilityFeatureEnabled,getTextScaling,isLocationSharingEnabled,isAnalyticsEnabled,isAutoSaveEnabled,getDataRetention};};export default useAppSettings;","map":{"version":3,"names":["useSettings","formatCurrency","formatDate","formatTemperature","formatDistance","useAppSettings","settings","updateSettings","resetSettings","currency","amount","date","dateValue","temperature","celsius","distance","kilometers","getColorScheme","appearance","colorScheme","getFontSize","fontSize","isDarkMode","_settings$appearance","darkMode","isNotificationEnabled","type","notifications","getNotificationEmail","_settings$notificatio","emailAddress","getNotificationFrequency","_settings$notificatio2","emailFrequency","getLanguage","preferences","language","isAccessibilityFeatureEnabled","feature","accessibility","getTextScaling","_settings$accessibili","textScaling","isLocationSharingEnabled","_settings$privacy","privacy","shareLocationData","isAnalyticsEnabled","_settings$privacy2","collectAnalytics","isAutoSaveEnabled","_settings$privacy3","autoSaveEnabled","getDataRetention","_settings$privacy4","dataRetention"],"sources":["C:/Users/juliu/Desktop/web/src/utils/useAppSettings.js"],"sourcesContent":["import { useSettings } from '../context/SettingsContext';\r\nimport { formatCurrency, formatDate, formatTemperature, formatDistance } from '../utils/settingsUtils';\r\n\r\n/**\r\n * Custom hook for accessing and using application settings\r\n * Provides formatted values based on user preferences\r\n * \r\n * @returns {Object} Utility functions and settings\r\n */\r\nexport const useAppSettings = () => {\r\n  const { settings, updateSettings, resetSettings } = useSettings();\r\n\r\n  /**\r\n   * Format currency according to user settings\r\n   * \r\n   * @param {number} amount Amount to format\r\n   * @returns {string} Formatted currency string\r\n   */\r\n  const currency = (amount) => formatCurrency(amount, settings);\r\n  \r\n  /**\r\n   * Format date according to user settings\r\n   * \r\n   * @param {string|Date} date Date to format\r\n   * @returns {string} Formatted date string\r\n   */\r\n  const date = (dateValue) => formatDate(dateValue, settings);\r\n  \r\n  /**\r\n   * Format temperature according to user settings\r\n   * \r\n   * @param {number} celsius Temperature in Celsius\r\n   * @returns {string} Formatted temperature string\r\n   */\r\n  const temperature = (celsius) => formatTemperature(celsius, settings);\r\n  \r\n  /**\r\n   * Format distance according to user settings\r\n   * \r\n   * @param {number} kilometers Distance in kilometers\r\n   * @returns {string} Formatted distance string\r\n   */\r\n  const distance = (kilometers) => formatDistance(kilometers, settings);\r\n  \r\n  /**\r\n   * Get current color scheme\r\n   * \r\n   * @returns {string} Current color scheme\r\n   */\r\n  const getColorScheme = () => settings.appearance.colorScheme;\r\n  \r\n  /**\r\n   * Get current font size\r\n   * \r\n   * @returns {string} Current font size\r\n   */\r\n  const getFontSize = () => settings.appearance.fontSize;\r\n  \r\n  /**\r\n   * Check if dark mode is enabled\r\n   * \r\n   * @returns {boolean} Whether dark mode is enabled\r\n   */\r\n  const isDarkMode = () => settings.appearance?.darkMode || false;\r\n  \r\n  /**\r\n   * Check if a notification type is enabled\r\n   * \r\n   * @param {string} type Notification type (tripReminders, taskReminders, budgetAlerts, emailNotifications)\r\n   * @returns {boolean} Whether the notification type is enabled\r\n   */\r\n  const isNotificationEnabled = (type) => {\r\n    if (!settings.notifications) return false;\r\n    return !!settings.notifications[type];\r\n  };\r\n  \r\n  /**\r\n   * Get the email address for notifications\r\n   * \r\n   * @returns {string} Email address for notifications\r\n   */\r\n  const getNotificationEmail = () => settings.notifications?.emailAddress || '';\r\n  \r\n  /**\r\n   * Get the notification frequency\r\n   * \r\n   * @returns {string} Notification frequency (instant, daily, weekly)\r\n   */\r\n  const getNotificationFrequency = () => settings.notifications?.emailFrequency || 'daily';\r\n  \r\n  /**\r\n   * Get current language\r\n   * \r\n   * @returns {string} Current language code\r\n   */\r\n  const getLanguage = () => settings.preferences.language;\r\n  \r\n  /**\r\n   * Check if an accessibility feature is enabled\r\n   * \r\n   * @param {string} feature Accessibility feature (highContrast, reducedMotion, largerClickTargets, screenReaderOptimized)\r\n   * @returns {boolean} Whether the feature is enabled\r\n   */\r\n  const isAccessibilityFeatureEnabled = (feature) => {\r\n    if (!settings.accessibility) return false;\r\n    return !!settings.accessibility[feature];\r\n  };\r\n  \r\n  /**\r\n   * Get text scaling percentage\r\n   * \r\n   * @returns {number} Text scaling percentage (100-200)\r\n   */\r\n  const getTextScaling = () => settings.accessibility?.textScaling || 100;\r\n  \r\n  /**\r\n   * Check if location sharing is enabled\r\n   * \r\n   * @returns {boolean} Whether location sharing is enabled\r\n   */\r\n  const isLocationSharingEnabled = () => settings.privacy?.shareLocationData || false;\r\n  \r\n  /**\r\n   * Check if analytics collection is enabled\r\n   * \r\n   * @returns {boolean} Whether analytics collection is enabled\r\n   */\r\n  const isAnalyticsEnabled = () => settings.privacy?.collectAnalytics || false;\r\n  \r\n  /**\r\n   * Check if auto-save is enabled\r\n   * \r\n   * @returns {boolean} Whether auto-save is enabled\r\n   */\r\n  const isAutoSaveEnabled = () => settings.privacy?.autoSaveEnabled || false;\r\n  \r\n  /**\r\n   * Get data retention period\r\n   * \r\n   * @returns {string} Data retention period (1month, 3months, 6months, 1year, forever)\r\n   */\r\n  const getDataRetention = () => settings.privacy?.dataRetention || 'forever';\r\n  \r\n  return {\r\n    settings,\r\n    updateSettings,\r\n    resetSettings,\r\n    currency,\r\n    date,\r\n    temperature,\r\n    distance,\r\n    getColorScheme,\r\n    getFontSize,\r\n    isDarkMode,\r\n    isNotificationEnabled,\r\n    getNotificationEmail,\r\n    getNotificationFrequency,\r\n    getLanguage,\r\n    isAccessibilityFeatureEnabled,\r\n    getTextScaling,\r\n    isLocationSharingEnabled,\r\n    isAnalyticsEnabled,\r\n    isAutoSaveEnabled,\r\n    getDataRetention\r\n  };\r\n};\r\n\r\nexport default useAppSettings;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}