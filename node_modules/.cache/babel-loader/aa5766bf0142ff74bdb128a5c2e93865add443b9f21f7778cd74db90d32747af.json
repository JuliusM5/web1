{"ast":null,"code":"/**\r\n * Settings Manager - A singleton to manage theme and accessibility settings\r\n * This prevents multiple components from applying the same settings simultaneously\r\n */\n\n// Track settings state with deep comparison\nlet currentSettings = {\n  appearance: null,\n  accessibility: null,\n  language: null\n};\n\n// Add request ID for debugging\nlet requestCounter = 0;\n\n// Locks to prevent concurrent settings application\nlet isApplyingTheme = false;\nlet isApplyingAccessibility = false;\nlet pendingThemeChange = null;\nlet pendingAccessibilityChange = null;\n\n// Set up a global initialization flag\nlet isInitialized = false;\n\n/**\r\n * Deep compare two objects\r\n * @param {Object} obj1 First object\r\n * @param {Object} obj2 Second object\r\n * @returns {boolean} Whether the objects are equal\r\n */\nconst deepEqual = (obj1, obj2) => {\n  if (obj1 === obj2) return true;\n  if (obj1 === null || obj2 === null) return false;\n  if (typeof obj1 !== 'object' || typeof obj2 !== 'object') return obj1 === obj2;\n  const keys1 = Object.keys(obj1);\n  const keys2 = Object.keys(obj2);\n  if (keys1.length !== keys2.length) return false;\n  return keys1.every(key => {\n    if (typeof obj1[key] === 'object' && obj1[key] !== null && typeof obj2[key] === 'object' && obj2[key] !== null) {\n      return deepEqual(obj1[key], obj2[key]);\n    }\n    return obj1[key] === obj2[key];\n  });\n};\n\n/**\r\n * Apply theme settings using a singleton pattern\r\n * @param {Object} settings The settings object\r\n * @returns {boolean} Success indicator\r\n */\nexport const applyThemeSettings = settings => {\n  if (!settings || !settings.appearance) {\n    console.error(\"Invalid settings object provided to applyThemeSettings\");\n    return false;\n  }\n\n  // Ensure manager is initialized\n  if (!isInitialized) {\n    initializeSettingsManager();\n  }\n  const {\n    fontSize,\n    colorScheme,\n    darkMode\n  } = settings.appearance;\n  const requestId = ++requestCounter;\n\n  // Skip if settings haven't changed (deep comparison)\n  if (currentSettings.appearance && deepEqual(currentSettings.appearance, settings.appearance)) {\n    console.log(`Request #${requestId}: Settings unchanged, skipping theme application`);\n    return true;\n  }\n\n  // If already applying settings, store this as pending and return\n  if (isApplyingTheme) {\n    console.log(`Request #${requestId}: Settings application in progress, queueing changes`);\n    pendingThemeChange = {\n      ...settings.appearance\n    };\n    return true;\n  }\n\n  // Lock to prevent concurrent calls\n  isApplyingTheme = true;\n  console.log(`Request #${requestId}: Locking theme settings application`);\n  try {\n    console.log(`Request #${requestId}: Applying theme settings:`, {\n      fontSize,\n      colorScheme,\n      darkMode\n    });\n\n    // Apply font size\n    document.documentElement.classList.remove('text-sm', 'text-base', 'text-lg');\n    if (fontSize === 'small') {\n      document.documentElement.classList.add('text-sm');\n    } else if (fontSize === 'medium') {\n      document.documentElement.classList.add('text-base');\n    } else if (fontSize === 'large') {\n      document.documentElement.classList.add('text-lg');\n    }\n\n    // Apply color scheme\n    const colorSchemeClasses = ['theme-blue', 'theme-purple', 'theme-green', 'theme-red', 'theme-amber', 'theme-indigo'];\n    document.documentElement.classList.remove(...colorSchemeClasses);\n    const themeClass = `theme-${colorScheme}`;\n    document.documentElement.classList.add(themeClass);\n\n    // Apply dark mode\n    if (darkMode) {\n      document.documentElement.classList.add('dark-mode');\n      document.body.classList.add('dark-mode');\n      console.log(`Request #${requestId}: Dark mode classes applied`);\n    } else {\n      document.documentElement.classList.remove('dark-mode');\n      document.body.classList.remove('dark-mode');\n      console.log(`Request #${requestId}: Dark mode classes removed`);\n    }\n\n    // Set a custom property to track current theme\n    document.documentElement.style.setProperty('--current-theme', colorScheme);\n    document.documentElement.setAttribute('data-theme', darkMode ? 'dark' : 'light');\n\n    // Update current settings with a deep copy\n    currentSettings.appearance = JSON.parse(JSON.stringify(settings.appearance));\n    console.log(`Request #${requestId}: Applied theme: ${colorScheme}, font size: ${fontSize}, dark mode: ${darkMode}`);\n    return true;\n  } catch (error) {\n    console.error(`Request #${requestId}: Error applying theme settings:`, error);\n    return false;\n  } finally {\n    // Release lock\n    console.log(`Request #${requestId}: Releasing theme settings lock`);\n    isApplyingTheme = false;\n\n    // Apply any pending changes\n    if (pendingThemeChange) {\n      const pending = pendingThemeChange;\n      pendingThemeChange = null;\n      console.log(`Request #${requestId}: Processing pending theme changes`);\n      setTimeout(() => {\n        applyThemeSettings({\n          appearance: pending\n        });\n      }, 50);\n    }\n  }\n};\n\n/**\r\n * Apply accessibility settings using a singleton pattern\r\n * @param {Object} settings The settings object\r\n * @returns {boolean} Success indicator\r\n */\nexport const applyAccessibilitySettings = settings => {\n  if (!settings || !settings.accessibility) return false;\n\n  // Ensure manager is initialized\n  if (!isInitialized) {\n    initializeSettingsManager();\n  }\n  const {\n    highContrast,\n    reducedMotion,\n    largerClickTargets,\n    textScaling,\n    screenReaderOptimized\n  } = settings.accessibility;\n  const requestId = ++requestCounter;\n\n  // Skip if settings haven't changed (deep comparison)\n  if (currentSettings.accessibility && deepEqual(currentSettings.accessibility, settings.accessibility)) {\n    console.log(`Request #${requestId}: Settings unchanged, skipping accessibility application`);\n    return true;\n  }\n\n  // If already applying settings, store this as pending and return\n  if (isApplyingAccessibility) {\n    console.log(`Request #${requestId}: Accessibility application in progress, queueing changes`);\n    pendingAccessibilityChange = {\n      ...settings.accessibility\n    };\n    return true;\n  }\n\n  // Lock to prevent concurrent calls\n  isApplyingAccessibility = true;\n  console.log(`Request #${requestId}: Locking accessibility settings application`);\n  try {\n    console.log(`Request #${requestId}: Applying accessibility settings`);\n\n    // Apply high contrast mode\n    if (highContrast) {\n      document.documentElement.classList.add('high-contrast');\n    } else {\n      document.documentElement.classList.remove('high-contrast');\n    }\n\n    // Apply reduced motion\n    if (reducedMotion) {\n      document.documentElement.classList.add('reduced-motion');\n    } else {\n      document.documentElement.classList.remove('reduced-motion');\n    }\n\n    // Apply larger click targets\n    if (largerClickTargets) {\n      document.documentElement.classList.add('larger-targets');\n    } else {\n      document.documentElement.classList.remove('larger-targets');\n    }\n\n    // Apply text scaling\n    if (textScaling && textScaling !== 100) {\n      document.documentElement.style.setProperty('--text-scale-ratio', `${textScaling / 100}`);\n      document.documentElement.classList.add('custom-text-scaling');\n    } else {\n      document.documentElement.classList.remove('custom-text-scaling');\n      document.documentElement.style.removeProperty('--text-scale-ratio');\n    }\n\n    // Apply screen reader optimizations\n    if (screenReaderOptimized) {\n      document.documentElement.setAttribute('data-screen-reader-optimized', 'true');\n    } else {\n      document.documentElement.removeAttribute('data-screen-reader-optimized');\n    }\n\n    // Update current settings with a deep copy\n    currentSettings.accessibility = JSON.parse(JSON.stringify(settings.accessibility));\n    console.log(`Request #${requestId}: Accessibility settings applied successfully`);\n    return true;\n  } catch (error) {\n    console.error(`Request #${requestId}: Error applying accessibility settings:`, error);\n    return false;\n  } finally {\n    // Release lock\n    console.log(`Request #${requestId}: Releasing accessibility settings lock`);\n    isApplyingAccessibility = false;\n\n    // Apply any pending changes\n    if (pendingAccessibilityChange) {\n      const pending = pendingAccessibilityChange;\n      pendingAccessibilityChange = null;\n      console.log(`Request #${requestId}: Processing pending accessibility changes`);\n      setTimeout(() => {\n        applyAccessibilitySettings({\n          accessibility: pending\n        });\n      }, 50);\n    }\n  }\n};\n\n/**\r\n * Apply language settings\r\n * @param {string} language The language code\r\n * @returns {boolean} Success indicator\r\n */\nexport const applyLanguageSettings = language => {\n  if (!language) return false;\n\n  // Ensure manager is initialized\n  if (!isInitialized) {\n    initializeSettingsManager();\n  }\n  const requestId = ++requestCounter;\n\n  // Skip if language hasn't changed\n  if (currentSettings.language === language) {\n    console.log(`Request #${requestId}: Language unchanged, skipping application`);\n    return true;\n  }\n  console.log(`Request #${requestId}: Applying language: ${language}`);\n\n  // Apply language\n  document.documentElement.setAttribute('lang', language.split('-')[0]);\n\n  // Update current settings\n  currentSettings.language = language;\n  return true;\n};\n\n/**\r\n * Initialize settings manager\r\n * This loads the CSS needed for dark mode and accessibility\r\n */\nexport const initializeSettingsManager = () => {\n  if (isInitialized) {\n    return; // Already initialized\n  }\n  console.log('Initializing Settings Manager');\n\n  // Load the CSS file for dark mode and accessibility if not already loaded\n  if (!document.getElementById('accessibility-darkmode-css')) {\n    const link = document.createElement('link');\n    link.id = 'accessibility-darkmode-css';\n    link.rel = 'stylesheet';\n    link.href = '/accessibility-darkmode.css';\n    document.head.appendChild(link);\n  }\n  isInitialized = true;\n};\n\n// Create the settings manager as a named object\nconst settingsManager = {\n  applyThemeSettings,\n  applyAccessibilitySettings,\n  applyLanguageSettings,\n  initializeSettingsManager\n};\n\n// Export the settings manager\nexport default settingsManager;","map":{"version":3,"names":["currentSettings","appearance","accessibility","language","requestCounter","isApplyingTheme","isApplyingAccessibility","pendingThemeChange","pendingAccessibilityChange","isInitialized","deepEqual","obj1","obj2","keys1","Object","keys","keys2","length","every","key","applyThemeSettings","settings","console","error","initializeSettingsManager","fontSize","colorScheme","darkMode","requestId","log","document","documentElement","classList","remove","add","colorSchemeClasses","themeClass","body","style","setProperty","setAttribute","JSON","parse","stringify","pending","setTimeout","applyAccessibilitySettings","highContrast","reducedMotion","largerClickTargets","textScaling","screenReaderOptimized","removeProperty","removeAttribute","applyLanguageSettings","split","getElementById","link","createElement","id","rel","href","head","appendChild","settingsManager"],"sources":["C:/Users/juliu/Desktop/web/src/utils/settingsManager.js"],"sourcesContent":["/**\r\n * Settings Manager - A singleton to manage theme and accessibility settings\r\n * This prevents multiple components from applying the same settings simultaneously\r\n */\r\n\r\n// Track settings state with deep comparison\r\nlet currentSettings = {\r\n    appearance: null,\r\n    accessibility: null,\r\n    language: null\r\n  };\r\n  \r\n  // Add request ID for debugging\r\n  let requestCounter = 0;\r\n  \r\n  // Locks to prevent concurrent settings application\r\n  let isApplyingTheme = false;\r\n  let isApplyingAccessibility = false;\r\n  let pendingThemeChange = null;\r\n  let pendingAccessibilityChange = null;\r\n  \r\n  // Set up a global initialization flag\r\n  let isInitialized = false;\r\n  \r\n  /**\r\n   * Deep compare two objects\r\n   * @param {Object} obj1 First object\r\n   * @param {Object} obj2 Second object\r\n   * @returns {boolean} Whether the objects are equal\r\n   */\r\n  const deepEqual = (obj1, obj2) => {\r\n    if (obj1 === obj2) return true;\r\n    if (obj1 === null || obj2 === null) return false;\r\n    if (typeof obj1 !== 'object' || typeof obj2 !== 'object') return obj1 === obj2;\r\n    \r\n    const keys1 = Object.keys(obj1);\r\n    const keys2 = Object.keys(obj2);\r\n    \r\n    if (keys1.length !== keys2.length) return false;\r\n    \r\n    return keys1.every(key => {\r\n      if (typeof obj1[key] === 'object' && obj1[key] !== null &&\r\n          typeof obj2[key] === 'object' && obj2[key] !== null) {\r\n        return deepEqual(obj1[key], obj2[key]);\r\n      }\r\n      return obj1[key] === obj2[key];\r\n    });\r\n  };\r\n  \r\n  /**\r\n   * Apply theme settings using a singleton pattern\r\n   * @param {Object} settings The settings object\r\n   * @returns {boolean} Success indicator\r\n   */\r\n  export const applyThemeSettings = (settings) => {\r\n    if (!settings || !settings.appearance) {\r\n      console.error(\"Invalid settings object provided to applyThemeSettings\");\r\n      return false;\r\n    }\r\n    \r\n    // Ensure manager is initialized\r\n    if (!isInitialized) {\r\n      initializeSettingsManager();\r\n    }\r\n    \r\n    const { fontSize, colorScheme, darkMode } = settings.appearance;\r\n    const requestId = ++requestCounter;\r\n    \r\n    // Skip if settings haven't changed (deep comparison)\r\n    if (currentSettings.appearance && \r\n        deepEqual(currentSettings.appearance, settings.appearance)) {\r\n      console.log(`Request #${requestId}: Settings unchanged, skipping theme application`);\r\n      return true;\r\n    }\r\n    \r\n    // If already applying settings, store this as pending and return\r\n    if (isApplyingTheme) {\r\n      console.log(`Request #${requestId}: Settings application in progress, queueing changes`);\r\n      pendingThemeChange = { ...settings.appearance };\r\n      return true;\r\n    }\r\n    \r\n    // Lock to prevent concurrent calls\r\n    isApplyingTheme = true;\r\n    console.log(`Request #${requestId}: Locking theme settings application`);\r\n    \r\n    try {\r\n      console.log(`Request #${requestId}: Applying theme settings:`, { fontSize, colorScheme, darkMode });\r\n      \r\n      // Apply font size\r\n      document.documentElement.classList.remove('text-sm', 'text-base', 'text-lg');\r\n      if (fontSize === 'small') {\r\n        document.documentElement.classList.add('text-sm');\r\n      } else if (fontSize === 'medium') {\r\n        document.documentElement.classList.add('text-base');\r\n      } else if (fontSize === 'large') {\r\n        document.documentElement.classList.add('text-lg');\r\n      }\r\n      \r\n      // Apply color scheme\r\n      const colorSchemeClasses = [\r\n        'theme-blue', 'theme-purple', 'theme-green', \r\n        'theme-red', 'theme-amber', 'theme-indigo'\r\n      ];\r\n      document.documentElement.classList.remove(...colorSchemeClasses);\r\n      \r\n      const themeClass = `theme-${colorScheme}`;\r\n      document.documentElement.classList.add(themeClass);\r\n      \r\n      // Apply dark mode\r\n      if (darkMode) {\r\n        document.documentElement.classList.add('dark-mode');\r\n        document.body.classList.add('dark-mode');\r\n        console.log(`Request #${requestId}: Dark mode classes applied`);\r\n      } else {\r\n        document.documentElement.classList.remove('dark-mode');\r\n        document.body.classList.remove('dark-mode');\r\n        console.log(`Request #${requestId}: Dark mode classes removed`);\r\n      }\r\n      \r\n      // Set a custom property to track current theme\r\n      document.documentElement.style.setProperty('--current-theme', colorScheme);\r\n      document.documentElement.setAttribute('data-theme', darkMode ? 'dark' : 'light');\r\n      \r\n      // Update current settings with a deep copy\r\n      currentSettings.appearance = JSON.parse(JSON.stringify(settings.appearance));\r\n      \r\n      console.log(`Request #${requestId}: Applied theme: ${colorScheme}, font size: ${fontSize}, dark mode: ${darkMode}`);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Request #${requestId}: Error applying theme settings:`, error);\r\n      return false;\r\n    } finally {\r\n      // Release lock\r\n      console.log(`Request #${requestId}: Releasing theme settings lock`);\r\n      isApplyingTheme = false;\r\n      \r\n      // Apply any pending changes\r\n      if (pendingThemeChange) {\r\n        const pending = pendingThemeChange;\r\n        pendingThemeChange = null;\r\n        console.log(`Request #${requestId}: Processing pending theme changes`);\r\n        setTimeout(() => {\r\n          applyThemeSettings({ appearance: pending });\r\n        }, 50);\r\n      }\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Apply accessibility settings using a singleton pattern\r\n   * @param {Object} settings The settings object\r\n   * @returns {boolean} Success indicator\r\n   */\r\n  export const applyAccessibilitySettings = (settings) => {\r\n    if (!settings || !settings.accessibility) return false;\r\n  \r\n    // Ensure manager is initialized\r\n    if (!isInitialized) {\r\n      initializeSettingsManager();\r\n    }\r\n  \r\n    const { highContrast, reducedMotion, largerClickTargets, textScaling, screenReaderOptimized } = settings.accessibility;\r\n    const requestId = ++requestCounter;\r\n    \r\n    // Skip if settings haven't changed (deep comparison)\r\n    if (currentSettings.accessibility && \r\n        deepEqual(currentSettings.accessibility, settings.accessibility)) {\r\n      console.log(`Request #${requestId}: Settings unchanged, skipping accessibility application`);\r\n      return true;\r\n    }\r\n    \r\n    // If already applying settings, store this as pending and return\r\n    if (isApplyingAccessibility) {\r\n      console.log(`Request #${requestId}: Accessibility application in progress, queueing changes`);\r\n      pendingAccessibilityChange = { ...settings.accessibility };\r\n      return true;\r\n    }\r\n    \r\n    // Lock to prevent concurrent calls\r\n    isApplyingAccessibility = true;\r\n    console.log(`Request #${requestId}: Locking accessibility settings application`);\r\n    \r\n    try {\r\n      console.log(`Request #${requestId}: Applying accessibility settings`);\r\n      \r\n      // Apply high contrast mode\r\n      if (highContrast) {\r\n        document.documentElement.classList.add('high-contrast');\r\n      } else {\r\n        document.documentElement.classList.remove('high-contrast');\r\n      }\r\n  \r\n      // Apply reduced motion\r\n      if (reducedMotion) {\r\n        document.documentElement.classList.add('reduced-motion');\r\n      } else {\r\n        document.documentElement.classList.remove('reduced-motion');\r\n      }\r\n  \r\n      // Apply larger click targets\r\n      if (largerClickTargets) {\r\n        document.documentElement.classList.add('larger-targets');\r\n      } else {\r\n        document.documentElement.classList.remove('larger-targets');\r\n      }\r\n  \r\n      // Apply text scaling\r\n      if (textScaling && textScaling !== 100) {\r\n        document.documentElement.style.setProperty('--text-scale-ratio', `${textScaling / 100}`);\r\n        document.documentElement.classList.add('custom-text-scaling');\r\n      } else {\r\n        document.documentElement.classList.remove('custom-text-scaling');\r\n        document.documentElement.style.removeProperty('--text-scale-ratio');\r\n      }\r\n  \r\n      // Apply screen reader optimizations\r\n      if (screenReaderOptimized) {\r\n        document.documentElement.setAttribute('data-screen-reader-optimized', 'true');\r\n      } else {\r\n        document.documentElement.removeAttribute('data-screen-reader-optimized');\r\n      }\r\n      \r\n      // Update current settings with a deep copy\r\n      currentSettings.accessibility = JSON.parse(JSON.stringify(settings.accessibility));\r\n      \r\n      console.log(`Request #${requestId}: Accessibility settings applied successfully`);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error(`Request #${requestId}: Error applying accessibility settings:`, error);\r\n      return false;\r\n    } finally {\r\n      // Release lock\r\n      console.log(`Request #${requestId}: Releasing accessibility settings lock`);\r\n      isApplyingAccessibility = false;\r\n      \r\n      // Apply any pending changes\r\n      if (pendingAccessibilityChange) {\r\n        const pending = pendingAccessibilityChange;\r\n        pendingAccessibilityChange = null;\r\n        console.log(`Request #${requestId}: Processing pending accessibility changes`);\r\n        setTimeout(() => {\r\n          applyAccessibilitySettings({ accessibility: pending });\r\n        }, 50);\r\n      }\r\n    }\r\n  };\r\n  \r\n  /**\r\n   * Apply language settings\r\n   * @param {string} language The language code\r\n   * @returns {boolean} Success indicator\r\n   */\r\n  export const applyLanguageSettings = (language) => {\r\n    if (!language) return false;\r\n    \r\n    // Ensure manager is initialized\r\n    if (!isInitialized) {\r\n      initializeSettingsManager();\r\n    }\r\n  \r\n    const requestId = ++requestCounter;\r\n    \r\n    // Skip if language hasn't changed\r\n    if (currentSettings.language === language) {\r\n      console.log(`Request #${requestId}: Language unchanged, skipping application`);\r\n      return true;\r\n    }\r\n    \r\n    console.log(`Request #${requestId}: Applying language: ${language}`);\r\n    \r\n    // Apply language\r\n    document.documentElement.setAttribute('lang', language.split('-')[0]);\r\n    \r\n    // Update current settings\r\n    currentSettings.language = language;\r\n    \r\n    return true;\r\n  };\r\n  \r\n  /**\r\n   * Initialize settings manager\r\n   * This loads the CSS needed for dark mode and accessibility\r\n   */\r\n  export const initializeSettingsManager = () => {\r\n    if (isInitialized) {\r\n      return; // Already initialized\r\n    }\r\n    \r\n    console.log('Initializing Settings Manager');\r\n    \r\n    // Load the CSS file for dark mode and accessibility if not already loaded\r\n    if (!document.getElementById('accessibility-darkmode-css')) {\r\n      const link = document.createElement('link');\r\n      link.id = 'accessibility-darkmode-css';\r\n      link.rel = 'stylesheet';\r\n      link.href = '/accessibility-darkmode.css';\r\n      document.head.appendChild(link);\r\n    }\r\n    \r\n    isInitialized = true;\r\n  };\r\n  \r\n  // Create the settings manager as a named object\r\n  const settingsManager = {\r\n    applyThemeSettings,\r\n    applyAccessibilitySettings,\r\n    applyLanguageSettings,\r\n    initializeSettingsManager\r\n  };\r\n  \r\n  // Export the settings manager\r\n  export default settingsManager;"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,IAAIA,eAAe,GAAG;EAClBC,UAAU,EAAE,IAAI;EAChBC,aAAa,EAAE,IAAI;EACnBC,QAAQ,EAAE;AACZ,CAAC;;AAED;AACA,IAAIC,cAAc,GAAG,CAAC;;AAEtB;AACA,IAAIC,eAAe,GAAG,KAAK;AAC3B,IAAIC,uBAAuB,GAAG,KAAK;AACnC,IAAIC,kBAAkB,GAAG,IAAI;AAC7B,IAAIC,0BAA0B,GAAG,IAAI;;AAErC;AACA,IAAIC,aAAa,GAAG,KAAK;;AAEzB;AACF;AACA;AACA;AACA;AACA;AACE,MAAMC,SAAS,GAAGA,CAACC,IAAI,EAAEC,IAAI,KAAK;EAChC,IAAID,IAAI,KAAKC,IAAI,EAAE,OAAO,IAAI;EAC9B,IAAID,IAAI,KAAK,IAAI,IAAIC,IAAI,KAAK,IAAI,EAAE,OAAO,KAAK;EAChD,IAAI,OAAOD,IAAI,KAAK,QAAQ,IAAI,OAAOC,IAAI,KAAK,QAAQ,EAAE,OAAOD,IAAI,KAAKC,IAAI;EAE9E,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACJ,IAAI,CAAC;EAC/B,MAAMK,KAAK,GAAGF,MAAM,CAACC,IAAI,CAACH,IAAI,CAAC;EAE/B,IAAIC,KAAK,CAACI,MAAM,KAAKD,KAAK,CAACC,MAAM,EAAE,OAAO,KAAK;EAE/C,OAAOJ,KAAK,CAACK,KAAK,CAACC,GAAG,IAAI;IACxB,IAAI,OAAOR,IAAI,CAACQ,GAAG,CAAC,KAAK,QAAQ,IAAIR,IAAI,CAACQ,GAAG,CAAC,KAAK,IAAI,IACnD,OAAOP,IAAI,CAACO,GAAG,CAAC,KAAK,QAAQ,IAAIP,IAAI,CAACO,GAAG,CAAC,KAAK,IAAI,EAAE;MACvD,OAAOT,SAAS,CAACC,IAAI,CAACQ,GAAG,CAAC,EAAEP,IAAI,CAACO,GAAG,CAAC,CAAC;IACxC;IACA,OAAOR,IAAI,CAACQ,GAAG,CAAC,KAAKP,IAAI,CAACO,GAAG,CAAC;EAChC,CAAC,CAAC;AACJ,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAMC,kBAAkB,GAAIC,QAAQ,IAAK;EAC9C,IAAI,CAACA,QAAQ,IAAI,CAACA,QAAQ,CAACpB,UAAU,EAAE;IACrCqB,OAAO,CAACC,KAAK,CAAC,wDAAwD,CAAC;IACvE,OAAO,KAAK;EACd;;EAEA;EACA,IAAI,CAACd,aAAa,EAAE;IAClBe,yBAAyB,CAAC,CAAC;EAC7B;EAEA,MAAM;IAAEC,QAAQ;IAAEC,WAAW;IAAEC;EAAS,CAAC,GAAGN,QAAQ,CAACpB,UAAU;EAC/D,MAAM2B,SAAS,GAAG,EAAExB,cAAc;;EAElC;EACA,IAAIJ,eAAe,CAACC,UAAU,IAC1BS,SAAS,CAACV,eAAe,CAACC,UAAU,EAAEoB,QAAQ,CAACpB,UAAU,CAAC,EAAE;IAC9DqB,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,kDAAkD,CAAC;IACpF,OAAO,IAAI;EACb;;EAEA;EACA,IAAIvB,eAAe,EAAE;IACnBiB,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,sDAAsD,CAAC;IACxFrB,kBAAkB,GAAG;MAAE,GAAGc,QAAQ,CAACpB;IAAW,CAAC;IAC/C,OAAO,IAAI;EACb;;EAEA;EACAI,eAAe,GAAG,IAAI;EACtBiB,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,sCAAsC,CAAC;EAExE,IAAI;IACFN,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,4BAA4B,EAAE;MAAEH,QAAQ;MAAEC,WAAW;MAAEC;IAAS,CAAC,CAAC;;IAEnG;IACAG,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,SAAS,EAAE,WAAW,EAAE,SAAS,CAAC;IAC5E,IAAIR,QAAQ,KAAK,OAAO,EAAE;MACxBK,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,GAAG,CAAC,SAAS,CAAC;IACnD,CAAC,MAAM,IAAIT,QAAQ,KAAK,QAAQ,EAAE;MAChCK,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,GAAG,CAAC,WAAW,CAAC;IACrD,CAAC,MAAM,IAAIT,QAAQ,KAAK,OAAO,EAAE;MAC/BK,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,GAAG,CAAC,SAAS,CAAC;IACnD;;IAEA;IACA,MAAMC,kBAAkB,GAAG,CACzB,YAAY,EAAE,cAAc,EAAE,aAAa,EAC3C,WAAW,EAAE,aAAa,EAAE,cAAc,CAC3C;IACDL,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,GAAGE,kBAAkB,CAAC;IAEhE,MAAMC,UAAU,GAAG,SAASV,WAAW,EAAE;IACzCI,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,GAAG,CAACE,UAAU,CAAC;;IAElD;IACA,IAAIT,QAAQ,EAAE;MACZG,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,GAAG,CAAC,WAAW,CAAC;MACnDJ,QAAQ,CAACO,IAAI,CAACL,SAAS,CAACE,GAAG,CAAC,WAAW,CAAC;MACxCZ,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,6BAA6B,CAAC;IACjE,CAAC,MAAM;MACLE,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,WAAW,CAAC;MACtDH,QAAQ,CAACO,IAAI,CAACL,SAAS,CAACC,MAAM,CAAC,WAAW,CAAC;MAC3CX,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,6BAA6B,CAAC;IACjE;;IAEA;IACAE,QAAQ,CAACC,eAAe,CAACO,KAAK,CAACC,WAAW,CAAC,iBAAiB,EAAEb,WAAW,CAAC;IAC1EI,QAAQ,CAACC,eAAe,CAACS,YAAY,CAAC,YAAY,EAAEb,QAAQ,GAAG,MAAM,GAAG,OAAO,CAAC;;IAEhF;IACA3B,eAAe,CAACC,UAAU,GAAGwC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACtB,QAAQ,CAACpB,UAAU,CAAC,CAAC;IAE5EqB,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,oBAAoBF,WAAW,gBAAgBD,QAAQ,gBAAgBE,QAAQ,EAAE,CAAC;IAEnH,OAAO,IAAI;EACb,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,YAAYK,SAAS,kCAAkC,EAAEL,KAAK,CAAC;IAC7E,OAAO,KAAK;EACd,CAAC,SAAS;IACR;IACAD,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,iCAAiC,CAAC;IACnEvB,eAAe,GAAG,KAAK;;IAEvB;IACA,IAAIE,kBAAkB,EAAE;MACtB,MAAMqC,OAAO,GAAGrC,kBAAkB;MAClCA,kBAAkB,GAAG,IAAI;MACzBe,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,oCAAoC,CAAC;MACtEiB,UAAU,CAAC,MAAM;QACfzB,kBAAkB,CAAC;UAAEnB,UAAU,EAAE2C;QAAQ,CAAC,CAAC;MAC7C,CAAC,EAAE,EAAE,CAAC;IACR;EACF;AACF,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAME,0BAA0B,GAAIzB,QAAQ,IAAK;EACtD,IAAI,CAACA,QAAQ,IAAI,CAACA,QAAQ,CAACnB,aAAa,EAAE,OAAO,KAAK;;EAEtD;EACA,IAAI,CAACO,aAAa,EAAE;IAClBe,yBAAyB,CAAC,CAAC;EAC7B;EAEA,MAAM;IAAEuB,YAAY;IAAEC,aAAa;IAAEC,kBAAkB;IAAEC,WAAW;IAAEC;EAAsB,CAAC,GAAG9B,QAAQ,CAACnB,aAAa;EACtH,MAAM0B,SAAS,GAAG,EAAExB,cAAc;;EAElC;EACA,IAAIJ,eAAe,CAACE,aAAa,IAC7BQ,SAAS,CAACV,eAAe,CAACE,aAAa,EAAEmB,QAAQ,CAACnB,aAAa,CAAC,EAAE;IACpEoB,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,0DAA0D,CAAC;IAC5F,OAAO,IAAI;EACb;;EAEA;EACA,IAAItB,uBAAuB,EAAE;IAC3BgB,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,2DAA2D,CAAC;IAC7FpB,0BAA0B,GAAG;MAAE,GAAGa,QAAQ,CAACnB;IAAc,CAAC;IAC1D,OAAO,IAAI;EACb;;EAEA;EACAI,uBAAuB,GAAG,IAAI;EAC9BgB,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,8CAA8C,CAAC;EAEhF,IAAI;IACFN,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,mCAAmC,CAAC;;IAErE;IACA,IAAImB,YAAY,EAAE;MAChBjB,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,GAAG,CAAC,eAAe,CAAC;IACzD,CAAC,MAAM;MACLJ,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,eAAe,CAAC;IAC5D;;IAEA;IACA,IAAIe,aAAa,EAAE;MACjBlB,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,GAAG,CAAC,gBAAgB,CAAC;IAC1D,CAAC,MAAM;MACLJ,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,gBAAgB,CAAC;IAC7D;;IAEA;IACA,IAAIgB,kBAAkB,EAAE;MACtBnB,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,GAAG,CAAC,gBAAgB,CAAC;IAC1D,CAAC,MAAM;MACLJ,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,gBAAgB,CAAC;IAC7D;;IAEA;IACA,IAAIiB,WAAW,IAAIA,WAAW,KAAK,GAAG,EAAE;MACtCpB,QAAQ,CAACC,eAAe,CAACO,KAAK,CAACC,WAAW,CAAC,oBAAoB,EAAE,GAAGW,WAAW,GAAG,GAAG,EAAE,CAAC;MACxFpB,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,GAAG,CAAC,qBAAqB,CAAC;IAC/D,CAAC,MAAM;MACLJ,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,qBAAqB,CAAC;MAChEH,QAAQ,CAACC,eAAe,CAACO,KAAK,CAACc,cAAc,CAAC,oBAAoB,CAAC;IACrE;;IAEA;IACA,IAAID,qBAAqB,EAAE;MACzBrB,QAAQ,CAACC,eAAe,CAACS,YAAY,CAAC,8BAA8B,EAAE,MAAM,CAAC;IAC/E,CAAC,MAAM;MACLV,QAAQ,CAACC,eAAe,CAACsB,eAAe,CAAC,8BAA8B,CAAC;IAC1E;;IAEA;IACArD,eAAe,CAACE,aAAa,GAAGuC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACtB,QAAQ,CAACnB,aAAa,CAAC,CAAC;IAElFoB,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,+CAA+C,CAAC;IAEjF,OAAO,IAAI;EACb,CAAC,CAAC,OAAOL,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,YAAYK,SAAS,0CAA0C,EAAEL,KAAK,CAAC;IACrF,OAAO,KAAK;EACd,CAAC,SAAS;IACR;IACAD,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,yCAAyC,CAAC;IAC3EtB,uBAAuB,GAAG,KAAK;;IAE/B;IACA,IAAIE,0BAA0B,EAAE;MAC9B,MAAMoC,OAAO,GAAGpC,0BAA0B;MAC1CA,0BAA0B,GAAG,IAAI;MACjCc,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,4CAA4C,CAAC;MAC9EiB,UAAU,CAAC,MAAM;QACfC,0BAA0B,CAAC;UAAE5C,aAAa,EAAE0C;QAAQ,CAAC,CAAC;MACxD,CAAC,EAAE,EAAE,CAAC;IACR;EACF;AACF,CAAC;;AAED;AACF;AACA;AACA;AACA;AACE,OAAO,MAAMU,qBAAqB,GAAInD,QAAQ,IAAK;EACjD,IAAI,CAACA,QAAQ,EAAE,OAAO,KAAK;;EAE3B;EACA,IAAI,CAACM,aAAa,EAAE;IAClBe,yBAAyB,CAAC,CAAC;EAC7B;EAEA,MAAMI,SAAS,GAAG,EAAExB,cAAc;;EAElC;EACA,IAAIJ,eAAe,CAACG,QAAQ,KAAKA,QAAQ,EAAE;IACzCmB,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,4CAA4C,CAAC;IAC9E,OAAO,IAAI;EACb;EAEAN,OAAO,CAACO,GAAG,CAAC,YAAYD,SAAS,wBAAwBzB,QAAQ,EAAE,CAAC;;EAEpE;EACA2B,QAAQ,CAACC,eAAe,CAACS,YAAY,CAAC,MAAM,EAAErC,QAAQ,CAACoD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;;EAErE;EACAvD,eAAe,CAACG,QAAQ,GAAGA,QAAQ;EAEnC,OAAO,IAAI;AACb,CAAC;;AAED;AACF;AACA;AACA;AACE,OAAO,MAAMqB,yBAAyB,GAAGA,CAAA,KAAM;EAC7C,IAAIf,aAAa,EAAE;IACjB,OAAO,CAAC;EACV;EAEAa,OAAO,CAACO,GAAG,CAAC,+BAA+B,CAAC;;EAE5C;EACA,IAAI,CAACC,QAAQ,CAAC0B,cAAc,CAAC,4BAA4B,CAAC,EAAE;IAC1D,MAAMC,IAAI,GAAG3B,QAAQ,CAAC4B,aAAa,CAAC,MAAM,CAAC;IAC3CD,IAAI,CAACE,EAAE,GAAG,4BAA4B;IACtCF,IAAI,CAACG,GAAG,GAAG,YAAY;IACvBH,IAAI,CAACI,IAAI,GAAG,6BAA6B;IACzC/B,QAAQ,CAACgC,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;EACjC;EAEAhD,aAAa,GAAG,IAAI;AACtB,CAAC;;AAED;AACA,MAAMuD,eAAe,GAAG;EACtB5C,kBAAkB;EAClB0B,0BAA0B;EAC1BQ,qBAAqB;EACrB9B;AACF,CAAC;;AAED;AACA,eAAewC,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}