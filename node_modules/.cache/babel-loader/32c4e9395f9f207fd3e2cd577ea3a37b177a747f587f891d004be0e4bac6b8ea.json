{"ast":null,"code":"// src/services/ApiClient.js\n\nimport { API_CONFIG, API_ENDPOINTS } from '../constants/apiEndpoints';\nclass ApiClient {\n  constructor() {\n    this.rapidApiKey = API_CONFIG.RAPIDAPI_KEY;\n    this.rapidApiHost = API_CONFIG.RAPIDAPI_HOST;\n    this.baseUrl = API_ENDPOINTS.SKYSCANNER.BASE_URL;\n\n    // Track API usage for monitoring\n    this.apiUsage = {\n      totalCalls: 0,\n      callsByEndpoint: {},\n      lastReset: new Date().getTime()\n    };\n  }\n  async get(endpoint, params = {}, useRapidApi = true) {\n    return this.request('GET', endpoint, params, null, useRapidApi);\n  }\n  async post(endpoint, data = {}, useRapidApi = true) {\n    return this.request('POST', endpoint, {}, data, useRapidApi);\n  }\n  async request(method, endpoint, params = {}, data = null, useRapidApi = true) {\n    // Track API usage\n    this.apiUsage.totalCalls++;\n    this.apiUsage.callsByEndpoint[endpoint] = (this.apiUsage.callsByEndpoint[endpoint] || 0) + 1;\n\n    // Build URL with query parameters\n    const url = new URL(`${this.baseUrl}${endpoint}`);\n    if (params && Object.keys(params).length > 0) {\n      Object.keys(params).forEach(key => url.searchParams.append(key, params[key]));\n    }\n\n    // Set up request options\n    const options = {\n      method,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    // Add RapidAPI headers if needed\n    if (useRapidApi) {\n      options.headers['x-rapidapi-key'] = this.rapidApiKey;\n      options.headers['x-rapidapi-host'] = this.rapidApiHost;\n    }\n\n    // Add body for POST requests\n    if (method !== 'GET' && data) {\n      options.body = JSON.stringify(data);\n    }\n\n    // Make the request\n    try {\n      const response = await fetch(url, options);\n\n      // Check for HTTP errors\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.message || `API request failed with status ${response.status}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error(`API request to ${endpoint} failed:`, error);\n      throw error;\n    }\n  }\n\n  // Get API usage statistics\n  getApiUsage() {\n    const now = new Date().getTime();\n    const daysSinceReset = Math.floor((now - this.apiUsage.lastReset) / (1000 * 60 * 60 * 24));\n    return {\n      ...this.apiUsage,\n      daysSinceReset,\n      dailyAverage: this.apiUsage.totalCalls / Math.max(1, daysSinceReset)\n    };\n  }\n\n  // Reset API usage tracking (e.g., at the start of a new billing period)\n  resetApiUsage() {\n    this.apiUsage = {\n      totalCalls: 0,\n      callsByEndpoint: {},\n      lastReset: new Date().getTime()\n    };\n  }\n}\nexport default new ApiClient();","map":{"version":3,"names":["API_CONFIG","API_ENDPOINTS","ApiClient","constructor","rapidApiKey","RAPIDAPI_KEY","rapidApiHost","RAPIDAPI_HOST","baseUrl","SKYSCANNER","BASE_URL","apiUsage","totalCalls","callsByEndpoint","lastReset","Date","getTime","get","endpoint","params","useRapidApi","request","post","data","method","url","URL","Object","keys","length","forEach","key","searchParams","append","options","headers","body","JSON","stringify","response","fetch","ok","errorData","json","catch","Error","message","status","error","console","getApiUsage","now","daysSinceReset","Math","floor","dailyAverage","max","resetApiUsage"],"sources":["C:/Users/juliu/Desktop/web/src/services/ApiClient.js"],"sourcesContent":["// src/services/ApiClient.js\r\n\r\nimport { API_CONFIG, API_ENDPOINTS } from '../constants/apiEndpoints';\r\n\r\nclass ApiClient {\r\n  constructor() {\r\n    this.rapidApiKey = API_CONFIG.RAPIDAPI_KEY;\r\n    this.rapidApiHost = API_CONFIG.RAPIDAPI_HOST;\r\n    this.baseUrl = API_ENDPOINTS.SKYSCANNER.BASE_URL;\r\n    \r\n    // Track API usage for monitoring\r\n    this.apiUsage = {\r\n      totalCalls: 0,\r\n      callsByEndpoint: {},\r\n      lastReset: new Date().getTime(),\r\n    };\r\n  }\r\n  \r\n  async get(endpoint, params = {}, useRapidApi = true) {\r\n    return this.request('GET', endpoint, params, null, useRapidApi);\r\n  }\r\n  \r\n  async post(endpoint, data = {}, useRapidApi = true) {\r\n    return this.request('POST', endpoint, {}, data, useRapidApi);\r\n  }\r\n  \r\n  async request(method, endpoint, params = {}, data = null, useRapidApi = true) {\r\n    // Track API usage\r\n    this.apiUsage.totalCalls++;\r\n    this.apiUsage.callsByEndpoint[endpoint] = (this.apiUsage.callsByEndpoint[endpoint] || 0) + 1;\r\n    \r\n    // Build URL with query parameters\r\n    const url = new URL(`${this.baseUrl}${endpoint}`);\r\n    \r\n    if (params && Object.keys(params).length > 0) {\r\n      Object.keys(params).forEach(key => \r\n        url.searchParams.append(key, params[key])\r\n      );\r\n    }\r\n    \r\n    // Set up request options\r\n    const options = {\r\n      method,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    };\r\n    \r\n    // Add RapidAPI headers if needed\r\n    if (useRapidApi) {\r\n      options.headers['x-rapidapi-key'] = this.rapidApiKey;\r\n      options.headers['x-rapidapi-host'] = this.rapidApiHost;\r\n    }\r\n    \r\n    // Add body for POST requests\r\n    if (method !== 'GET' && data) {\r\n      options.body = JSON.stringify(data);\r\n    }\r\n    \r\n    // Make the request\r\n    try {\r\n      const response = await fetch(url, options);\r\n      \r\n      // Check for HTTP errors\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(\r\n          errorData.message || `API request failed with status ${response.status}`\r\n        );\r\n      }\r\n      \r\n      return response.json();\r\n    } catch (error) {\r\n      console.error(`API request to ${endpoint} failed:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  // Get API usage statistics\r\n  getApiUsage() {\r\n    const now = new Date().getTime();\r\n    const daysSinceReset = Math.floor((now - this.apiUsage.lastReset) / (1000 * 60 * 60 * 24));\r\n    \r\n    return {\r\n      ...this.apiUsage,\r\n      daysSinceReset,\r\n      dailyAverage: this.apiUsage.totalCalls / Math.max(1, daysSinceReset)\r\n    };\r\n  }\r\n  \r\n  // Reset API usage tracking (e.g., at the start of a new billing period)\r\n  resetApiUsage() {\r\n    this.apiUsage = {\r\n      totalCalls: 0,\r\n      callsByEndpoint: {},\r\n      lastReset: new Date().getTime(),\r\n    };\r\n  }\r\n}\r\n\r\nexport default new ApiClient();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}