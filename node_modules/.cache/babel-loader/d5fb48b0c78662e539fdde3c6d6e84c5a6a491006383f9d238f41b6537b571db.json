{"ast":null,"code":"import React,{createContext,useState,useContext,useEffect}from'react';import{getUserSettings,saveUserSettings}from'../utils/settingsUtils';import{syncLanguageWithSettings}from'../utils/i18n';// Updated default settings with new options\nimport{jsx as _jsx}from\"react/jsx-runtime\";export const DEFAULT_SETTINGS={appearance:{fontSize:'medium',colorScheme:'blue',darkMode:false},preferences:{defaultCurrency:'USD',dateFormat:'MM/DD/YYYY',distanceUnit:'miles',temperatureUnit:'fahrenheit',language:'en-US'},notifications:{tripReminders:true,taskReminders:true,budgetAlerts:true,emailNotifications:false,emailAddress:'',emailFrequency:'daily'},privacy:{shareLocationData:true,collectAnalytics:true,autoSaveEnabled:true,dataRetention:'forever'},accessibility:{highContrast:false,reducedMotion:false,largerClickTargets:false,screenReaderOptimized:false,textScaling:100}};// Create Settings Context\nconst SettingsContext=/*#__PURE__*/createContext();// Custom hook to use the Settings Context\nexport const useSettings=()=>{const context=useContext(SettingsContext);if(!context){throw new Error('useSettings must be used within a SettingsProvider');}return context;};// Settings Provider Component\nexport const SettingsProvider=_ref=>{let{children}=_ref;const[settings,setSettings]=useState(DEFAULT_SETTINGS);const[loading,setLoading]=useState(true);// Apply settings on initial load\nuseEffect(()=>{const loadSettings=async()=>{const userSettings=getUserSettings();const mergedSettings=mergeWithDefaultSettings(userSettings);// Set state with merged settings\nsetSettings(mergedSettings);// Sync language with i18n system\nsyncLanguageWithSettings(mergedSettings);setLoading(false);};loadSettings();},[]);// Merge user settings with defaults to ensure all properties exist\nconst mergeWithDefaultSettings=userSettings=>{// Helper function to deep merge objects\nconst deepMerge=(target,source)=>{const output={...target};for(const key in source){if(source.hasOwnProperty(key)){if(typeof source[key]==='object'&&source[key]!==null&&!Array.isArray(source[key])){// If both target and source have the key and both are objects, merge them\nif(target.hasOwnProperty(key)&&typeof target[key]==='object'&&target[key]!==null&&!Array.isArray(target[key])){output[key]=deepMerge(target[key],source[key]);}else{// If target doesn't have the key or is not an object, use source's value\noutput[key]=source[key];}}else{// For primitives and arrays, simply use source's value\noutput[key]=source[key];}}}return output;};// Start with default settings and merge with user settings\nreturn deepMerge(DEFAULT_SETTINGS,userSettings);};// Update settings\nconst updateSettings=newSettings=>{// Update state\nsetSettings(newSettings);// Save to localStorage\nsaveUserSettings(newSettings);// Sync language with i18n system\nsyncLanguageWithSettings(newSettings);return true;};// Reset settings to defaults\nconst resetSettings=()=>{// Update state\nsetSettings(DEFAULT_SETTINGS);// Save to localStorage\nsaveUserSettings(DEFAULT_SETTINGS);// Sync language with i18n system\nsyncLanguageWithSettings(DEFAULT_SETTINGS);return true;};// Context value\nconst value={settings,updateSettings,resetSettings,loading};return/*#__PURE__*/_jsx(SettingsContext.Provider,{value:value,children:children});};export default SettingsContext;","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","getUserSettings","saveUserSettings","syncLanguageWithSettings","jsx","_jsx","DEFAULT_SETTINGS","appearance","fontSize","colorScheme","darkMode","preferences","defaultCurrency","dateFormat","distanceUnit","temperatureUnit","language","notifications","tripReminders","taskReminders","budgetAlerts","emailNotifications","emailAddress","emailFrequency","privacy","shareLocationData","collectAnalytics","autoSaveEnabled","dataRetention","accessibility","highContrast","reducedMotion","largerClickTargets","screenReaderOptimized","textScaling","SettingsContext","useSettings","context","Error","SettingsProvider","_ref","children","settings","setSettings","loading","setLoading","loadSettings","userSettings","mergedSettings","mergeWithDefaultSettings","deepMerge","target","source","output","key","hasOwnProperty","Array","isArray","updateSettings","newSettings","resetSettings","value","Provider"],"sources":["C:/Users/juliu/Desktop/web/src/context/SettingsContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { getUserSettings, saveUserSettings } from '../utils/settingsUtils';\r\nimport { syncLanguageWithSettings } from '../utils/i18n';\r\n\r\n// Updated default settings with new options\r\nexport const DEFAULT_SETTINGS = {\r\n  appearance: {\r\n    fontSize: 'medium',\r\n    colorScheme: 'blue',\r\n    darkMode: false\r\n  },\r\n  preferences: {\r\n    defaultCurrency: 'USD',\r\n    dateFormat: 'MM/DD/YYYY',\r\n    distanceUnit: 'miles',\r\n    temperatureUnit: 'fahrenheit',\r\n    language: 'en-US',\r\n  },\r\n  notifications: {\r\n    tripReminders: true,\r\n    taskReminders: true,\r\n    budgetAlerts: true,\r\n    emailNotifications: false,\r\n    emailAddress: '',\r\n    emailFrequency: 'daily'\r\n  },\r\n  privacy: {\r\n    shareLocationData: true,\r\n    collectAnalytics: true,\r\n    autoSaveEnabled: true,\r\n    dataRetention: 'forever'\r\n  },\r\n  accessibility: {\r\n    highContrast: false,\r\n    reducedMotion: false,\r\n    largerClickTargets: false,\r\n    screenReaderOptimized: false,\r\n    textScaling: 100\r\n  }\r\n};\r\n\r\n// Create Settings Context\r\nconst SettingsContext = createContext();\r\n\r\n// Custom hook to use the Settings Context\r\nexport const useSettings = () => {\r\n  const context = useContext(SettingsContext);\r\n  if (!context) {\r\n    throw new Error('useSettings must be used within a SettingsProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Settings Provider Component\r\nexport const SettingsProvider = ({ children }) => {\r\n  const [settings, setSettings] = useState(DEFAULT_SETTINGS);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Apply settings on initial load\r\n  useEffect(() => {\r\n    const loadSettings = async () => {\r\n      const userSettings = getUserSettings();\r\n      const mergedSettings = mergeWithDefaultSettings(userSettings);\r\n      \r\n      // Set state with merged settings\r\n      setSettings(mergedSettings);\r\n      \r\n      // Sync language with i18n system\r\n      syncLanguageWithSettings(mergedSettings);\r\n      \r\n      setLoading(false);\r\n    };\r\n\r\n    loadSettings();\r\n  }, []);\r\n\r\n  // Merge user settings with defaults to ensure all properties exist\r\n  const mergeWithDefaultSettings = (userSettings) => {\r\n    // Helper function to deep merge objects\r\n    const deepMerge = (target, source) => {\r\n      const output = { ...target };\r\n      \r\n      for (const key in source) {\r\n        if (source.hasOwnProperty(key)) {\r\n          if (\r\n            typeof source[key] === 'object' && \r\n            source[key] !== null && \r\n            !Array.isArray(source[key])\r\n          ) {\r\n            // If both target and source have the key and both are objects, merge them\r\n            if (\r\n              target.hasOwnProperty(key) && \r\n              typeof target[key] === 'object' && \r\n              target[key] !== null && \r\n              !Array.isArray(target[key])\r\n            ) {\r\n              output[key] = deepMerge(target[key], source[key]);\r\n            } else {\r\n              // If target doesn't have the key or is not an object, use source's value\r\n              output[key] = source[key];\r\n            }\r\n          } else {\r\n            // For primitives and arrays, simply use source's value\r\n            output[key] = source[key];\r\n          }\r\n        }\r\n      }\r\n      \r\n      return output;\r\n    };\r\n    \r\n    // Start with default settings and merge with user settings\r\n    return deepMerge(DEFAULT_SETTINGS, userSettings);\r\n  };\r\n\r\n  // Update settings\r\n  const updateSettings = (newSettings) => {\r\n    // Update state\r\n    setSettings(newSettings);\r\n    \r\n    // Save to localStorage\r\n    saveUserSettings(newSettings);\r\n    \r\n    // Sync language with i18n system\r\n    syncLanguageWithSettings(newSettings);\r\n    \r\n    return true;\r\n  };\r\n\r\n  // Reset settings to defaults\r\n  const resetSettings = () => {\r\n    // Update state\r\n    setSettings(DEFAULT_SETTINGS);\r\n    \r\n    // Save to localStorage\r\n    saveUserSettings(DEFAULT_SETTINGS);\r\n    \r\n    // Sync language with i18n system\r\n    syncLanguageWithSettings(DEFAULT_SETTINGS);\r\n    \r\n    return true;\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    settings,\r\n    updateSettings,\r\n    resetSettings,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <SettingsContext.Provider value={value}>\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SettingsContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}