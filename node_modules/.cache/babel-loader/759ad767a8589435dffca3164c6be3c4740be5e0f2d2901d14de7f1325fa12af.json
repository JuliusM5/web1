{"ast":null,"code":"// src/services/flightDataSharingService.js\n\n// Mock implementation for testing\nconst flightDataSharingService = {\n  // Mock flight data cache\n  flightDataCache: {},\n  // Mock user signals\n  userSignals: {},\n  // Get flight data\n  async getFlightData(originCode, destinationCode, originId, destinationId, skyscannerService) {\n    // Create a unique route key\n    const routeKey = `${originCode}-${destinationCode}`;\n\n    // Check cache first\n    if (this.flightDataCache[routeKey] && Date.now() - this.flightDataCache[routeKey].timestamp < 3600000) {\n      // 1 hour cache\n      return this.flightDataCache[routeKey].data;\n    }\n    try {\n      // For testing, return mock data\n      const mockData = {\n        itineraries: [{\n          price: {\n            amount: 299.99\n          },\n          legs: [{\n            departure: new Date().toISOString(),\n            arrival: new Date(Date.now() + 7200000).toISOString(),\n            // 2 hours later\n            durationInMinutes: 120,\n            carriers: {\n              marketing: [{\n                name: 'Example Airlines'\n              }]\n            }\n          }]\n        }, {\n          price: {\n            amount: 349.99\n          },\n          legs: [{\n            departure: new Date(Date.now() + 3600000).toISOString(),\n            // 1 hour later\n            arrival: new Date(Date.now() + 10800000).toISOString(),\n            // 3 hours later\n            durationInMinutes: 120,\n            carriers: {\n              marketing: [{\n                name: 'Budget Air'\n              }]\n            }\n          }]\n        }, {\n          price: {\n            amount: 199.99\n          },\n          legs: [{\n            departure: new Date(Date.now() + 7200000).toISOString(),\n            // 2 hours later\n            arrival: new Date(Date.now() + 14400000).toISOString(),\n            // 4 hours later\n            durationInMinutes: 120,\n            carriers: {\n              marketing: [{\n                name: 'Discount Flights'\n              }]\n            }\n          }]\n        }]\n      };\n\n      // Cache the data\n      this.flightDataCache[routeKey] = {\n        data: mockData,\n        timestamp: Date.now()\n      };\n      return mockData;\n    } catch (error) {\n      console.error(`Error fetching flight data for ${routeKey}:`, error);\n      throw error;\n    }\n  },\n  // Check if user has free signals remaining\n  getRemainingFreeSignals(userId) {\n    if (!userId) return 0;\n    try {\n      // Get from localStorage for persistence\n      const userSignalsData = localStorage.getItem(`user_signals_${userId}`);\n      if (!userSignalsData) return 3; // No signals used yet\n\n      const signalData = JSON.parse(userSignalsData);\n      return Math.max(0, 3 - signalData.count);\n    } catch (error) {\n      console.error('Error getting remaining signals:', error);\n      return 0;\n    }\n  },\n  // Record when a user uses a free signal\n  recordFreeSignalUsage(userId) {\n    if (!userId) return 3; // Max usage\n\n    try {\n      // Get current signal usage\n      const userSignalsData = localStorage.getItem(`user_signals_${userId}`);\n      const signalData = userSignalsData ? JSON.parse(userSignalsData) : {\n        count: 0,\n        firstUsed: Date.now()\n      };\n\n      // Increment count\n      signalData.count++;\n      signalData.lastUsed = Date.now();\n\n      // Save back to localStorage\n      localStorage.setItem(`user_signals_${userId}`, JSON.stringify(signalData));\n\n      // Return the new count\n      return signalData.count;\n    } catch (error) {\n      console.error('Error recording signal usage:', error);\n      return 3; // Assume max usage on error\n    }\n  }\n};\nexport default flightDataSharingService;","map":{"version":3,"names":["flightDataSharingService","flightDataCache","userSignals","getFlightData","originCode","destinationCode","originId","destinationId","skyscannerService","routeKey","Date","now","timestamp","data","mockData","itineraries","price","amount","legs","departure","toISOString","arrival","durationInMinutes","carriers","marketing","name","error","console","getRemainingFreeSignals","userId","userSignalsData","localStorage","getItem","signalData","JSON","parse","Math","max","count","recordFreeSignalUsage","firstUsed","lastUsed","setItem","stringify"],"sources":["C:/Users/juliu/Desktop/web/src/services/flightDataSharingService.js"],"sourcesContent":["// src/services/flightDataSharingService.js\r\n\r\n// Mock implementation for testing\r\nconst flightDataSharingService = {\r\n    // Mock flight data cache\r\n    flightDataCache: {},\r\n    \r\n    // Mock user signals\r\n    userSignals: {},\r\n    \r\n    // Get flight data\r\n    async getFlightData(originCode, destinationCode, originId, destinationId, skyscannerService) {\r\n      // Create a unique route key\r\n      const routeKey = `${originCode}-${destinationCode}`;\r\n      \r\n      // Check cache first\r\n      if (this.flightDataCache[routeKey] && \r\n          Date.now() - this.flightDataCache[routeKey].timestamp < 3600000) { // 1 hour cache\r\n        return this.flightDataCache[routeKey].data;\r\n      }\r\n      \r\n      try {\r\n        // For testing, return mock data\r\n        const mockData = {\r\n          itineraries: [\r\n            {\r\n              price: { amount: 299.99 },\r\n              legs: [{\r\n                departure: new Date().toISOString(),\r\n                arrival: new Date(Date.now() + 7200000).toISOString(), // 2 hours later\r\n                durationInMinutes: 120,\r\n                carriers: {\r\n                  marketing: [{ name: 'Example Airlines' }]\r\n                }\r\n              }]\r\n            },\r\n            {\r\n              price: { amount: 349.99 },\r\n              legs: [{\r\n                departure: new Date(Date.now() + 3600000).toISOString(), // 1 hour later\r\n                arrival: new Date(Date.now() + 10800000).toISOString(), // 3 hours later\r\n                durationInMinutes: 120,\r\n                carriers: {\r\n                  marketing: [{ name: 'Budget Air' }]\r\n                }\r\n              }]\r\n            },\r\n            {\r\n              price: { amount: 199.99 },\r\n              legs: [{\r\n                departure: new Date(Date.now() + 7200000).toISOString(), // 2 hours later\r\n                arrival: new Date(Date.now() + 14400000).toISOString(), // 4 hours later\r\n                durationInMinutes: 120,\r\n                carriers: {\r\n                  marketing: [{ name: 'Discount Flights' }]\r\n                }\r\n              }]\r\n            }\r\n          ]\r\n        };\r\n        \r\n        // Cache the data\r\n        this.flightDataCache[routeKey] = {\r\n          data: mockData,\r\n          timestamp: Date.now()\r\n        };\r\n        \r\n        return mockData;\r\n      } catch (error) {\r\n        console.error(`Error fetching flight data for ${routeKey}:`, error);\r\n        throw error;\r\n      }\r\n    },\r\n    \r\n    // Check if user has free signals remaining\r\n    getRemainingFreeSignals(userId) {\r\n      if (!userId) return 0;\r\n      \r\n      try {\r\n        // Get from localStorage for persistence\r\n        const userSignalsData = localStorage.getItem(`user_signals_${userId}`);\r\n        if (!userSignalsData) return 3; // No signals used yet\r\n        \r\n        const signalData = JSON.parse(userSignalsData);\r\n        return Math.max(0, 3 - signalData.count);\r\n      } catch (error) {\r\n        console.error('Error getting remaining signals:', error);\r\n        return 0;\r\n      }\r\n    },\r\n    \r\n    // Record when a user uses a free signal\r\n    recordFreeSignalUsage(userId) {\r\n      if (!userId) return 3; // Max usage\r\n      \r\n      try {\r\n        // Get current signal usage\r\n        const userSignalsData = localStorage.getItem(`user_signals_${userId}`);\r\n        const signalData = userSignalsData ? \r\n          JSON.parse(userSignalsData) : \r\n          { count: 0, firstUsed: Date.now() };\r\n        \r\n        // Increment count\r\n        signalData.count++;\r\n        signalData.lastUsed = Date.now();\r\n        \r\n        // Save back to localStorage\r\n        localStorage.setItem(`user_signals_${userId}`, JSON.stringify(signalData));\r\n        \r\n        // Return the new count\r\n        return signalData.count;\r\n      } catch (error) {\r\n        console.error('Error recording signal usage:', error);\r\n        return 3; // Assume max usage on error\r\n      }\r\n    }\r\n  };\r\n  \r\n  export default flightDataSharingService;"],"mappings":"AAAA;;AAEA;AACA,MAAMA,wBAAwB,GAAG;EAC7B;EACAC,eAAe,EAAE,CAAC,CAAC;EAEnB;EACAC,WAAW,EAAE,CAAC,CAAC;EAEf;EACA,MAAMC,aAAaA,CAACC,UAAU,EAAEC,eAAe,EAAEC,QAAQ,EAAEC,aAAa,EAAEC,iBAAiB,EAAE;IAC3F;IACA,MAAMC,QAAQ,GAAG,GAAGL,UAAU,IAAIC,eAAe,EAAE;;IAEnD;IACA,IAAI,IAAI,CAACJ,eAAe,CAACQ,QAAQ,CAAC,IAC9BC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACV,eAAe,CAACQ,QAAQ,CAAC,CAACG,SAAS,GAAG,OAAO,EAAE;MAAE;MACrE,OAAO,IAAI,CAACX,eAAe,CAACQ,QAAQ,CAAC,CAACI,IAAI;IAC5C;IAEA,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG;QACfC,WAAW,EAAE,CACX;UACEC,KAAK,EAAE;YAAEC,MAAM,EAAE;UAAO,CAAC;UACzBC,IAAI,EAAE,CAAC;YACLC,SAAS,EAAE,IAAIT,IAAI,CAAC,CAAC,CAACU,WAAW,CAAC,CAAC;YACnCC,OAAO,EAAE,IAAIX,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAACS,WAAW,CAAC,CAAC;YAAE;YACvDE,iBAAiB,EAAE,GAAG;YACtBC,QAAQ,EAAE;cACRC,SAAS,EAAE,CAAC;gBAAEC,IAAI,EAAE;cAAmB,CAAC;YAC1C;UACF,CAAC;QACH,CAAC,EACD;UACET,KAAK,EAAE;YAAEC,MAAM,EAAE;UAAO,CAAC;UACzBC,IAAI,EAAE,CAAC;YACLC,SAAS,EAAE,IAAIT,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAACS,WAAW,CAAC,CAAC;YAAE;YACzDC,OAAO,EAAE,IAAIX,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,CAACS,WAAW,CAAC,CAAC;YAAE;YACxDE,iBAAiB,EAAE,GAAG;YACtBC,QAAQ,EAAE;cACRC,SAAS,EAAE,CAAC;gBAAEC,IAAI,EAAE;cAAa,CAAC;YACpC;UACF,CAAC;QACH,CAAC,EACD;UACET,KAAK,EAAE;YAAEC,MAAM,EAAE;UAAO,CAAC;UACzBC,IAAI,EAAE,CAAC;YACLC,SAAS,EAAE,IAAIT,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,OAAO,CAAC,CAACS,WAAW,CAAC,CAAC;YAAE;YACzDC,OAAO,EAAE,IAAIX,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC,CAACS,WAAW,CAAC,CAAC;YAAE;YACxDE,iBAAiB,EAAE,GAAG;YACtBC,QAAQ,EAAE;cACRC,SAAS,EAAE,CAAC;gBAAEC,IAAI,EAAE;cAAmB,CAAC;YAC1C;UACF,CAAC;QACH,CAAC;MAEL,CAAC;;MAED;MACA,IAAI,CAACxB,eAAe,CAACQ,QAAQ,CAAC,GAAG;QAC/BI,IAAI,EAAEC,QAAQ;QACdF,SAAS,EAAEF,IAAI,CAACC,GAAG,CAAC;MACtB,CAAC;MAED,OAAOG,QAAQ;IACjB,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkCjB,QAAQ,GAAG,EAAEiB,KAAK,CAAC;MACnE,MAAMA,KAAK;IACb;EACF,CAAC;EAED;EACAE,uBAAuBA,CAACC,MAAM,EAAE;IAC9B,IAAI,CAACA,MAAM,EAAE,OAAO,CAAC;IAErB,IAAI;MACF;MACA,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgBH,MAAM,EAAE,CAAC;MACtE,IAAI,CAACC,eAAe,EAAE,OAAO,CAAC,CAAC,CAAC;;MAEhC,MAAMG,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACL,eAAe,CAAC;MAC9C,OAAOM,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAAC,GAAGJ,UAAU,CAACK,KAAK,CAAC;IAC1C,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;MACxD,OAAO,CAAC;IACV;EACF,CAAC;EAED;EACAa,qBAAqBA,CAACV,MAAM,EAAE;IAC5B,IAAI,CAACA,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC;;IAEvB,IAAI;MACF;MACA,MAAMC,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,gBAAgBH,MAAM,EAAE,CAAC;MACtE,MAAMI,UAAU,GAAGH,eAAe,GAChCI,IAAI,CAACC,KAAK,CAACL,eAAe,CAAC,GAC3B;QAAEQ,KAAK,EAAE,CAAC;QAAEE,SAAS,EAAE9B,IAAI,CAACC,GAAG,CAAC;MAAE,CAAC;;MAErC;MACAsB,UAAU,CAACK,KAAK,EAAE;MAClBL,UAAU,CAACQ,QAAQ,GAAG/B,IAAI,CAACC,GAAG,CAAC,CAAC;;MAEhC;MACAoB,YAAY,CAACW,OAAO,CAAC,gBAAgBb,MAAM,EAAE,EAAEK,IAAI,CAACS,SAAS,CAACV,UAAU,CAAC,CAAC;;MAE1E;MACA,OAAOA,UAAU,CAACK,KAAK;IACzB,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,OAAO,CAAC,CAAC,CAAC;IACZ;EACF;AACF,CAAC;AAED,eAAe1B,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}