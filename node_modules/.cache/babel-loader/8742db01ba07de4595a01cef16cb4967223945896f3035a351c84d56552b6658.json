{"ast":null,"code":"// src/utils/deviceDetection.js\n\n// Check if running in browser environment\nconst isBrowser = typeof window !== 'undefined';\n\n// Check if the current device is a mobile device\nexport const isMobileDevice = () => {\n  if (!isBrowser) return false;\n  return (\n    // Check for mobile-specific properties\n    typeof window.orientation !== 'undefined' ||\n    // Check for mobile-specific user agent patterns\n    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)\n  );\n};\n\n// Check if the current device is a tablet\nexport const isTabletDevice = () => {\n  if (!isBrowser) return false;\n  const userAgent = navigator.userAgent.toLowerCase();\n  return /(ipad|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|tablet)/.test(userAgent);\n};\n\n// Check if the current device is iOS\nexport const isIOS = () => {\n  if (!isBrowser) return false;\n  return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream // Rule out Windows Phone\n  ;\n};\n\n// Check if the current device is Android\nexport const isAndroid = () => {\n  if (!isBrowser) return false;\n  return /Android/i.test(navigator.userAgent);\n};\n\n// Get device type\nexport const getDeviceType = () => {\n  if (isTabletDevice()) return 'tablet';\n  if (isMobileDevice()) return 'mobile';\n  return 'desktop';\n};\n\n// Get OS name\nexport const getOSName = () => {\n  if (!isBrowser) return 'unknown';\n  const userAgent = navigator.userAgent;\n  if (isIOS()) return 'iOS';\n  if (isAndroid()) return 'Android';\n  if (/Windows/.test(userAgent)) return 'Windows';\n  if (/Mac OS X/.test(userAgent)) return 'macOS';\n  if (/Linux/.test(userAgent)) return 'Linux';\n  return 'unknown';\n};\n\n// Get browser name\nexport const getBrowserName = () => {\n  if (!isBrowser) return 'unknown';\n  const userAgent = navigator.userAgent;\n  if (/Edge/.test(userAgent)) return 'Edge';\n  if (/Chrome/.test(userAgent) && !/Chromium|Edge/.test(userAgent)) return 'Chrome';\n  if (/Firefox/.test(userAgent)) return 'Firefox';\n  if (/Safari/.test(userAgent) && !/Chrome|Chromium|Edge/.test(userAgent)) return 'Safari';\n  if (/MSIE|Trident/.test(userAgent)) return 'Internet Explorer';\n  return 'unknown';\n};\n\n// Hook for using device detection in components\nexport const useDeviceDetection = () => {\n  return {\n    isMobile: isMobileDevice(),\n    isTablet: isTabletDevice(),\n    isDesktop: !isMobileDevice() && !isTabletDevice(),\n    isIOS: isIOS(),\n    isAndroid: isAndroid(),\n    deviceType: getDeviceType(),\n    osName: getOSName(),\n    browserName: getBrowserName()\n  };\n};\n\n// Get full device info\nexport const getDeviceInfo = () => {\n  return {\n    type: getDeviceType(),\n    os: getOSName(),\n    browser: getBrowserName(),\n    isMobile: isMobileDevice(),\n    isTablet: isTabletDevice(),\n    isIOS: isIOS(),\n    isAndroid: isAndroid(),\n    userAgent: isBrowser ? navigator.userAgent : 'not available'\n  };\n};","map":{"version":3,"names":["isBrowser","window","isMobileDevice","orientation","test","navigator","userAgent","isTabletDevice","toLowerCase","isIOS","MSStream","isAndroid","getDeviceType","getOSName","getBrowserName","useDeviceDetection","isMobile","isTablet","isDesktop","deviceType","osName","browserName","getDeviceInfo","type","os","browser"],"sources":["C:/Users/juliu/Desktop/web/src/utils/deviceDetection.js"],"sourcesContent":["// src/utils/deviceDetection.js\r\n\r\n// Check if running in browser environment\r\nconst isBrowser = typeof window !== 'undefined';\r\n\r\n// Check if the current device is a mobile device\r\nexport const isMobileDevice = () => {\r\n  if (!isBrowser) return false;\r\n  \r\n  return (\r\n    // Check for mobile-specific properties\r\n    (typeof window.orientation !== 'undefined') ||\r\n    // Check for mobile-specific user agent patterns\r\n    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\r\n      navigator.userAgent\r\n    )\r\n  );\r\n};\r\n\r\n// Check if the current device is a tablet\r\nexport const isTabletDevice = () => {\r\n  if (!isBrowser) return false;\r\n  \r\n  const userAgent = navigator.userAgent.toLowerCase();\r\n  \r\n  return (\r\n    /(ipad|tablet|(android(?!.*mobile))|(windows(?!.*phone)(.*touch))|kindle|playbook|silk|tablet)/.test(\r\n      userAgent\r\n    )\r\n  );\r\n};\r\n\r\n// Check if the current device is iOS\r\nexport const isIOS = () => {\r\n  if (!isBrowser) return false;\r\n  \r\n  return (\r\n    /iPad|iPhone|iPod/.test(navigator.userAgent) &&\r\n    !window.MSStream // Rule out Windows Phone\r\n  );\r\n};\r\n\r\n// Check if the current device is Android\r\nexport const isAndroid = () => {\r\n  if (!isBrowser) return false;\r\n  \r\n  return /Android/i.test(navigator.userAgent);\r\n};\r\n\r\n// Get device type\r\nexport const getDeviceType = () => {\r\n  if (isTabletDevice()) return 'tablet';\r\n  if (isMobileDevice()) return 'mobile';\r\n  return 'desktop';\r\n};\r\n\r\n// Get OS name\r\nexport const getOSName = () => {\r\n  if (!isBrowser) return 'unknown';\r\n  \r\n  const userAgent = navigator.userAgent;\r\n  \r\n  if (isIOS()) return 'iOS';\r\n  if (isAndroid()) return 'Android';\r\n  if (/Windows/.test(userAgent)) return 'Windows';\r\n  if (/Mac OS X/.test(userAgent)) return 'macOS';\r\n  if (/Linux/.test(userAgent)) return 'Linux';\r\n  \r\n  return 'unknown';\r\n};\r\n\r\n// Get browser name\r\nexport const getBrowserName = () => {\r\n  if (!isBrowser) return 'unknown';\r\n  \r\n  const userAgent = navigator.userAgent;\r\n  \r\n  if (/Edge/.test(userAgent)) return 'Edge';\r\n  if (/Chrome/.test(userAgent) && !/Chromium|Edge/.test(userAgent)) return 'Chrome';\r\n  if (/Firefox/.test(userAgent)) return 'Firefox';\r\n  if (/Safari/.test(userAgent) && !/Chrome|Chromium|Edge/.test(userAgent)) return 'Safari';\r\n  if (/MSIE|Trident/.test(userAgent)) return 'Internet Explorer';\r\n  \r\n  return 'unknown';\r\n};\r\n\r\n// Hook for using device detection in components\r\nexport const useDeviceDetection = () => {\r\n  return {\r\n    isMobile: isMobileDevice(),\r\n    isTablet: isTabletDevice(),\r\n    isDesktop: !isMobileDevice() && !isTabletDevice(),\r\n    isIOS: isIOS(),\r\n    isAndroid: isAndroid(),\r\n    deviceType: getDeviceType(),\r\n    osName: getOSName(),\r\n    browserName: getBrowserName()\r\n  };\r\n};\r\n\r\n// Get full device info\r\nexport const getDeviceInfo = () => {\r\n  return {\r\n    type: getDeviceType(),\r\n    os: getOSName(),\r\n    browser: getBrowserName(),\r\n    isMobile: isMobileDevice(),\r\n    isTablet: isTabletDevice(),\r\n    isIOS: isIOS(),\r\n    isAndroid: isAndroid(),\r\n    userAgent: isBrowser ? navigator.userAgent : 'not available'\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}