{"ast":null,"code":"/**\r\n * Utilities for previewing settings changes\r\n */\n\n// Map of preview elements for different settings\nconst previewElements = {};\n\n/**\r\n * Create or update a preview element for settings previews\r\n * \r\n * @param {string} id Unique identifier for the preview\r\n * @param {Object} settings Settings to preview\r\n * @param {string} type Type of preview (appearance, currency, date, accessibility, darkMode)\r\n * @returns {HTMLElement} The preview element\r\n */\nexport const createSettingsPreview = (id, settings, type) => {\n  // Check if we already have a preview element for this ID\n  let previewElement = previewElements[id];\n  if (!previewElement) {\n    // Create a new preview element\n    previewElement = document.createElement('div');\n    previewElement.id = `settings-preview-${id}`;\n    previewElement.style.position = 'fixed';\n    previewElement.style.bottom = '20px';\n    previewElement.style.right = '20px';\n    previewElement.style.padding = '10px';\n    previewElement.style.borderRadius = '6px';\n    previewElement.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';\n    previewElement.style.zIndex = '9999';\n    previewElement.style.transition = 'all 0.3s ease';\n\n    // Add to document\n    document.body.appendChild(previewElement);\n\n    // Store for future use\n    previewElements[id] = previewElement;\n  }\n\n  // Update the preview based on type\n  if (type === 'appearance') {\n    updateAppearancePreview(previewElement, settings.appearance);\n  } else if (type === 'currency') {\n    updateCurrencyPreview(previewElement, settings.preferences);\n  } else if (type === 'date') {\n    updateDatePreview(previewElement, settings.preferences);\n  } else if (type === 'accessibility') {\n    updateAccessibilityPreview(previewElement, settings.accessibility);\n  } else if (type === 'darkMode') {\n    updateDarkModePreview(previewElement, settings.appearance);\n  }\n\n  // Show the preview\n  previewElement.style.display = 'block';\n\n  // Return the element\n  return previewElement;\n};\n\n/**\r\n * Hide a preview element\r\n * \r\n * @param {string} id Unique identifier for the preview\r\n */\nexport const hideSettingsPreview = id => {\n  const previewElement = previewElements[id];\n  if (previewElement) {\n    previewElement.style.display = 'none';\n  }\n};\n\n/**\r\n * Update appearance preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} appearance Appearance settings\r\n */\nconst updateAppearancePreview = (element, appearance) => {\n  // Set background color based on color scheme\n  const colorMap = {\n    'blue': '#3b82f6',\n    'purple': '#8b5cf6',\n    'green': '#10b981',\n    'red': '#ef4444',\n    'amber': '#f59e0b',\n    'indigo': '#6366f1'\n  };\n\n  // Set font size based on setting\n  const fontSizeMap = {\n    'small': '14px',\n    'medium': '16px',\n    'large': '18px'\n  };\n\n  // Get dark mode status\n  const isDarkMode = appearance.darkMode || false;\n\n  // Update preview styles based on dark mode\n  if (isDarkMode) {\n    element.style.backgroundColor = '#1e1e1e';\n    element.style.color = 'white';\n    element.style.borderLeft = `4px solid ${colorMap[appearance.colorScheme] || '#3b82f6'}`;\n  } else {\n    element.style.backgroundColor = 'white';\n    element.style.color = '#333';\n    element.style.borderLeft = `4px solid ${colorMap[appearance.colorScheme] || '#3b82f6'}`;\n  }\n  element.style.fontSize = fontSizeMap[appearance.fontSize] || '16px';\n\n  // Update content\n  element.innerHTML = `\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">Theme Preview</div>\n    <div>Color: ${appearance.colorScheme.charAt(0).toUpperCase() + appearance.colorScheme.slice(1)}</div>\n    <div>Font size: ${appearance.fontSize.charAt(0).toUpperCase() + appearance.fontSize.slice(1)}</div>\n    <div>Dark mode: ${isDarkMode ? 'On' : 'Off'}</div>\n    <div style=\"margin-top: 8px; text-align: center; font-size: 12px;\">Changes will apply when saved</div>\n  `;\n};\n\n/**\r\n * Update dark mode preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} appearance Appearance settings\r\n */\nconst updateDarkModePreview = (element, appearance) => {\n  const isDarkMode = appearance.darkMode || false;\n\n  // Style the preview element\n  if (isDarkMode) {\n    element.style.backgroundColor = '#1e1e1e';\n    element.style.color = '#e0e0e0';\n    element.style.border = '1px solid #444';\n  } else {\n    element.style.backgroundColor = 'white';\n    element.style.color = '#333';\n    element.style.border = '1px solid #d1d5db';\n  }\n\n  // Sample content to demonstrate dark mode\n  element.innerHTML = `\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">Dark Mode Preview</div>\n    <div style=\"display: flex; gap: 10px; margin-bottom: 10px;\">\n      <div style=\"width: 60px; height: 30px; background-color: ${isDarkMode ? '#333' : '#f3f4f6'}; border: 1px solid ${isDarkMode ? '#555' : '#d1d5db'}; display: flex; align-items: center; justify-content: center; font-size: 12px;\">Button</div>\n      <div style=\"width: 60px; height: 30px; background-color: ${isDarkMode ? '#3b82f6' : '#3b82f6'}; color: white; display: flex; align-items: center; justify-content: center; font-size: 12px;\">Primary</div>\n    </div>\n    <div style=\"padding: 8px; background-color: ${isDarkMode ? '#333' : '#f9fafb'}; border-radius: 4px; margin-bottom: 10px; font-size: 12px;\">\n      This is how cards will appear in ${isDarkMode ? 'dark' : 'light'} mode.\n    </div>\n    <div style=\"margin-top: 8px; text-align: center; font-size: 12px;\">Changes will apply when saved</div>\n  `;\n};\n\n/**\r\n * Update currency preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} preferences Preference settings\r\n */\nconst updateCurrencyPreview = (element, preferences) => {\n  const currencyCode = preferences.defaultCurrency || 'USD';\n\n  // Currency symbol mapping\n  const currencySymbols = {\n    'USD': '$',\n    'EUR': '€',\n    'GBP': '£',\n    'JPY': '¥',\n    'CAD': 'CA$',\n    'AUD': 'AU$',\n    'CNY': '¥',\n    'INR': '₹'\n  };\n  const symbol = currencySymbols[currencyCode] || currencyCode;\n\n  // Sample amount\n  const sampleAmount = 1234.56;\n\n  // Format the amount\n  let formattedAmount;\n  if (currencyCode === 'JPY' || currencyCode === 'CNY') {\n    formattedAmount = Math.round(sampleAmount).toLocaleString();\n  } else {\n    formattedAmount = sampleAmount.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n  }\n\n  // Update preview element\n  element.style.backgroundColor = '#f0f9ff';\n  element.style.color = '#0369a1';\n  element.style.border = '1px solid #bae6fd';\n\n  // Update content\n  element.innerHTML = `\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">Currency Preview</div>\n    <div style=\"font-size: 18px; margin-bottom: 5px;\">${symbol}${formattedAmount}</div>\n    <div style=\"font-size: 12px;\">Currency: ${currencyCode}</div>\n    <div style=\"margin-top: 8px; text-align: center; font-size: 12px;\">Changes will apply when saved</div>\n  `;\n};\n\n/**\r\n * Update date preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} preferences Preference settings\r\n */\nconst updateDatePreview = (element, preferences) => {\n  const format = preferences.dateFormat || 'MM/DD/YYYY';\n\n  // Current date\n  const now = new Date();\n\n  // Format the date based on the selected format\n  let formattedDate;\n  switch (format) {\n    case 'DD/MM/YYYY':\n      formattedDate = `${padZero(now.getDate())}/${padZero(now.getMonth() + 1)}/${now.getFullYear()}`;\n      break;\n    case 'YYYY-MM-DD':\n      formattedDate = `${now.getFullYear()}-${padZero(now.getMonth() + 1)}-${padZero(now.getDate())}`;\n      break;\n    case 'MMMM D, YYYY':\n      formattedDate = `${getMonthName(now.getMonth())} ${now.getDate()}, ${now.getFullYear()}`;\n      break;\n    case 'D MMMM YYYY':\n      formattedDate = `${now.getDate()} ${getMonthName(now.getMonth())} ${now.getFullYear()}`;\n      break;\n    case 'MM/DD/YYYY':\n    default:\n      formattedDate = `${padZero(now.getMonth() + 1)}/${padZero(now.getDate())}/${now.getFullYear()}`;\n      break;\n  }\n\n  // Update preview element\n  element.style.backgroundColor = '#f0fdf4';\n  element.style.color = '#166534';\n  element.style.border = '1px solid #86efac';\n\n  // Update content\n  element.innerHTML = `\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">Date Format Preview</div>\n    <div style=\"font-size: 18px; margin-bottom: 5px;\">${formattedDate}</div>\n    <div style=\"font-size: 12px;\">Format: ${format}</div>\n    <div style=\"margin-top: 8px; text-align: center; font-size: 12px;\">Changes will apply when saved</div>\n  `;\n};\n\n/**\r\n * Update accessibility preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} accessibility Accessibility settings\r\n */\nconst updateAccessibilityPreview = (element, accessibility) => {\n  const highContrast = accessibility.highContrast || false;\n  const largerClickTargets = accessibility.largerClickTargets || false;\n  const textScaling = accessibility.textScaling || 100;\n\n  // Style the preview element\n  if (highContrast) {\n    element.style.backgroundColor = 'black';\n    element.style.color = 'white';\n    element.style.border = '2px solid white';\n  } else {\n    element.style.backgroundColor = '#f3f4f6';\n    element.style.color = '#1f2937';\n    element.style.border = '1px solid #d1d5db';\n  }\n\n  // Apply text scaling\n  const scaleFactor = textScaling / 100;\n\n  // Update content\n  element.innerHTML = `\n    <div style=\"font-weight: bold; margin-bottom: 5px; font-size: ${16 * scaleFactor}px;\">Accessibility Preview</div>\n    <div style=\"margin-bottom: 10px; font-size: ${14 * scaleFactor}px;\">\n      <div>High Contrast: ${highContrast ? 'On' : 'Off'}</div>\n      <div>Larger Targets: ${largerClickTargets ? 'On' : 'Off'}</div>\n      <div>Text Scale: ${textScaling}%</div>\n    </div>\n    <div style=\"display: flex; gap: 5px; margin-bottom: 5px;\">\n      <button style=\"\n        padding: ${largerClickTargets ? '12px' : '6px'} ${largerClickTargets ? '16px' : '8px'};\n        background-color: ${highContrast ? 'black' : '#e5e7eb'};\n        color: ${highContrast ? 'yellow' : '#374151'};\n        border: ${highContrast ? '2px solid white' : '1px solid #d1d5db'};\n        font-size: ${12 * scaleFactor}px;\n      \">Button</button>\n      <button style=\"\n        padding: ${largerClickTargets ? '12px' : '6px'} ${largerClickTargets ? '16px' : '8px'};\n        background-color: ${highContrast ? 'yellow' : '#3b82f6'};\n        color: ${highContrast ? 'black' : 'white'};\n        border: none;\n        font-size: ${12 * scaleFactor}px;\n      \">Primary</button>\n    </div>\n    <div style=\"margin-top: 8px; text-align: center; font-size: ${12 * scaleFactor}px;\">\n      Changes will apply when saved\n    </div>\n  `;\n};\n\n// Helper functions\nconst padZero = num => {\n  return num.toString().padStart(2, '0');\n};\nconst getMonthName = monthIndex => {\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  return months[monthIndex];\n};","map":{"version":3,"names":["previewElements","createSettingsPreview","id","settings","type","previewElement","document","createElement","style","position","bottom","right","padding","borderRadius","boxShadow","zIndex","transition","body","appendChild","updateAppearancePreview","appearance","updateCurrencyPreview","preferences","updateDatePreview","updateAccessibilityPreview","accessibility","updateDarkModePreview","display","hideSettingsPreview","element","colorMap","fontSizeMap","isDarkMode","darkMode","backgroundColor","color","borderLeft","colorScheme","fontSize","innerHTML","charAt","toUpperCase","slice","border","currencyCode","defaultCurrency","currencySymbols","symbol","sampleAmount","formattedAmount","Math","round","toLocaleString","toFixed","replace","format","dateFormat","now","Date","formattedDate","padZero","getDate","getMonth","getFullYear","getMonthName","highContrast","largerClickTargets","textScaling","scaleFactor","num","toString","padStart","monthIndex","months"],"sources":["C:/Users/juliu/Desktop/web/src/utils/settingsPreviewUtils.js"],"sourcesContent":["/**\r\n * Utilities for previewing settings changes\r\n */\r\n\r\n// Map of preview elements for different settings\r\nconst previewElements = {};\r\n\r\n/**\r\n * Create or update a preview element for settings previews\r\n * \r\n * @param {string} id Unique identifier for the preview\r\n * @param {Object} settings Settings to preview\r\n * @param {string} type Type of preview (appearance, currency, date, accessibility, darkMode)\r\n * @returns {HTMLElement} The preview element\r\n */\r\nexport const createSettingsPreview = (id, settings, type) => {\r\n  // Check if we already have a preview element for this ID\r\n  let previewElement = previewElements[id];\r\n  \r\n  if (!previewElement) {\r\n    // Create a new preview element\r\n    previewElement = document.createElement('div');\r\n    previewElement.id = `settings-preview-${id}`;\r\n    previewElement.style.position = 'fixed';\r\n    previewElement.style.bottom = '20px';\r\n    previewElement.style.right = '20px';\r\n    previewElement.style.padding = '10px';\r\n    previewElement.style.borderRadius = '6px';\r\n    previewElement.style.boxShadow = '0 4px 6px rgba(0, 0, 0, 0.1)';\r\n    previewElement.style.zIndex = '9999';\r\n    previewElement.style.transition = 'all 0.3s ease';\r\n    \r\n    // Add to document\r\n    document.body.appendChild(previewElement);\r\n    \r\n    // Store for future use\r\n    previewElements[id] = previewElement;\r\n  }\r\n  \r\n  // Update the preview based on type\r\n  if (type === 'appearance') {\r\n    updateAppearancePreview(previewElement, settings.appearance);\r\n  } else if (type === 'currency') {\r\n    updateCurrencyPreview(previewElement, settings.preferences);\r\n  } else if (type === 'date') {\r\n    updateDatePreview(previewElement, settings.preferences);\r\n  } else if (type === 'accessibility') {\r\n    updateAccessibilityPreview(previewElement, settings.accessibility);\r\n  } else if (type === 'darkMode') {\r\n    updateDarkModePreview(previewElement, settings.appearance);\r\n  }\r\n  \r\n  // Show the preview\r\n  previewElement.style.display = 'block';\r\n  \r\n  // Return the element\r\n  return previewElement;\r\n};\r\n\r\n/**\r\n * Hide a preview element\r\n * \r\n * @param {string} id Unique identifier for the preview\r\n */\r\nexport const hideSettingsPreview = (id) => {\r\n  const previewElement = previewElements[id];\r\n  \r\n  if (previewElement) {\r\n    previewElement.style.display = 'none';\r\n  }\r\n};\r\n\r\n/**\r\n * Update appearance preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} appearance Appearance settings\r\n */\r\nconst updateAppearancePreview = (element, appearance) => {\r\n  // Set background color based on color scheme\r\n  const colorMap = {\r\n    'blue': '#3b82f6',\r\n    'purple': '#8b5cf6',\r\n    'green': '#10b981',\r\n    'red': '#ef4444',\r\n    'amber': '#f59e0b',\r\n    'indigo': '#6366f1'\r\n  };\r\n  \r\n  // Set font size based on setting\r\n  const fontSizeMap = {\r\n    'small': '14px',\r\n    'medium': '16px',\r\n    'large': '18px'\r\n  };\r\n  \r\n  // Get dark mode status\r\n  const isDarkMode = appearance.darkMode || false;\r\n  \r\n  // Update preview styles based on dark mode\r\n  if (isDarkMode) {\r\n    element.style.backgroundColor = '#1e1e1e';\r\n    element.style.color = 'white';\r\n    element.style.borderLeft = `4px solid ${colorMap[appearance.colorScheme] || '#3b82f6'}`;\r\n  } else {\r\n    element.style.backgroundColor = 'white';\r\n    element.style.color = '#333';\r\n    element.style.borderLeft = `4px solid ${colorMap[appearance.colorScheme] || '#3b82f6'}`;\r\n  }\r\n  \r\n  element.style.fontSize = fontSizeMap[appearance.fontSize] || '16px';\r\n  \r\n  // Update content\r\n  element.innerHTML = `\r\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">Theme Preview</div>\r\n    <div>Color: ${appearance.colorScheme.charAt(0).toUpperCase() + appearance.colorScheme.slice(1)}</div>\r\n    <div>Font size: ${appearance.fontSize.charAt(0).toUpperCase() + appearance.fontSize.slice(1)}</div>\r\n    <div>Dark mode: ${isDarkMode ? 'On' : 'Off'}</div>\r\n    <div style=\"margin-top: 8px; text-align: center; font-size: 12px;\">Changes will apply when saved</div>\r\n  `;\r\n};\r\n\r\n/**\r\n * Update dark mode preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} appearance Appearance settings\r\n */\r\nconst updateDarkModePreview = (element, appearance) => {\r\n  const isDarkMode = appearance.darkMode || false;\r\n  \r\n  // Style the preview element\r\n  if (isDarkMode) {\r\n    element.style.backgroundColor = '#1e1e1e';\r\n    element.style.color = '#e0e0e0';\r\n    element.style.border = '1px solid #444';\r\n  } else {\r\n    element.style.backgroundColor = 'white';\r\n    element.style.color = '#333';\r\n    element.style.border = '1px solid #d1d5db';\r\n  }\r\n  \r\n  // Sample content to demonstrate dark mode\r\n  element.innerHTML = `\r\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">Dark Mode Preview</div>\r\n    <div style=\"display: flex; gap: 10px; margin-bottom: 10px;\">\r\n      <div style=\"width: 60px; height: 30px; background-color: ${isDarkMode ? '#333' : '#f3f4f6'}; border: 1px solid ${isDarkMode ? '#555' : '#d1d5db'}; display: flex; align-items: center; justify-content: center; font-size: 12px;\">Button</div>\r\n      <div style=\"width: 60px; height: 30px; background-color: ${isDarkMode ? '#3b82f6' : '#3b82f6'}; color: white; display: flex; align-items: center; justify-content: center; font-size: 12px;\">Primary</div>\r\n    </div>\r\n    <div style=\"padding: 8px; background-color: ${isDarkMode ? '#333' : '#f9fafb'}; border-radius: 4px; margin-bottom: 10px; font-size: 12px;\">\r\n      This is how cards will appear in ${isDarkMode ? 'dark' : 'light'} mode.\r\n    </div>\r\n    <div style=\"margin-top: 8px; text-align: center; font-size: 12px;\">Changes will apply when saved</div>\r\n  `;\r\n};\r\n\r\n/**\r\n * Update currency preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} preferences Preference settings\r\n */\r\nconst updateCurrencyPreview = (element, preferences) => {\r\n  const currencyCode = preferences.defaultCurrency || 'USD';\r\n  \r\n  // Currency symbol mapping\r\n  const currencySymbols = {\r\n    'USD': '$',\r\n    'EUR': '€',\r\n    'GBP': '£',\r\n    'JPY': '¥',\r\n    'CAD': 'CA$',\r\n    'AUD': 'AU$',\r\n    'CNY': '¥',\r\n    'INR': '₹'\r\n  };\r\n  \r\n  const symbol = currencySymbols[currencyCode] || currencyCode;\r\n  \r\n  // Sample amount\r\n  const sampleAmount = 1234.56;\r\n  \r\n  // Format the amount\r\n  let formattedAmount;\r\n  if (currencyCode === 'JPY' || currencyCode === 'CNY') {\r\n    formattedAmount = Math.round(sampleAmount).toLocaleString();\r\n  } else {\r\n    formattedAmount = sampleAmount.toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n  }\r\n  \r\n  // Update preview element\r\n  element.style.backgroundColor = '#f0f9ff';\r\n  element.style.color = '#0369a1';\r\n  element.style.border = '1px solid #bae6fd';\r\n  \r\n  // Update content\r\n  element.innerHTML = `\r\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">Currency Preview</div>\r\n    <div style=\"font-size: 18px; margin-bottom: 5px;\">${symbol}${formattedAmount}</div>\r\n    <div style=\"font-size: 12px;\">Currency: ${currencyCode}</div>\r\n    <div style=\"margin-top: 8px; text-align: center; font-size: 12px;\">Changes will apply when saved</div>\r\n  `;\r\n};\r\n\r\n/**\r\n * Update date preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} preferences Preference settings\r\n */\r\nconst updateDatePreview = (element, preferences) => {\r\n  const format = preferences.dateFormat || 'MM/DD/YYYY';\r\n  \r\n  // Current date\r\n  const now = new Date();\r\n  \r\n  // Format the date based on the selected format\r\n  let formattedDate;\r\n  switch (format) {\r\n    case 'DD/MM/YYYY':\r\n      formattedDate = `${padZero(now.getDate())}/${padZero(now.getMonth() + 1)}/${now.getFullYear()}`;\r\n      break;\r\n    case 'YYYY-MM-DD':\r\n      formattedDate = `${now.getFullYear()}-${padZero(now.getMonth() + 1)}-${padZero(now.getDate())}`;\r\n      break;\r\n    case 'MMMM D, YYYY':\r\n      formattedDate = `${getMonthName(now.getMonth())} ${now.getDate()}, ${now.getFullYear()}`;\r\n      break;\r\n    case 'D MMMM YYYY':\r\n      formattedDate = `${now.getDate()} ${getMonthName(now.getMonth())} ${now.getFullYear()}`;\r\n      break;\r\n    case 'MM/DD/YYYY':\r\n    default:\r\n      formattedDate = `${padZero(now.getMonth() + 1)}/${padZero(now.getDate())}/${now.getFullYear()}`;\r\n      break;\r\n  }\r\n  \r\n  // Update preview element\r\n  element.style.backgroundColor = '#f0fdf4';\r\n  element.style.color = '#166534';\r\n  element.style.border = '1px solid #86efac';\r\n  \r\n  // Update content\r\n  element.innerHTML = `\r\n    <div style=\"font-weight: bold; margin-bottom: 5px;\">Date Format Preview</div>\r\n    <div style=\"font-size: 18px; margin-bottom: 5px;\">${formattedDate}</div>\r\n    <div style=\"font-size: 12px;\">Format: ${format}</div>\r\n    <div style=\"margin-top: 8px; text-align: center; font-size: 12px;\">Changes will apply when saved</div>\r\n  `;\r\n};\r\n\r\n/**\r\n * Update accessibility preview\r\n * \r\n * @param {HTMLElement} element Preview element\r\n * @param {Object} accessibility Accessibility settings\r\n */\r\nconst updateAccessibilityPreview = (element, accessibility) => {\r\n  const highContrast = accessibility.highContrast || false;\r\n  const largerClickTargets = accessibility.largerClickTargets || false;\r\n  const textScaling = accessibility.textScaling || 100;\r\n  \r\n  // Style the preview element\r\n  if (highContrast) {\r\n    element.style.backgroundColor = 'black';\r\n    element.style.color = 'white';\r\n    element.style.border = '2px solid white';\r\n  } else {\r\n    element.style.backgroundColor = '#f3f4f6';\r\n    element.style.color = '#1f2937';\r\n    element.style.border = '1px solid #d1d5db';\r\n  }\r\n  \r\n  // Apply text scaling\r\n  const scaleFactor = textScaling / 100;\r\n  \r\n  // Update content\r\n  element.innerHTML = `\r\n    <div style=\"font-weight: bold; margin-bottom: 5px; font-size: ${16 * scaleFactor}px;\">Accessibility Preview</div>\r\n    <div style=\"margin-bottom: 10px; font-size: ${14 * scaleFactor}px;\">\r\n      <div>High Contrast: ${highContrast ? 'On' : 'Off'}</div>\r\n      <div>Larger Targets: ${largerClickTargets ? 'On' : 'Off'}</div>\r\n      <div>Text Scale: ${textScaling}%</div>\r\n    </div>\r\n    <div style=\"display: flex; gap: 5px; margin-bottom: 5px;\">\r\n      <button style=\"\r\n        padding: ${largerClickTargets ? '12px' : '6px'} ${largerClickTargets ? '16px' : '8px'};\r\n        background-color: ${highContrast ? 'black' : '#e5e7eb'};\r\n        color: ${highContrast ? 'yellow' : '#374151'};\r\n        border: ${highContrast ? '2px solid white' : '1px solid #d1d5db'};\r\n        font-size: ${12 * scaleFactor}px;\r\n      \">Button</button>\r\n      <button style=\"\r\n        padding: ${largerClickTargets ? '12px' : '6px'} ${largerClickTargets ? '16px' : '8px'};\r\n        background-color: ${highContrast ? 'yellow' : '#3b82f6'};\r\n        color: ${highContrast ? 'black' : 'white'};\r\n        border: none;\r\n        font-size: ${12 * scaleFactor}px;\r\n      \">Primary</button>\r\n    </div>\r\n    <div style=\"margin-top: 8px; text-align: center; font-size: ${12 * scaleFactor}px;\">\r\n      Changes will apply when saved\r\n    </div>\r\n  `;\r\n};\r\n\r\n// Helper functions\r\nconst padZero = (num) => {\r\n  return num.toString().padStart(2, '0');\r\n};\r\n\r\nconst getMonthName = (monthIndex) => {\r\n  const months = [\r\n    'January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'\r\n  ];\r\n  return months[monthIndex];\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}