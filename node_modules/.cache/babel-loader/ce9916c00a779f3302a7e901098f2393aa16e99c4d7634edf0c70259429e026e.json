{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\components\\\\Auth\\\\PrivateRoute.jsx\",\n  _s = $RefreshSig$();\n// src/components/Auth/PrivateRoute.jsx\n\nimport React from 'react';\nimport { Navigate, useLocation } from 'react-router-dom';\nimport { useAuth } from '../../hooks/useAuth';\n\n// A wrapper for <Route> that redirects to the login screen\n// if the user is not authenticated\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction PrivateRoute({\n  children\n}) {\n  _s();\n  const {\n    isAuthenticated,\n    loading\n  } = useAuth();\n  const location = useLocation();\n  if (loading) {\n    // Show loading state while checking authentication\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex items-center justify-center h-screen\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"animate-spin rounded-full h-10 w-10 border-b-2 border-blue-600\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  }\n  if (!isAuthenticated) {\n    // Redirect to login page with return URL\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      state: {\n        from: location\n      },\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this);\n  }\n\n  // If authenticated, render the protected component\n  return children;\n}\n_s(PrivateRoute, \"fNj96oVmPd4sFazcimgf9N7S8ao=\", false, function () {\n  return [useAuth, useLocation];\n});\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","Navigate","useLocation","useAuth","jsxDEV","_jsxDEV","PrivateRoute","children","_s","isAuthenticated","loading","location","className","fileName","_jsxFileName","lineNumber","columnNumber","to","state","from","replace","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/components/Auth/PrivateRoute.jsx"],"sourcesContent":["// src/components/Auth/PrivateRoute.jsx\r\n\r\nimport React from 'react';\r\nimport { Navigate, useLocation } from 'react-router-dom';\r\nimport { useAuth } from '../../hooks/useAuth';\r\n\r\n// A wrapper for <Route> that redirects to the login screen\r\n// if the user is not authenticated\r\nfunction PrivateRoute({ children }) {\r\n  const { isAuthenticated, loading } = useAuth();\r\n  const location = useLocation();\r\n  \r\n  if (loading) {\r\n    // Show loading state while checking authentication\r\n    return (\r\n      <div className=\"flex items-center justify-center h-screen\">\r\n        <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-blue-600\"></div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  if (!isAuthenticated) {\r\n    // Redirect to login page with return URL\r\n    return <Navigate to=\"/login\" state={{ from: location }} replace />;\r\n  }\r\n  \r\n  // If authenticated, render the protected component\r\n  return children;\r\n}\r\n\r\nexport default PrivateRoute;"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,EAAEC,WAAW,QAAQ,kBAAkB;AACxD,SAASC,OAAO,QAAQ,qBAAqB;;AAE7C;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,SAASC,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAClC,MAAM;IAAEC,eAAe;IAAEC;EAAQ,CAAC,GAAGP,OAAO,CAAC,CAAC;EAC9C,MAAMQ,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9B,IAAIQ,OAAO,EAAE;IACX;IACA,oBACEL,OAAA;MAAKO,SAAS,EAAC,2CAA2C;MAAAL,QAAA,eACxDF,OAAA;QAAKO,SAAS,EAAC;MAAgE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnF,CAAC;EAEV;EAEA,IAAI,CAACP,eAAe,EAAE;IACpB;IACA,oBAAOJ,OAAA,CAACJ,QAAQ;MAACgB,EAAE,EAAC,QAAQ;MAACC,KAAK,EAAE;QAAEC,IAAI,EAAER;MAAS,CAAE;MAACS,OAAO;IAAA;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpE;;EAEA;EACA,OAAOT,QAAQ;AACjB;AAACC,EAAA,CApBQF,YAAY;EAAA,QACkBH,OAAO,EAC3BD,WAAW;AAAA;AAAAmB,EAAA,GAFrBf,YAAY;AAsBrB,eAAeA,YAAY;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}