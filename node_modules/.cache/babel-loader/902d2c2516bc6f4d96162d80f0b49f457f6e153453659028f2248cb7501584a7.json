{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useMobileSubscription.js\nimport { useContext, useCallback } from 'react';\nimport { MobileSubscriptionContext } from '../context/MobileSubscriptionContext';\nimport { isIOS, isAndroid } from '../utils/deviceDetection';\nexport const useMobileSubscription = () => {\n  _s();\n  const context = useContext(MobileSubscriptionContext);\n  if (!context) {\n    // Provide a fallback if context is not available\n    return {\n      subscription: null,\n      loading: false,\n      error: new Error('MobileSubscriptionProvider not found'),\n      activateSubscription: () => Promise.reject(new Error('MobileSubscriptionProvider not found')),\n      deactivateSubscription: () => Promise.reject(new Error('MobileSubscriptionProvider not found')),\n      hasActiveSubscription: false\n    };\n  }\n\n  // Helper to detect platform\n  const getPlatform = () => {\n    if (isIOS()) return 'ios';\n    if (isAndroid()) return 'android';\n    return 'web';\n  };\n\n  // Activate subscription with code from web purchase\n  const activateWithCode = useCallback(async code => {\n    try {\n      // Get the current platform\n      const platform = getPlatform();\n\n      // Call the appropriate handler based on platform\n      if (platform === 'ios' || platform === 'android') {\n        // For a fully working version, you would make an API call here\n        // But for now we'll use a simpler implementation to avoid dependencies\n\n        // Store the code locally\n        localStorage.setItem('mobileSubscriptionCode', code);\n        localStorage.setItem('mobileSubscriptionActivated', new Date().toISOString());\n\n        // Update context\n        if (context.refreshSubscription) {\n          context.refreshSubscription();\n        }\n        return {\n          success: true,\n          status: 'active',\n          platform,\n          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days from now\n        };\n      } else {\n        // Not on a mobile platform, but we'll allow activation anyway for testing\n        localStorage.setItem('mobileSubscriptionCode', code);\n        localStorage.setItem('mobileSubscriptionActivated', new Date().toISOString());\n\n        // Update context\n        if (context.refreshSubscription) {\n          context.refreshSubscription();\n        }\n        return {\n          success: true,\n          status: 'active',\n          platform: 'web',\n          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days from now\n        };\n      }\n    } catch (error) {\n      console.error('Code activation error:', error);\n      return {\n        success: false,\n        error: error.message || 'Failed to activate code'\n      };\n    }\n  }, [context]);\n\n  // Add the activateWithCode function to the context\n  return {\n    ...context,\n    activateWithCode\n  };\n};\n_s(useMobileSubscription, \"J2Fb8HQEtQclfTHKzmhd5pKTLvY=\");\nexport default useMobileSubscription;","map":{"version":3,"names":["useContext","useCallback","MobileSubscriptionContext","isIOS","isAndroid","useMobileSubscription","_s","context","subscription","loading","error","Error","activateSubscription","Promise","reject","deactivateSubscription","hasActiveSubscription","getPlatform","activateWithCode","code","platform","localStorage","setItem","Date","toISOString","refreshSubscription","success","status","expiresAt","now","console","message"],"sources":["C:/Users/juliu/Desktop/web/src/hooks/useMobileSubscription.js"],"sourcesContent":["// src/hooks/useMobileSubscription.js\r\nimport { useContext, useCallback } from 'react';\r\nimport { MobileSubscriptionContext } from '../context/MobileSubscriptionContext';\r\nimport { isIOS, isAndroid } from '../utils/deviceDetection';\r\n\r\nexport const useMobileSubscription = () => {\r\n  const context = useContext(MobileSubscriptionContext);\r\n  \r\n  if (!context) {\r\n    // Provide a fallback if context is not available\r\n    return {\r\n      subscription: null,\r\n      loading: false,\r\n      error: new Error('MobileSubscriptionProvider not found'),\r\n      activateSubscription: () => Promise.reject(new Error('MobileSubscriptionProvider not found')),\r\n      deactivateSubscription: () => Promise.reject(new Error('MobileSubscriptionProvider not found')),\r\n      hasActiveSubscription: false\r\n    };\r\n  }\r\n  \r\n  // Helper to detect platform\r\n  const getPlatform = () => {\r\n    if (isIOS()) return 'ios';\r\n    if (isAndroid()) return 'android';\r\n    return 'web';\r\n  };\r\n  \r\n  // Activate subscription with code from web purchase\r\n  const activateWithCode = useCallback(async (code) => {\r\n    try {\r\n      // Get the current platform\r\n      const platform = getPlatform();\r\n      \r\n      // Call the appropriate handler based on platform\r\n      if (platform === 'ios' || platform === 'android') {\r\n        // For a fully working version, you would make an API call here\r\n        // But for now we'll use a simpler implementation to avoid dependencies\r\n        \r\n        // Store the code locally\r\n        localStorage.setItem('mobileSubscriptionCode', code);\r\n        localStorage.setItem('mobileSubscriptionActivated', new Date().toISOString());\r\n        \r\n        // Update context\r\n        if (context.refreshSubscription) {\r\n          context.refreshSubscription();\r\n        }\r\n        \r\n        return { \r\n          success: true,\r\n          status: 'active',\r\n          platform,\r\n          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days from now\r\n        };\r\n      } else {\r\n        // Not on a mobile platform, but we'll allow activation anyway for testing\r\n        localStorage.setItem('mobileSubscriptionCode', code);\r\n        localStorage.setItem('mobileSubscriptionActivated', new Date().toISOString());\r\n        \r\n        // Update context\r\n        if (context.refreshSubscription) {\r\n          context.refreshSubscription();\r\n        }\r\n        \r\n        return { \r\n          success: true,\r\n          status: 'active',\r\n          platform: 'web',\r\n          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days from now\r\n        };\r\n      }\r\n    } catch (error) {\r\n      console.error('Code activation error:', error);\r\n      return { success: false, error: error.message || 'Failed to activate code' };\r\n    }\r\n  }, [context]);\r\n  \r\n  // Add the activateWithCode function to the context\r\n  return {\r\n    ...context,\r\n    activateWithCode\r\n  };\r\n};\r\n\r\nexport default useMobileSubscription;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}