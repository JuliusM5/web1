{"ast":null,"code":"// src/services/MobileSubscriptionService.js\n\n/**\r\n * Service for handling mobile platform (iOS/Android) subscriptions\r\n * without requiring user accounts\r\n */\nimport { Platform } from 'react-native';\nimport { storageKeys } from '../constants/storageKeys';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nclass MobileSubscriptionService {\n  constructor() {\n    // We'll initialize the appropriate platform-specific subscription handler\n    this.platformHandler = null;\n    this.initializePlatformHandler();\n  }\n  async initializePlatformHandler() {\n    if (Platform.OS === 'ios') {\n      // Dynamically import to avoid bundling iOS code on Android\n      const {\n        IOSSubscriptionHandler\n      } = await import('./platforms/IOSSubscriptionHandler');\n      this.platformHandler = new IOSSubscriptionHandler();\n    } else if (Platform.OS === 'android') {\n      const {\n        AndroidSubscriptionHandler\n      } = await import('./platforms/AndroidSubscriptionHandler');\n      this.platformHandler = new AndroidSubscriptionHandler();\n    }\n\n    // Initialize once imported\n    if (this.platformHandler) {\n      await this.platformHandler.initialize();\n    }\n  }\n\n  /**\r\n   * Get available subscription products\r\n   */\n  async getProducts() {\n    if (!this.platformHandler) await this.initializePlatformHandler();\n    return await this.platformHandler.getProducts();\n  }\n\n  /**\r\n   * Purchase a subscription and store the receipt\r\n   */\n  async purchaseSubscription(productId) {\n    if (!this.platformHandler) await this.initializePlatformHandler();\n    try {\n      const purchaseResult = await this.platformHandler.purchaseSubscription(productId);\n      if (purchaseResult.success) {\n        // Store receipt locally for offline verification\n        await AsyncStorage.setItem(storageKeys.SUBSCRIPTION_RECEIPT, purchaseResult.receipt);\n        await AsyncStorage.setItem(storageKeys.SUBSCRIPTION_PRODUCT_ID, productId);\n\n        // Verify the receipt with server when online\n        const verificationResult = await this.verifyReceipt(purchaseResult.receipt);\n        return {\n          success: true,\n          verified: verificationResult.verified,\n          expiresAt: verificationResult.expiresAt,\n          productId\n        };\n      }\n      return {\n        success: false,\n        error: purchaseResult.error\n      };\n    } catch (error) {\n      console.error('Purchase failed:', error);\n      return {\n        success: false,\n        error: error.message || 'Purchase failed'\n      };\n    }\n  }\n\n  /**\r\n   * Verify subscription status\r\n   */\n  async verifySubscription() {\n    if (!this.platformHandler) await this.initializePlatformHandler();\n    try {\n      // First try local receipt verification with platform\n      const receipt = await AsyncStorage.getItem(storageKeys.SUBSCRIPTION_RECEIPT);\n      const productId = await AsyncStorage.getItem(storageKeys.SUBSCRIPTION_PRODUCT_ID);\n      if (!receipt || !productId) {\n        return {\n          isSubscribed: false\n        };\n      }\n\n      // Using platform's own verification first (works offline)\n      const localVerification = await this.platformHandler.verifyReceipt(receipt, productId);\n      if (localVerification.isValid) {\n        // If online, also verify with server for additional security\n        try {\n          const serverVerification = await this.verifyReceipt(receipt);\n          return {\n            isSubscribed: serverVerification.verified,\n            expiresAt: serverVerification.expiresAt,\n            plan: productId\n          };\n        } catch (e) {\n          // If server unreachable, use local verification result\n          console.log('Using local verification due to server error:', e);\n          return {\n            isSubscribed: true,\n            expiresAt: localVerification.expiresAt,\n            plan: productId,\n            isOfflineVerified: true\n          };\n        }\n      }\n      return {\n        isSubscribed: false\n      };\n    } catch (error) {\n      console.error('Verification failed:', error);\n      return {\n        isSubscribed: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\r\n   * Restore previous purchases\r\n   */\n  async restorePurchases() {\n    if (!this.platformHandler) await this.initializePlatformHandler();\n    try {\n      const restoredPurchases = await this.platformHandler.restorePurchases();\n      if (restoredPurchases.success && restoredPurchases.purchases.length > 0) {\n        // Find the most recent active subscription\n        const activeSubscription = restoredPurchases.purchases.find(p => p.isActive);\n        if (activeSubscription) {\n          await AsyncStorage.setItem(storageKeys.SUBSCRIPTION_RECEIPT, activeSubscription.receipt);\n          await AsyncStorage.setItem(storageKeys.SUBSCRIPTION_PRODUCT_ID, activeSubscription.productId);\n          return {\n            success: true,\n            isSubscribed: true,\n            productId: activeSubscription.productId\n          };\n        }\n      }\n      return {\n        success: restoredPurchases.success,\n        isSubscribed: false\n      };\n    } catch (error) {\n      console.error('Restore failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\r\n   * Verify receipt with the server\r\n   * This adds an extra layer of security beyond the platform's verification\r\n   */\n  async verifyReceipt(receipt) {\n    // Make API call to verify receipt with Apple/Google servers\n    try {\n      const platform = Platform.OS;\n      const response = await fetch(`https://yourapi.com/verify-${platform}-receipt`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          receipt\n        })\n      });\n      const result = await response.json();\n      return result;\n    } catch (error) {\n      console.error('Server verification failed:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Cross-platform: activate subscription with code from web\r\n   * This allows users who purchased on web to unlock mobile features\r\n   */\n  async activateWithCode(accessCode) {\n    try {\n      const response = await fetch('https://yourapi.com/activate-code', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          accessCode,\n          platform: Platform.OS\n        })\n      });\n      const result = await response.json();\n      if (result.success) {\n        // Store \"emulated\" receipt info for this code-based activation\n        await AsyncStorage.setItem(storageKeys.SUBSCRIPTION_RECEIPT, result.webReceipt);\n        await AsyncStorage.setItem(storageKeys.SUBSCRIPTION_PRODUCT_ID, result.plan);\n        await AsyncStorage.setItem(storageKeys.SUBSCRIPTION_SOURCE, 'webCode');\n        return {\n          success: true,\n          isSubscribed: true,\n          expiresAt: result.expiresAt,\n          plan: result.plan\n        };\n      }\n      return {\n        success: false,\n        error: result.error || 'Invalid code'\n      };\n    } catch (error) {\n      console.error('Code activation failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n}\nexport default new MobileSubscriptionService();","map":{"version":3,"names":["Platform","storageKeys","AsyncStorage","MobileSubscriptionService","constructor","platformHandler","initializePlatformHandler","OS","IOSSubscriptionHandler","AndroidSubscriptionHandler","initialize","getProducts","purchaseSubscription","productId","purchaseResult","success","setItem","SUBSCRIPTION_RECEIPT","receipt","SUBSCRIPTION_PRODUCT_ID","verificationResult","verifyReceipt","verified","expiresAt","error","console","message","verifySubscription","getItem","isSubscribed","localVerification","isValid","serverVerification","plan","e","log","isOfflineVerified","restorePurchases","restoredPurchases","purchases","length","activeSubscription","find","p","isActive","platform","response","fetch","method","headers","body","JSON","stringify","result","json","activateWithCode","accessCode","webReceipt","SUBSCRIPTION_SOURCE"],"sources":["C:/Users/juliu/Desktop/web/src/services/MobileSubscriptionService.js"],"sourcesContent":["// src/services/MobileSubscriptionService.js\r\n\r\n/**\r\n * Service for handling mobile platform (iOS/Android) subscriptions\r\n * without requiring user accounts\r\n */\r\nimport { Platform } from 'react-native';\r\nimport { storageKeys } from '../constants/storageKeys';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nclass MobileSubscriptionService {\r\n  constructor() {\r\n    // We'll initialize the appropriate platform-specific subscription handler\r\n    this.platformHandler = null;\r\n    this.initializePlatformHandler();\r\n  }\r\n\r\n  async initializePlatformHandler() {\r\n    if (Platform.OS === 'ios') {\r\n      // Dynamically import to avoid bundling iOS code on Android\r\n      const { IOSSubscriptionHandler } = await import('./platforms/IOSSubscriptionHandler');\r\n      this.platformHandler = new IOSSubscriptionHandler();\r\n    } else if (Platform.OS === 'android') {\r\n      const { AndroidSubscriptionHandler } = await import('./platforms/AndroidSubscriptionHandler');\r\n      this.platformHandler = new AndroidSubscriptionHandler();\r\n    }\r\n    \r\n    // Initialize once imported\r\n    if (this.platformHandler) {\r\n      await this.platformHandler.initialize();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available subscription products\r\n   */\r\n  async getProducts() {\r\n    if (!this.platformHandler) await this.initializePlatformHandler();\r\n    return await this.platformHandler.getProducts();\r\n  }\r\n\r\n  /**\r\n   * Purchase a subscription and store the receipt\r\n   */\r\n  async purchaseSubscription(productId) {\r\n    if (!this.platformHandler) await this.initializePlatformHandler();\r\n    \r\n    try {\r\n      const purchaseResult = await this.platformHandler.purchaseSubscription(productId);\r\n      \r\n      if (purchaseResult.success) {\r\n        // Store receipt locally for offline verification\r\n        await AsyncStorage.setItem(storageKeys.SUBSCRIPTION_RECEIPT, purchaseResult.receipt);\r\n        await AsyncStorage.setItem(storageKeys.SUBSCRIPTION_PRODUCT_ID, productId);\r\n        \r\n        // Verify the receipt with server when online\r\n        const verificationResult = await this.verifyReceipt(purchaseResult.receipt);\r\n        return { \r\n          success: true, \r\n          verified: verificationResult.verified,\r\n          expiresAt: verificationResult.expiresAt,\r\n          productId \r\n        };\r\n      }\r\n      \r\n      return { success: false, error: purchaseResult.error };\r\n    } catch (error) {\r\n      console.error('Purchase failed:', error);\r\n      return { success: false, error: error.message || 'Purchase failed' };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify subscription status\r\n   */\r\n  async verifySubscription() {\r\n    if (!this.platformHandler) await this.initializePlatformHandler();\r\n    \r\n    try {\r\n      // First try local receipt verification with platform\r\n      const receipt = await AsyncStorage.getItem(storageKeys.SUBSCRIPTION_RECEIPT);\r\n      const productId = await AsyncStorage.getItem(storageKeys.SUBSCRIPTION_PRODUCT_ID);\r\n      \r\n      if (!receipt || !productId) {\r\n        return { isSubscribed: false };\r\n      }\r\n      \r\n      // Using platform's own verification first (works offline)\r\n      const localVerification = await this.platformHandler.verifyReceipt(receipt, productId);\r\n      \r\n      if (localVerification.isValid) {\r\n        // If online, also verify with server for additional security\r\n        try {\r\n          const serverVerification = await this.verifyReceipt(receipt);\r\n          return { \r\n            isSubscribed: serverVerification.verified, \r\n            expiresAt: serverVerification.expiresAt,\r\n            plan: productId\r\n          };\r\n        } catch (e) {\r\n          // If server unreachable, use local verification result\r\n          console.log('Using local verification due to server error:', e);\r\n          return { \r\n            isSubscribed: true, \r\n            expiresAt: localVerification.expiresAt,\r\n            plan: productId,\r\n            isOfflineVerified: true\r\n          };\r\n        }\r\n      }\r\n      \r\n      return { isSubscribed: false };\r\n    } catch (error) {\r\n      console.error('Verification failed:', error);\r\n      return { isSubscribed: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restore previous purchases\r\n   */\r\n  async restorePurchases() {\r\n    if (!this.platformHandler) await this.initializePlatformHandler();\r\n    \r\n    try {\r\n      const restoredPurchases = await this.platformHandler.restorePurchases();\r\n      \r\n      if (restoredPurchases.success && restoredPurchases.purchases.length > 0) {\r\n        // Find the most recent active subscription\r\n        const activeSubscription = restoredPurchases.purchases.find(p => p.isActive);\r\n        \r\n        if (activeSubscription) {\r\n          await AsyncStorage.setItem(storageKeys.SUBSCRIPTION_RECEIPT, activeSubscription.receipt);\r\n          await AsyncStorage.setItem(storageKeys.SUBSCRIPTION_PRODUCT_ID, activeSubscription.productId);\r\n          \r\n          return { \r\n            success: true, \r\n            isSubscribed: true,\r\n            productId: activeSubscription.productId\r\n          };\r\n        }\r\n      }\r\n      \r\n      return { success: restoredPurchases.success, isSubscribed: false };\r\n    } catch (error) {\r\n      console.error('Restore failed:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify receipt with the server\r\n   * This adds an extra layer of security beyond the platform's verification\r\n   */\r\n  async verifyReceipt(receipt) {\r\n    // Make API call to verify receipt with Apple/Google servers\r\n    try {\r\n      const platform = Platform.OS;\r\n      const response = await fetch(`https://yourapi.com/verify-${platform}-receipt`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ receipt })\r\n      });\r\n      \r\n      const result = await response.json();\r\n      return result;\r\n    } catch (error) {\r\n      console.error('Server verification failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n  \r\n  /**\r\n   * Cross-platform: activate subscription with code from web\r\n   * This allows users who purchased on web to unlock mobile features\r\n   */\r\n  async activateWithCode(accessCode) {\r\n    try {\r\n      const response = await fetch('https://yourapi.com/activate-code', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ accessCode, platform: Platform.OS })\r\n      });\r\n      \r\n      const result = await response.json();\r\n      \r\n      if (result.success) {\r\n        // Store \"emulated\" receipt info for this code-based activation\r\n        await AsyncStorage.setItem(storageKeys.SUBSCRIPTION_RECEIPT, result.webReceipt);\r\n        await AsyncStorage.setItem(storageKeys.SUBSCRIPTION_PRODUCT_ID, result.plan);\r\n        await AsyncStorage.setItem(storageKeys.SUBSCRIPTION_SOURCE, 'webCode');\r\n        \r\n        return { \r\n          success: true,\r\n          isSubscribed: true,\r\n          expiresAt: result.expiresAt,\r\n          plan: result.plan\r\n        };\r\n      }\r\n      \r\n      return { success: false, error: result.error || 'Invalid code' };\r\n    } catch (error) {\r\n      console.error('Code activation failed:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n}\r\n\r\nexport default new MobileSubscriptionService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}