{"ast":null,"code":"// src/services/authService.js\n\nclass AuthService {\n  constructor() {\n    this.apiUrl = '/api/auth';\n    this.tokenKey = 'auth_token';\n    this.refreshTokenKey = 'refresh_token';\n    this.userKey = 'user_data';\n  }\n\n  // Register a new user\n  async register(userData) {\n    try {\n      const response = await fetch(`${this.apiUrl}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Registration failed');\n      }\n      const data = await response.json();\n\n      // Store tokens and user data\n      this.setTokens(data.token, data.refreshToken);\n      this.setUser(data.user);\n      return {\n        success: true,\n        user: data.user\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Login an existing user\n  async login(credentials) {\n    try {\n      const response = await fetch(`${this.apiUrl}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Login failed');\n      }\n      const data = await response.json();\n\n      // Store tokens and user data\n      this.setTokens(data.token, data.refreshToken);\n      this.setUser(data.user);\n      return {\n        success: true,\n        user: data.user\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Logout the current user\n  logout() {\n    // Clear all auth data from storage\n    localStorage.removeItem(this.tokenKey);\n    localStorage.removeItem(this.refreshTokenKey);\n    localStorage.removeItem(this.userKey);\n\n    // Optionally notify the server\n    fetch(`${this.apiUrl}/logout`, {\n      method: 'POST',\n      headers: this.getAuthHeaders()\n    }).catch(error => {\n      console.error('Logout notification error:', error);\n    });\n    return {\n      success: true\n    };\n  }\n\n  // Check if the user is authenticated\n  isAuthenticated() {\n    const token = this.getToken();\n    return !!token;\n  }\n\n  // Get the current user\n  getUser() {\n    const userJson = localStorage.getItem(this.userKey);\n    if (!userJson) return null;\n    try {\n      return JSON.parse(userJson);\n    } catch (error) {\n      console.error('Error parsing user data:', error);\n      return null;\n    }\n  }\n\n  // Store user data\n  setUser(user) {\n    localStorage.setItem(this.userKey, JSON.stringify(user));\n  }\n\n  // Get the auth token\n  getToken() {\n    return localStorage.getItem(this.tokenKey);\n  }\n\n  // Get auth headers for API requests\n  getAuthHeaders() {\n    const token = this.getToken();\n    return {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    };\n  }\n\n  // Store tokens\n  setTokens(token, refreshToken) {\n    localStorage.setItem(this.tokenKey, token);\n    localStorage.setItem(this.refreshTokenKey, refreshToken);\n  }\n\n  // Refresh the auth token\n  async refreshToken() {\n    const refreshToken = localStorage.getItem(this.refreshTokenKey);\n    if (!refreshToken) {\n      return {\n        success: false,\n        error: 'No refresh token available'\n      };\n    }\n    try {\n      const response = await fetch(`${this.apiUrl}/refresh-token`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refreshToken\n        })\n      });\n      if (!response.ok) {\n        // If refresh fails, logout\n        this.logout();\n        throw new Error('Token refresh failed');\n      }\n      const data = await response.json();\n\n      // Update stored token\n      localStorage.setItem(this.tokenKey, data.token);\n      return {\n        success: true,\n        token: data.token\n      };\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      this.logout();\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Update user profile\n  async updateProfile(userData) {\n    try {\n      const response = await fetch(`${this.apiUrl}/profile`, {\n        method: 'PUT',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify(userData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Profile update failed');\n      }\n      const data = await response.json();\n\n      // Update stored user data\n      this.setUser(data.user);\n      return {\n        success: true,\n        user: data.user\n      };\n    } catch (error) {\n      console.error('Profile update error:', error);\n\n      // Handle unauthorized errors\n      if (error.message.includes('unauthorized') || error.message.includes('token')) {\n        const refreshResult = await this.refreshToken();\n        if (refreshResult.success) {\n          // Retry the update with new token\n          return this.updateProfile(userData);\n        }\n      }\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Change password\n  async changePassword(passwordData) {\n    try {\n      const response = await fetch(`${this.apiUrl}/change-password`, {\n        method: 'POST',\n        headers: this.getAuthHeaders(),\n        body: JSON.stringify(passwordData)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Password change failed');\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Password change error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Request password reset\n  async requestPasswordReset(email) {\n    try {\n      const response = await fetch(`${this.apiUrl}/reset-password`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Password reset request failed');\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Password reset request error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Complete password reset\n  async resetPassword(token, newPassword) {\n    try {\n      const response = await fetch(`${this.apiUrl}/reset-password/${token}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          password: newPassword\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Password reset failed');\n      }\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Password reset error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // Create an API client that automatically handles token refresh\n  createApiClient() {\n    return {\n      get: async url => this.makeRequest('GET', url),\n      post: async (url, data) => this.makeRequest('POST', url, data),\n      put: async (url, data) => this.makeRequest('PUT', url, data),\n      delete: async url => this.makeRequest('DELETE', url)\n    };\n  }\n\n  // Make authenticated API requests with token refresh\n  async makeRequest(method, url, data = null) {\n    try {\n      const options = {\n        method,\n        headers: this.getAuthHeaders()\n      };\n      if (data) {\n        options.body = JSON.stringify(data);\n      }\n      let response = await fetch(url, options);\n\n      // Handle unauthorized error (expired token)\n      if (response.status === 401) {\n        const refreshResult = await this.refreshToken();\n        if (refreshResult.success) {\n          // Retry with new token\n          options.headers = this.getAuthHeaders();\n          response = await fetch(url, options);\n        } else {\n          throw new Error('Session expired. Please login again.');\n        }\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Request failed');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('API request error:', error);\n      throw error;\n    }\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["AuthService","constructor","apiUrl","tokenKey","refreshTokenKey","userKey","register","userData","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","message","data","setTokens","token","refreshToken","setUser","user","success","error","console","login","credentials","logout","localStorage","removeItem","getAuthHeaders","catch","isAuthenticated","getToken","getUser","userJson","getItem","parse","setItem","updateProfile","includes","refreshResult","changePassword","passwordData","requestPasswordReset","email","resetPassword","newPassword","password","createApiClient","get","url","makeRequest","post","put","delete","options","status"],"sources":["C:/Users/juliu/Desktop/web/src/services/authService.js"],"sourcesContent":["// src/services/authService.js\r\n\r\nclass AuthService {\r\n    constructor() {\r\n      this.apiUrl = '/api/auth';\r\n      this.tokenKey = 'auth_token';\r\n      this.refreshTokenKey = 'refresh_token';\r\n      this.userKey = 'user_data';\r\n    }\r\n    \r\n    // Register a new user\r\n    async register(userData) {\r\n      try {\r\n        const response = await fetch(`${this.apiUrl}/register`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(userData)\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || 'Registration failed');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        \r\n        // Store tokens and user data\r\n        this.setTokens(data.token, data.refreshToken);\r\n        this.setUser(data.user);\r\n        \r\n        return { success: true, user: data.user };\r\n      } catch (error) {\r\n        console.error('Registration error:', error);\r\n        return { success: false, error: error.message };\r\n      }\r\n    }\r\n    \r\n    // Login an existing user\r\n    async login(credentials) {\r\n      try {\r\n        const response = await fetch(`${this.apiUrl}/login`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(credentials)\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || 'Login failed');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        \r\n        // Store tokens and user data\r\n        this.setTokens(data.token, data.refreshToken);\r\n        this.setUser(data.user);\r\n        \r\n        return { success: true, user: data.user };\r\n      } catch (error) {\r\n        console.error('Login error:', error);\r\n        return { success: false, error: error.message };\r\n      }\r\n    }\r\n    \r\n    // Logout the current user\r\n    logout() {\r\n      // Clear all auth data from storage\r\n      localStorage.removeItem(this.tokenKey);\r\n      localStorage.removeItem(this.refreshTokenKey);\r\n      localStorage.removeItem(this.userKey);\r\n      \r\n      // Optionally notify the server\r\n      fetch(`${this.apiUrl}/logout`, {\r\n        method: 'POST',\r\n        headers: this.getAuthHeaders()\r\n      }).catch(error => {\r\n        console.error('Logout notification error:', error);\r\n      });\r\n      \r\n      return { success: true };\r\n    }\r\n    \r\n    // Check if the user is authenticated\r\n    isAuthenticated() {\r\n      const token = this.getToken();\r\n      return !!token;\r\n    }\r\n    \r\n    // Get the current user\r\n    getUser() {\r\n      const userJson = localStorage.getItem(this.userKey);\r\n      if (!userJson) return null;\r\n      \r\n      try {\r\n        return JSON.parse(userJson);\r\n      } catch (error) {\r\n        console.error('Error parsing user data:', error);\r\n        return null;\r\n      }\r\n    }\r\n    \r\n    // Store user data\r\n    setUser(user) {\r\n      localStorage.setItem(this.userKey, JSON.stringify(user));\r\n    }\r\n    \r\n    // Get the auth token\r\n    getToken() {\r\n      return localStorage.getItem(this.tokenKey);\r\n    }\r\n    \r\n    // Get auth headers for API requests\r\n    getAuthHeaders() {\r\n      const token = this.getToken();\r\n      return {\r\n        'Authorization': `Bearer ${token}`,\r\n        'Content-Type': 'application/json'\r\n      };\r\n    }\r\n    \r\n    // Store tokens\r\n    setTokens(token, refreshToken) {\r\n      localStorage.setItem(this.tokenKey, token);\r\n      localStorage.setItem(this.refreshTokenKey, refreshToken);\r\n    }\r\n    \r\n    // Refresh the auth token\r\n    async refreshToken() {\r\n      const refreshToken = localStorage.getItem(this.refreshTokenKey);\r\n      \r\n      if (!refreshToken) {\r\n        return { success: false, error: 'No refresh token available' };\r\n      }\r\n      \r\n      try {\r\n        const response = await fetch(`${this.apiUrl}/refresh-token`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ refreshToken })\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          // If refresh fails, logout\r\n          this.logout();\r\n          throw new Error('Token refresh failed');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        \r\n        // Update stored token\r\n        localStorage.setItem(this.tokenKey, data.token);\r\n        \r\n        return { success: true, token: data.token };\r\n      } catch (error) {\r\n        console.error('Token refresh error:', error);\r\n        this.logout();\r\n        return { success: false, error: error.message };\r\n      }\r\n    }\r\n    \r\n    // Update user profile\r\n    async updateProfile(userData) {\r\n      try {\r\n        const response = await fetch(`${this.apiUrl}/profile`, {\r\n          method: 'PUT',\r\n          headers: this.getAuthHeaders(),\r\n          body: JSON.stringify(userData)\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || 'Profile update failed');\r\n        }\r\n        \r\n        const data = await response.json();\r\n        \r\n        // Update stored user data\r\n        this.setUser(data.user);\r\n        \r\n        return { success: true, user: data.user };\r\n      } catch (error) {\r\n        console.error('Profile update error:', error);\r\n        \r\n        // Handle unauthorized errors\r\n        if (error.message.includes('unauthorized') || error.message.includes('token')) {\r\n          const refreshResult = await this.refreshToken();\r\n          \r\n          if (refreshResult.success) {\r\n            // Retry the update with new token\r\n            return this.updateProfile(userData);\r\n          }\r\n        }\r\n        \r\n        return { success: false, error: error.message };\r\n      }\r\n    }\r\n    \r\n    // Change password\r\n    async changePassword(passwordData) {\r\n      try {\r\n        const response = await fetch(`${this.apiUrl}/change-password`, {\r\n          method: 'POST',\r\n          headers: this.getAuthHeaders(),\r\n          body: JSON.stringify(passwordData)\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || 'Password change failed');\r\n        }\r\n        \r\n        return { success: true };\r\n      } catch (error) {\r\n        console.error('Password change error:', error);\r\n        return { success: false, error: error.message };\r\n      }\r\n    }\r\n    \r\n    // Request password reset\r\n    async requestPasswordReset(email) {\r\n      try {\r\n        const response = await fetch(`${this.apiUrl}/reset-password`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ email })\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || 'Password reset request failed');\r\n        }\r\n        \r\n        return { success: true };\r\n      } catch (error) {\r\n        console.error('Password reset request error:', error);\r\n        return { success: false, error: error.message };\r\n      }\r\n    }\r\n    \r\n    // Complete password reset\r\n    async resetPassword(token, newPassword) {\r\n      try {\r\n        const response = await fetch(`${this.apiUrl}/reset-password/${token}`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ password: newPassword })\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || 'Password reset failed');\r\n        }\r\n        \r\n        return { success: true };\r\n      } catch (error) {\r\n        console.error('Password reset error:', error);\r\n        return { success: false, error: error.message };\r\n      }\r\n    }\r\n    \r\n    // Create an API client that automatically handles token refresh\r\n    createApiClient() {\r\n      return {\r\n        get: async (url) => this.makeRequest('GET', url),\r\n        post: async (url, data) => this.makeRequest('POST', url, data),\r\n        put: async (url, data) => this.makeRequest('PUT', url, data),\r\n        delete: async (url) => this.makeRequest('DELETE', url)\r\n      };\r\n    }\r\n    \r\n    // Make authenticated API requests with token refresh\r\n    async makeRequest(method, url, data = null) {\r\n      try {\r\n        const options = {\r\n          method,\r\n          headers: this.getAuthHeaders()\r\n        };\r\n        \r\n        if (data) {\r\n          options.body = JSON.stringify(data);\r\n        }\r\n        \r\n        let response = await fetch(url, options);\r\n        \r\n        // Handle unauthorized error (expired token)\r\n        if (response.status === 401) {\r\n          const refreshResult = await this.refreshToken();\r\n          \r\n          if (refreshResult.success) {\r\n            // Retry with new token\r\n            options.headers = this.getAuthHeaders();\r\n            response = await fetch(url, options);\r\n          } else {\r\n            throw new Error('Session expired. Please login again.');\r\n          }\r\n        }\r\n        \r\n        if (!response.ok) {\r\n          const errorData = await response.json();\r\n          throw new Error(errorData.message || 'Request failed');\r\n        }\r\n        \r\n        return await response.json();\r\n      } catch (error) {\r\n        console.error('API request error:', error);\r\n        throw error;\r\n      }\r\n    }\r\n  }\r\n  \r\n  export default new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}