{"ast":null,"code":"// Simple mock services that return placeholder data\n// This helps fix import errors without requiring actual API integration\n\n// Mock function for geocoding\nexport const geocodeLocation = async locationName => {\n  return {\n    lat: 40.7128,\n    // Default to New York coordinates\n    lon: -74.0060,\n    name: locationName.split(',')[0],\n    country: 'US'\n  };\n};\n\n// Mock function for reverse geocoding\nexport const reverseGeocode = async (lat, lon) => {\n  return {\n    name: 'Current Location',\n    country: 'United States'\n  };\n};\n\n// Mock function for weather forecasts\nexport const getWeatherForecast = async (lat, lon) => {\n  // Return a mock weather forecast object\n  return {\n    city: {\n      name: `Location at ${lat.toFixed(2)}, ${lon.toFixed(2)}`,\n      coord: {\n        lat,\n        lon\n      }\n    },\n    current_weather: {\n      temperature: 22,\n      windspeed: 10,\n      weathercode: 0,\n      weather: [{\n        main: 'Clear',\n        description: 'clear sky',\n        icon: '01d'\n      }]\n    },\n    daily: {\n      time: Array(5).fill(0).map((_, i) => new Date(Date.now() + i * 86400000).toISOString().split('T')[0]),\n      weathercode: [0, 1, 2, 0, 1],\n      temperature_2m_max: [24, 25, 23, 22, 26],\n      temperature_2m_min: [18, 19, 17, 16, 20],\n      precipitation_sum: [0, 0, 2, 0, 0],\n      precipitation_hours: [0, 0, 3, 0, 0]\n    },\n    list: Array(5).fill(0).map((_, i) => ({\n      dt: Date.now() / 1000 + i * 86400,\n      dt_txt: new Date(Date.now() + i * 86400000).toISOString().split('T')[0],\n      main: {\n        temp: 22,\n        temp_min: 18,\n        temp_max: 25,\n        humidity: 70\n      },\n      weather: [{\n        main: 'Clear',\n        description: 'clear sky',\n        icon: '01d'\n      }]\n    }))\n  };\n};\n\n// Mock function for country information\nexport const getCountryInfo = async countryCode => {\n  return [{\n    name: {\n      common: 'United States'\n    },\n    currencies: {\n      USD: {\n        name: 'US Dollar',\n        symbol: '$'\n      }\n    },\n    languages: {\n      eng: 'English'\n    },\n    capital: ['Washington D.C.'],\n    population: 331000000,\n    timezones: ['UTC-05:00'],\n    car: {\n      side: 'right'\n    },\n    flags: {\n      png: 'https://example.com/flag.png'\n    }\n  }];\n};\n\n// Mock function for currency rates\nexport const getCurrencyRates = async baseCurrency => {\n  return {\n    rates: {\n      USD: 1,\n      EUR: 0.93,\n      GBP: 0.81,\n      JPY: 150.2,\n      CAD: 1.36\n    }\n  };\n};\n\n// Mock function for travel advisories\nexport const getTravelAdvisory = async countryCode => {\n  return {\n    data: {\n      [countryCode]: {\n        score: 2,\n        message: 'Exercise increased caution'\n      }\n    }\n  };\n};\n\n// Mock function for complete destination information\nexport const getCompleteDestinationInfo = async locationName => {\n  return {\n    name: locationName.split(',')[0],\n    country: 'United States',\n    coordinates: {\n      lat: 40.7128,\n      lon: -74.0060\n    },\n    weather: await getWeatherForecast(40.7128, -74.0060),\n    language: 'English',\n    currency: {\n      code: 'USD',\n      name: 'US Dollar',\n      symbol: '$',\n      rates: {\n        USD: 1,\n        EUR: 0.93,\n        GBP: 0.81\n      }\n    },\n    emergency: {\n      police: '911',\n      ambulance: '911'\n    },\n    travelAdvisory: {\n      score: 2,\n      message: 'Exercise increased caution'\n    },\n    flag: 'https://example.com/flag.png',\n    capital: 'Washington D.C.',\n    population: 331000000,\n    timezone: 'UTC-05:00',\n    drivingSide: 'right',\n    mapLink: `https://www.google.com/maps/place/${encodeURIComponent(locationName)}`\n  };\n};","map":{"version":3,"names":["geocodeLocation","locationName","lat","lon","name","split","country","reverseGeocode","getWeatherForecast","city","toFixed","coord","current_weather","temperature","windspeed","weathercode","weather","main","description","icon","daily","time","Array","fill","map","_","i","Date","now","toISOString","temperature_2m_max","temperature_2m_min","precipitation_sum","precipitation_hours","list","dt","dt_txt","temp","temp_min","temp_max","humidity","getCountryInfo","countryCode","common","currencies","USD","symbol","languages","eng","capital","population","timezones","car","side","flags","png","getCurrencyRates","baseCurrency","rates","EUR","GBP","JPY","CAD","getTravelAdvisory","data","score","message","getCompleteDestinationInfo","coordinates","language","currency","code","emergency","police","ambulance","travelAdvisory","flag","timezone","drivingSide","mapLink","encodeURIComponent"],"sources":["C:/Users/juliu/Desktop/web/src/services/index.js"],"sourcesContent":["// Simple mock services that return placeholder data\r\n// This helps fix import errors without requiring actual API integration\r\n\r\n// Mock function for geocoding\r\nexport const geocodeLocation = async (locationName) => {\r\n    return {\r\n      lat: 40.7128,  // Default to New York coordinates\r\n      lon: -74.0060,\r\n      name: locationName.split(',')[0],\r\n      country: 'US'\r\n    };\r\n  };\r\n  \r\n  // Mock function for reverse geocoding\r\n  export const reverseGeocode = async (lat, lon) => {\r\n    return {\r\n      name: 'Current Location',\r\n      country: 'United States'\r\n    };\r\n  };\r\n  \r\n  // Mock function for weather forecasts\r\n  export const getWeatherForecast = async (lat, lon) => {\r\n    // Return a mock weather forecast object\r\n    return {\r\n      city: {\r\n        name: `Location at ${lat.toFixed(2)}, ${lon.toFixed(2)}`,\r\n        coord: { lat, lon }\r\n      },\r\n      current_weather: {\r\n        temperature: 22,\r\n        windspeed: 10,\r\n        weathercode: 0,\r\n        weather: [{ main: 'Clear', description: 'clear sky', icon: '01d' }]\r\n      },\r\n      daily: {\r\n        time: Array(5).fill(0).map((_, i) => new Date(Date.now() + i * 86400000).toISOString().split('T')[0]),\r\n        weathercode: [0, 1, 2, 0, 1],\r\n        temperature_2m_max: [24, 25, 23, 22, 26],\r\n        temperature_2m_min: [18, 19, 17, 16, 20],\r\n        precipitation_sum: [0, 0, 2, 0, 0],\r\n        precipitation_hours: [0, 0, 3, 0, 0]\r\n      },\r\n      list: Array(5).fill(0).map((_, i) => ({\r\n        dt: Date.now() / 1000 + i * 86400,\r\n        dt_txt: new Date(Date.now() + i * 86400000).toISOString().split('T')[0],\r\n        main: {\r\n          temp: 22,\r\n          temp_min: 18,\r\n          temp_max: 25,\r\n          humidity: 70\r\n        },\r\n        weather: [{ main: 'Clear', description: 'clear sky', icon: '01d' }]\r\n      }))\r\n    };\r\n  };\r\n  \r\n  // Mock function for country information\r\n  export const getCountryInfo = async (countryCode) => {\r\n    return [{\r\n      name: { common: 'United States' },\r\n      currencies: { USD: { name: 'US Dollar', symbol: '$' } },\r\n      languages: { eng: 'English' },\r\n      capital: ['Washington D.C.'],\r\n      population: 331000000,\r\n      timezones: ['UTC-05:00'],\r\n      car: { side: 'right' },\r\n      flags: { png: 'https://example.com/flag.png' }\r\n    }];\r\n  };\r\n  \r\n  // Mock function for currency rates\r\n  export const getCurrencyRates = async (baseCurrency) => {\r\n    return {\r\n      rates: {\r\n        USD: 1,\r\n        EUR: 0.93,\r\n        GBP: 0.81,\r\n        JPY: 150.2,\r\n        CAD: 1.36\r\n      }\r\n    };\r\n  };\r\n  \r\n  // Mock function for travel advisories\r\n  export const getTravelAdvisory = async (countryCode) => {\r\n    return {\r\n      data: {\r\n        [countryCode]: { score: 2, message: 'Exercise increased caution' }\r\n      }\r\n    };\r\n  };\r\n  \r\n  // Mock function for complete destination information\r\n  export const getCompleteDestinationInfo = async (locationName) => {\r\n    return {\r\n      name: locationName.split(',')[0],\r\n      country: 'United States',\r\n      coordinates: { lat: 40.7128, lon: -74.0060 },\r\n      weather: await getWeatherForecast(40.7128, -74.0060),\r\n      language: 'English',\r\n      currency: {\r\n        code: 'USD',\r\n        name: 'US Dollar',\r\n        symbol: '$',\r\n        rates: { USD: 1, EUR: 0.93, GBP: 0.81 }\r\n      },\r\n      emergency: { police: '911', ambulance: '911' },\r\n      travelAdvisory: { score: 2, message: 'Exercise increased caution' },\r\n      flag: 'https://example.com/flag.png',\r\n      capital: 'Washington D.C.',\r\n      population: 331000000,\r\n      timezone: 'UTC-05:00',\r\n      drivingSide: 'right',\r\n      mapLink: `https://www.google.com/maps/place/${encodeURIComponent(locationName)}`\r\n    };\r\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}