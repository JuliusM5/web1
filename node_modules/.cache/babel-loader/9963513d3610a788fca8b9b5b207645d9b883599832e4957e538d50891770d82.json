{"ast":null,"code":"// src/utils/errorMonitoring.js\n// Browser-compatible error monitoring\n// You'll need to install: npm install @sentry/browser\n\nimport * as Sentry from '@sentry/browser';\nimport { BrowserTracing } from '@sentry/tracing';\nconst errorLog = [];\nconst MAX_ERRORS = 100;\nconst initErrorMonitoring = () => {\n  // Set up global error handler\n  window.addEventListener('error', event => {\n    captureError(event.error || new Error(event.message));\n  });\n\n  // Handle unhandled promise rejections\n  window.addEventListener('unhandledrejection', event => {\n    captureError(event.reason || new Error('Unhandled promise rejection'));\n  });\n  console.log('Error monitoring initialized');\n};\nexport const captureError = (error, extraInfo = {}) => {\n  console.error('Error captured:', error, extraInfo);\n\n  // Store error in the log\n  errorLog.unshift({\n    message: error.message,\n    stack: error.stack,\n    timestamp: new Date().toISOString(),\n    extra: extraInfo\n  });\n\n  // Keep the log size manageable\n  if (errorLog.length > MAX_ERRORS) {\n    errorLog.pop();\n  }\n};\nexport const setErrorUser = user => {\n  // Simplified version that just logs the user\n  if (user) {\n    try {\n      localStorage.setItem('error_user', JSON.stringify({\n        id: user.id,\n        subscription: user.hasSubscription ? 'active' : 'inactive'\n      }));\n    } catch (e) {\n      // Ignore storage errors\n    }\n  }\n};\nexport const clearErrorUser = () => {\n  try {\n    localStorage.removeItem('error_user');\n  } catch (e) {\n    // Ignore storage errors\n  }\n};\n\n// For debugging - allows viewing recent errors\nexport const getErrorLog = () => [...errorLog];\nexport default initErrorMonitoring;","map":{"version":3,"names":["Sentry","BrowserTracing","errorLog","MAX_ERRORS","initErrorMonitoring","window","addEventListener","event","captureError","error","Error","message","reason","console","log","extraInfo","unshift","stack","timestamp","Date","toISOString","extra","length","pop","setErrorUser","user","localStorage","setItem","JSON","stringify","id","subscription","hasSubscription","e","clearErrorUser","removeItem","getErrorLog"],"sources":["C:/Users/juliu/Desktop/web/src/utils/errorMonitoring.js"],"sourcesContent":["// src/utils/errorMonitoring.js\r\n// Browser-compatible error monitoring\r\n// You'll need to install: npm install @sentry/browser\r\n\r\nimport * as Sentry from '@sentry/browser';\r\nimport { BrowserTracing } from '@sentry/tracing';\r\n\r\nconst errorLog = [];\r\nconst MAX_ERRORS = 100;\r\n\r\nconst initErrorMonitoring = () => {\r\n  // Set up global error handler\r\n  window.addEventListener('error', (event) => {\r\n    captureError(event.error || new Error(event.message));\r\n  });\r\n  \r\n  // Handle unhandled promise rejections\r\n  window.addEventListener('unhandledrejection', (event) => {\r\n    captureError(event.reason || new Error('Unhandled promise rejection'));\r\n  });\r\n  \r\n  console.log('Error monitoring initialized');\r\n};\r\n\r\nexport const captureError = (error, extraInfo = {}) => {\r\n  console.error('Error captured:', error, extraInfo);\r\n  \r\n  // Store error in the log\r\n  errorLog.unshift({\r\n    message: error.message,\r\n    stack: error.stack,\r\n    timestamp: new Date().toISOString(),\r\n    extra: extraInfo\r\n  });\r\n  \r\n  // Keep the log size manageable\r\n  if (errorLog.length > MAX_ERRORS) {\r\n    errorLog.pop();\r\n  }\r\n};\r\n\r\nexport const setErrorUser = (user) => {\r\n  // Simplified version that just logs the user\r\n  if (user) {\r\n    try {\r\n      localStorage.setItem('error_user', JSON.stringify({\r\n        id: user.id,\r\n        subscription: user.hasSubscription ? 'active' : 'inactive'\r\n      }));\r\n    } catch (e) {\r\n      // Ignore storage errors\r\n    }\r\n  }\r\n};\r\n\r\nexport const clearErrorUser = () => {\r\n  try {\r\n    localStorage.removeItem('error_user');\r\n  } catch (e) {\r\n    // Ignore storage errors\r\n  }\r\n};\r\n\r\n// For debugging - allows viewing recent errors\r\nexport const getErrorLog = () => [...errorLog];\r\n\r\nexport default initErrorMonitoring;"],"mappings":"AAAA;AACA;AACA;;AAEA,OAAO,KAAKA,MAAM,MAAM,iBAAiB;AACzC,SAASC,cAAc,QAAQ,iBAAiB;AAEhD,MAAMC,QAAQ,GAAG,EAAE;AACnB,MAAMC,UAAU,GAAG,GAAG;AAEtB,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAChC;EACAC,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAGC,KAAK,IAAK;IAC1CC,YAAY,CAACD,KAAK,CAACE,KAAK,IAAI,IAAIC,KAAK,CAACH,KAAK,CAACI,OAAO,CAAC,CAAC;EACvD,CAAC,CAAC;;EAEF;EACAN,MAAM,CAACC,gBAAgB,CAAC,oBAAoB,EAAGC,KAAK,IAAK;IACvDC,YAAY,CAACD,KAAK,CAACK,MAAM,IAAI,IAAIF,KAAK,CAAC,6BAA6B,CAAC,CAAC;EACxE,CAAC,CAAC;EAEFG,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC;AAC7C,CAAC;AAED,OAAO,MAAMN,YAAY,GAAGA,CAACC,KAAK,EAAEM,SAAS,GAAG,CAAC,CAAC,KAAK;EACrDF,OAAO,CAACJ,KAAK,CAAC,iBAAiB,EAAEA,KAAK,EAAEM,SAAS,CAAC;;EAElD;EACAb,QAAQ,CAACc,OAAO,CAAC;IACfL,OAAO,EAAEF,KAAK,CAACE,OAAO;IACtBM,KAAK,EAAER,KAAK,CAACQ,KAAK;IAClBC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACnCC,KAAK,EAAEN;EACT,CAAC,CAAC;;EAEF;EACA,IAAIb,QAAQ,CAACoB,MAAM,GAAGnB,UAAU,EAAE;IAChCD,QAAQ,CAACqB,GAAG,CAAC,CAAC;EAChB;AACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAIC,IAAI,IAAK;EACpC;EACA,IAAIA,IAAI,EAAE;IACR,IAAI;MACFC,YAAY,CAACC,OAAO,CAAC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAAC;QAChDC,EAAE,EAAEL,IAAI,CAACK,EAAE;QACXC,YAAY,EAAEN,IAAI,CAACO,eAAe,GAAG,QAAQ,GAAG;MAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,OAAOC,CAAC,EAAE;MACV;IAAA;EAEJ;AACF,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAClC,IAAI;IACFR,YAAY,CAACS,UAAU,CAAC,YAAY,CAAC;EACvC,CAAC,CAAC,OAAOF,CAAC,EAAE;IACV;EAAA;AAEJ,CAAC;;AAED;AACA,OAAO,MAAMG,WAAW,GAAGA,CAAA,KAAM,CAAC,GAAGlC,QAAQ,CAAC;AAE9C,eAAeE,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}