{"ast":null,"code":"// src/models/TokenizedSubscription.js\n\n/**\r\n * Client-side utility for handling subscription tokens\r\n */\nclass TokenizedSubscription {\n  /**\r\n   * Generate a secure random token\r\n   * @returns {string} Generated token\r\n   */\n  static generateToken() {\n    // Create a more secure token\n    const randomBytes = new Uint8Array(24);\n    window.crypto.getRandomValues(randomBytes);\n    return Array.from(randomBytes).map(b => b.toString(16).padStart(2, '0')).join('') + Date.now().toString(36);\n  }\n\n  /**\r\n   * Generate a mobile access code\r\n   * @returns {string} Formatted mobile code (XXXX-XXXX-XXXX)\r\n   */\n  static generateMobileAccessCode() {\n    // Create readable code in XXXX-XXXX-XXXX format\n    const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789'; // Omit similar-looking characters\n    let code = '';\n\n    // Generate random values\n    const randomBytes = new Uint8Array(12);\n    window.crypto.getRandomValues(randomBytes);\n\n    // Generate 12 characters\n    for (let i = 0; i < 12; i++) {\n      const randomIndex = randomBytes[i] % chars.length;\n      code += chars[randomIndex];\n\n      // Add dashes after every 4 characters (except at the end)\n      if ((i + 1) % 4 === 0 && i < 11) {\n        code += '-';\n      }\n    }\n    return code;\n  }\n\n  /**\r\n   * Store subscription details securely\r\n   * @param {string} token - Access token\r\n   * @param {string} plan - Subscription plan\r\n   * @param {Date} expiryDate - Expiration date\r\n   * @returns {Object} Stored subscription info\r\n   */\n  static storeSubscription(token, plan, expiryDate) {\n    localStorage.setItem('subscription_token', token);\n    localStorage.setItem('subscription_expiry', expiryDate.toISOString());\n    localStorage.setItem('subscription_plan', plan);\n    return {\n      token,\n      plan,\n      expiresAt: expiryDate.toISOString()\n    };\n  }\n\n  /**\r\n   * Verify a subscription token\r\n   * @param {string} token - Token to verify\r\n   * @returns {Object} Verification result\r\n   */\n  static async verifyToken(token) {\n    if (!token) return {\n      valid: false\n    };\n    try {\n      // In a production app, this would call an API endpoint\n      // For development, we'll check localStorage directly\n\n      const storedToken = localStorage.getItem('subscription_token');\n      const expiryDate = localStorage.getItem('subscription_expiry');\n      const plan = localStorage.getItem('subscription_plan');\n      if (token !== storedToken) return {\n        valid: false\n      };\n\n      // Check if token is expired\n      const isExpired = expiryDate && new Date(expiryDate) <= new Date();\n      if (isExpired) return {\n        valid: false,\n        reason: 'expired'\n      };\n      return {\n        valid: true,\n        plan,\n        expiresAt: expiryDate\n      };\n    } catch (error) {\n      console.error('Token verification failed:', error);\n      return {\n        valid: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\r\n   * Verify a mobile access code\r\n   * @param {string} code - Mobile access code to verify\r\n   * @returns {Object} Verification result\r\n   */\n  static async verifyMobileCode(code) {\n    try {\n      // Validate code format first\n      if (!code || !/^[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}$/.test(code)) {\n        return {\n          valid: false,\n          error: 'Invalid code format'\n        };\n      }\n\n      // In a production app, this would call an API endpoint\n      // For development, we'll simulate a successful verification\n\n      // Generate a fake token that would be returned by the server\n      const accessToken = TokenizedSubscription.generateToken();\n\n      // Set an expiry date (30 days from now for this example)\n      const expiryDate = new Date();\n      expiryDate.setDate(expiryDate.getDate() + 30);\n      return {\n        valid: true,\n        accessToken,\n        plan: 'monthly_premium',\n        // Assume monthly plan\n        expiresAt: expiryDate.toISOString()\n      };\n    } catch (error) {\n      console.error('Code verification failed:', error);\n      return {\n        valid: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\r\n   * Clear subscription data from storage\r\n   */\n  static clearSubscription() {\n    localStorage.removeItem('subscription_token');\n    localStorage.removeItem('subscription_expiry');\n    localStorage.removeItem('subscription_plan');\n  }\n}\nexport default TokenizedSubscription;","map":{"version":3,"names":["TokenizedSubscription","generateToken","randomBytes","Uint8Array","window","crypto","getRandomValues","Array","from","map","b","toString","padStart","join","Date","now","generateMobileAccessCode","chars","code","i","randomIndex","length","storeSubscription","token","plan","expiryDate","localStorage","setItem","toISOString","expiresAt","verifyToken","valid","storedToken","getItem","isExpired","reason","error","console","message","verifyMobileCode","test","accessToken","setDate","getDate","clearSubscription","removeItem"],"sources":["C:/Users/juliu/Desktop/web/src/models/TokenizedSubscription.js"],"sourcesContent":["// src/models/TokenizedSubscription.js\r\n\r\n/**\r\n * Client-side utility for handling subscription tokens\r\n */\r\nclass TokenizedSubscription {\r\n  /**\r\n   * Generate a secure random token\r\n   * @returns {string} Generated token\r\n   */\r\n  static generateToken() {\r\n    // Create a more secure token\r\n    const randomBytes = new Uint8Array(24);\r\n    window.crypto.getRandomValues(randomBytes);\r\n    \r\n    return Array.from(randomBytes)\r\n      .map(b => b.toString(16).padStart(2, '0'))\r\n      .join('') + Date.now().toString(36);\r\n  }\r\n\r\n  /**\r\n   * Generate a mobile access code\r\n   * @returns {string} Formatted mobile code (XXXX-XXXX-XXXX)\r\n   */\r\n  static generateMobileAccessCode() {\r\n    // Create readable code in XXXX-XXXX-XXXX format\r\n    const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789'; // Omit similar-looking characters\r\n    let code = '';\r\n    \r\n    // Generate random values\r\n    const randomBytes = new Uint8Array(12);\r\n    window.crypto.getRandomValues(randomBytes);\r\n    \r\n    // Generate 12 characters\r\n    for (let i = 0; i < 12; i++) {\r\n      const randomIndex = randomBytes[i] % chars.length;\r\n      code += chars[randomIndex];\r\n      \r\n      // Add dashes after every 4 characters (except at the end)\r\n      if ((i + 1) % 4 === 0 && i < 11) {\r\n        code += '-';\r\n      }\r\n    }\r\n    \r\n    return code;\r\n  }\r\n\r\n  /**\r\n   * Store subscription details securely\r\n   * @param {string} token - Access token\r\n   * @param {string} plan - Subscription plan\r\n   * @param {Date} expiryDate - Expiration date\r\n   * @returns {Object} Stored subscription info\r\n   */\r\n  static storeSubscription(token, plan, expiryDate) {\r\n    localStorage.setItem('subscription_token', token);\r\n    localStorage.setItem('subscription_expiry', expiryDate.toISOString());\r\n    localStorage.setItem('subscription_plan', plan);\r\n    \r\n    return {\r\n      token,\r\n      plan,\r\n      expiresAt: expiryDate.toISOString()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Verify a subscription token\r\n   * @param {string} token - Token to verify\r\n   * @returns {Object} Verification result\r\n   */\r\n  static async verifyToken(token) {\r\n    if (!token) return { valid: false };\r\n    \r\n    try {\r\n      // In a production app, this would call an API endpoint\r\n      // For development, we'll check localStorage directly\r\n      \r\n      const storedToken = localStorage.getItem('subscription_token');\r\n      const expiryDate = localStorage.getItem('subscription_expiry');\r\n      const plan = localStorage.getItem('subscription_plan');\r\n      \r\n      if (token !== storedToken) return { valid: false };\r\n      \r\n      // Check if token is expired\r\n      const isExpired = expiryDate && new Date(expiryDate) <= new Date();\r\n      if (isExpired) return { valid: false, reason: 'expired' };\r\n      \r\n      return {\r\n        valid: true,\r\n        plan,\r\n        expiresAt: expiryDate\r\n      };\r\n    } catch (error) {\r\n      console.error('Token verification failed:', error);\r\n      return { valid: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify a mobile access code\r\n   * @param {string} code - Mobile access code to verify\r\n   * @returns {Object} Verification result\r\n   */\r\n  static async verifyMobileCode(code) {\r\n    try {\r\n      // Validate code format first\r\n      if (!code || !/^[A-Z0-9]{4}-[A-Z0-9]{4}-[A-Z0-9]{4}$/.test(code)) {\r\n        return { valid: false, error: 'Invalid code format' };\r\n      }\r\n      \r\n      // In a production app, this would call an API endpoint\r\n      // For development, we'll simulate a successful verification\r\n      \r\n      // Generate a fake token that would be returned by the server\r\n      const accessToken = TokenizedSubscription.generateToken();\r\n      \r\n      // Set an expiry date (30 days from now for this example)\r\n      const expiryDate = new Date();\r\n      expiryDate.setDate(expiryDate.getDate() + 30);\r\n      \r\n      return {\r\n        valid: true,\r\n        accessToken,\r\n        plan: 'monthly_premium', // Assume monthly plan\r\n        expiresAt: expiryDate.toISOString()\r\n      };\r\n    } catch (error) {\r\n      console.error('Code verification failed:', error);\r\n      return { valid: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear subscription data from storage\r\n   */\r\n  static clearSubscription() {\r\n    localStorage.removeItem('subscription_token');\r\n    localStorage.removeItem('subscription_expiry');\r\n    localStorage.removeItem('subscription_plan');\r\n  }\r\n}\r\n\r\nexport default TokenizedSubscription;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}