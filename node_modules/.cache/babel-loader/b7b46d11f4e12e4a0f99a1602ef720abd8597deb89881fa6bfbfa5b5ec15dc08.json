{"ast":null,"code":"var _s = $RefreshSig$();\n// src/hooks/useSubscription.js\n\nimport { useContext, useState, useEffect } from 'react';\nimport { SubscriptionContext } from '../context/SubscriptionContext';\nimport { storageKeys } from '../constants/storageKeys';\n\n/**\r\n * Hook for accessing subscription functionality\r\n * Works with the tokenized, accountless subscription system\r\n */\nexport const useSubscription = () => {\n  _s();\n  const context = useContext(SubscriptionContext);\n  if (!context) {\n    throw new Error('useSubscription must be used within a SubscriptionProvider');\n  }\n  return {\n    // Subscription state\n    isSubscribed: context.isSubscribed,\n    isLoading: context.isLoading,\n    plan: context.plan,\n    expiresAt: context.expiresAt,\n    error: context.error,\n    // Subscription actions\n    purchaseSubscription: context.purchaseSubscription,\n    activateTokenFromEmail: context.activateTokenFromEmail,\n    refreshSubscription: context.refreshSubscription,\n    cancelSubscription: context.cancelSubscription,\n    // Helper functions\n    isPremiumFeatureAvailable: featureName => {\n      // If not subscribed, check if it's a free feature\n      if (!context.isSubscribed) {\n        const freeFeatures = ['basic_search', 'limited_alerts'];\n        return freeFeatures.includes(featureName);\n      }\n\n      // If subscribed, check if the feature is available in their plan\n      const featureMap = {\n        monthly_premium: ['premium_deals', 'unlimited_alerts', 'priority_notifications', 'full_search'],\n        yearly_premium: ['premium_deals', 'unlimited_alerts', 'priority_notifications', 'full_search', 'historical_data', 'price_predictions']\n      };\n\n      // Allow access if subscribed and feature exists in their plan\n      return context.plan && featureMap[context.plan] && featureMap[context.plan].includes(featureName);\n    },\n    // Get the days remaining in subscription\n    getDaysRemaining: () => {\n      if (!context.isSubscribed || !context.expiresAt) return 0;\n      const now = new Date();\n      const expiry = new Date(context.expiresAt);\n      const diffTime = expiry - now;\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n      return Math.max(0, diffDays);\n    },\n    // Format expiry date for display\n    getFormattedExpiryDate: () => {\n      if (!context.expiresAt) return 'N/A';\n      const date = new Date(context.expiresAt);\n      return date.toLocaleDateString(undefined, {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n      });\n    }\n  };\n};\n\n/**\r\n * Utility function to check if user is subscribed without using the hook\r\n * Useful in non-React contexts or services\r\n */\n_s(useSubscription, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const isSubscribed = () => {\n  const token = localStorage.getItem(storageKeys.SUBSCRIPTION_TOKEN);\n  if (!token) return false;\n  const expiryDate = localStorage.getItem(storageKeys.SUBSCRIPTION_EXPIRY);\n  if (!expiryDate) return false;\n\n  // Check if token is expired\n  return new Date(expiryDate) > new Date();\n};\nexport default useSubscription;","map":{"version":3,"names":["useContext","useState","useEffect","SubscriptionContext","storageKeys","useSubscription","_s","context","Error","isSubscribed","isLoading","plan","expiresAt","error","purchaseSubscription","activateTokenFromEmail","refreshSubscription","cancelSubscription","isPremiumFeatureAvailable","featureName","freeFeatures","includes","featureMap","monthly_premium","yearly_premium","getDaysRemaining","now","Date","expiry","diffTime","diffDays","Math","ceil","max","getFormattedExpiryDate","date","toLocaleDateString","undefined","year","month","day","token","localStorage","getItem","SUBSCRIPTION_TOKEN","expiryDate","SUBSCRIPTION_EXPIRY"],"sources":["C:/Users/juliu/Desktop/web/src/hooks/useSubscription.js"],"sourcesContent":["// src/hooks/useSubscription.js\r\n\r\nimport { useContext, useState, useEffect } from 'react';\r\nimport { SubscriptionContext } from '../context/SubscriptionContext';\r\nimport { storageKeys } from '../constants/storageKeys';\r\n\r\n/**\r\n * Hook for accessing subscription functionality\r\n * Works with the tokenized, accountless subscription system\r\n */\r\nexport const useSubscription = () => {\r\n  const context = useContext(SubscriptionContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('useSubscription must be used within a SubscriptionProvider');\r\n  }\r\n  \r\n  return {\r\n    // Subscription state\r\n    isSubscribed: context.isSubscribed,\r\n    isLoading: context.isLoading,\r\n    plan: context.plan,\r\n    expiresAt: context.expiresAt,\r\n    error: context.error,\r\n    \r\n    // Subscription actions\r\n    purchaseSubscription: context.purchaseSubscription,\r\n    activateTokenFromEmail: context.activateTokenFromEmail,\r\n    refreshSubscription: context.refreshSubscription,\r\n    cancelSubscription: context.cancelSubscription,\r\n    \r\n    // Helper functions\r\n    isPremiumFeatureAvailable: (featureName) => {\r\n      // If not subscribed, check if it's a free feature\r\n      if (!context.isSubscribed) {\r\n        const freeFeatures = ['basic_search', 'limited_alerts'];\r\n        return freeFeatures.includes(featureName);\r\n      }\r\n      \r\n      // If subscribed, check if the feature is available in their plan\r\n      const featureMap = {\r\n        monthly_premium: [\r\n          'premium_deals',\r\n          'unlimited_alerts',\r\n          'priority_notifications',\r\n          'full_search',\r\n        ],\r\n        yearly_premium: [\r\n          'premium_deals',\r\n          'unlimited_alerts', \r\n          'priority_notifications',\r\n          'full_search',\r\n          'historical_data',\r\n          'price_predictions'\r\n        ]\r\n      };\r\n      \r\n      // Allow access if subscribed and feature exists in their plan\r\n      return context.plan && \r\n             featureMap[context.plan] && \r\n             featureMap[context.plan].includes(featureName);\r\n    },\r\n    \r\n    // Get the days remaining in subscription\r\n    getDaysRemaining: () => {\r\n      if (!context.isSubscribed || !context.expiresAt) return 0;\r\n      \r\n      const now = new Date();\r\n      const expiry = new Date(context.expiresAt);\r\n      const diffTime = expiry - now;\r\n      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\r\n      \r\n      return Math.max(0, diffDays);\r\n    },\r\n    \r\n    // Format expiry date for display\r\n    getFormattedExpiryDate: () => {\r\n      if (!context.expiresAt) return 'N/A';\r\n      \r\n      const date = new Date(context.expiresAt);\r\n      return date.toLocaleDateString(undefined, {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric'\r\n      });\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Utility function to check if user is subscribed without using the hook\r\n * Useful in non-React contexts or services\r\n */\r\nexport const isSubscribed = () => {\r\n  const token = localStorage.getItem(storageKeys.SUBSCRIPTION_TOKEN);\r\n  if (!token) return false;\r\n  \r\n  const expiryDate = localStorage.getItem(storageKeys.SUBSCRIPTION_EXPIRY);\r\n  if (!expiryDate) return false;\r\n  \r\n  // Check if token is expired\r\n  return new Date(expiryDate) > new Date();\r\n};\r\n\r\nexport default useSubscription;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}