{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\context\\\\MobileSubscriptionContext.jsx\",\n  _s = $RefreshSig$();\n// src/context/MobileSubscriptionContext.jsx\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport MobileSubscriptionService from '../services/MobileSubscriptionService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MobileSubscriptionContext = /*#__PURE__*/createContext();\nexport const MobileSubscriptionProvider = ({\n  children\n}) => {\n  _s();\n  const [subscription, setSubscription] = useState({\n    isSubscribed: false,\n    isLoading: true,\n    products: [],\n    plan: null,\n    expiresAt: null\n  });\n  useEffect(() => {\n    // Initial setup - load products and check subscription status\n    const initializeSubscription = async () => {\n      try {\n        // Load available subscription products\n        const products = await MobileSubscriptionService.getProducts();\n\n        // Check existing subscription status\n        const status = await MobileSubscriptionService.verifySubscription();\n        setSubscription({\n          isSubscribed: status.isSubscribed,\n          plan: status.plan,\n          expiresAt: status.expiresAt,\n          products,\n          isLoading: false\n        });\n      } catch (error) {\n        console.error('Subscription initialization failed:', error);\n        setSubscription(prev => ({\n          ...prev,\n          isLoading: false,\n          error: error.message\n        }));\n      }\n    };\n    initializeSubscription();\n  }, []);\n\n  // Purchase a subscription\n  const purchaseSubscription = async productId => {\n    setSubscription(prev => ({\n      ...prev,\n      isProcessing: true\n    }));\n    try {\n      const result = await MobileSubscriptionService.purchaseSubscription(productId);\n      if (result.success) {\n        setSubscription({\n          ...subscription,\n          isSubscribed: true,\n          plan: productId,\n          expiresAt: result.expiresAt,\n          isProcessing: false\n        });\n      } else {\n        setSubscription(prev => ({\n          ...prev,\n          isProcessing: false,\n          error: result.error\n        }));\n      }\n      return result;\n    } catch (error) {\n      setSubscription(prev => ({\n        ...prev,\n        isProcessing: false,\n        error: error.message\n      }));\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Restore previous purchases\n  const restorePurchases = async () => {\n    setSubscription(prev => ({\n      ...prev,\n      isProcessing: true\n    }));\n    try {\n      const result = await MobileSubscriptionService.restorePurchases();\n      if (result.success && result.isSubscribed) {\n        // Verify the restored subscription\n        const status = await MobileSubscriptionService.verifySubscription();\n        setSubscription({\n          ...subscription,\n          isSubscribed: status.isSubscribed,\n          plan: status.plan,\n          expiresAt: status.expiresAt,\n          isProcessing: false,\n          restorationComplete: true\n        });\n      } else {\n        setSubscription(prev => ({\n          ...prev,\n          isProcessing: false,\n          restorationComplete: true,\n          error: result.error\n        }));\n      }\n      return result;\n    } catch (error) {\n      setSubscription(prev => ({\n        ...prev,\n        isProcessing: false,\n        restorationComplete: true,\n        error: error.message\n      }));\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Activate with code (cross-platform support)\n  const activateWithCode = async accessCode => {\n    setSubscription(prev => ({\n      ...prev,\n      isProcessing: true\n    }));\n    try {\n      const result = await MobileSubscriptionService.activateWithCode(accessCode);\n      if (result.success) {\n        setSubscription({\n          ...subscription,\n          isSubscribed: true,\n          plan: result.plan,\n          expiresAt: result.expiresAt,\n          isProcessing: false\n        });\n      } else {\n        setSubscription(prev => ({\n          ...prev,\n          isProcessing: false,\n          error: result.error\n        }));\n      }\n      return result;\n    } catch (error) {\n      setSubscription(prev => ({\n        ...prev,\n        isProcessing: false,\n        error: error.message\n      }));\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Refresh subscription status\n  const refreshSubscription = async () => {\n    try {\n      const status = await MobileSubscriptionService.verifySubscription();\n      setSubscription(prev => ({\n        ...prev,\n        isSubscribed: status.isSubscribed,\n        plan: status.plan,\n        expiresAt: status.expiresAt\n      }));\n      return status;\n    } catch (error) {\n      console.error('Refresh failed:', error);\n      return {\n        isSubscribed: subscription.isSubscribed\n      };\n    }\n  };\n  const clearError = () => {\n    setSubscription(prev => ({\n      ...prev,\n      error: null\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(MobileSubscriptionContext.Provider, {\n    value: {\n      ...subscription,\n      purchaseSubscription,\n      restorePurchases,\n      activateWithCode,\n      refreshSubscription,\n      clearError\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 5\n  }, this);\n};\n_s(MobileSubscriptionProvider, \"Y44FLxSFJ0ArhYKOc5m1ARnsEQE=\");\n_c = MobileSubscriptionProvider;\nexport default MobileSubscriptionContext;\nvar _c;\n$RefreshReg$(_c, \"MobileSubscriptionProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","MobileSubscriptionService","jsxDEV","_jsxDEV","MobileSubscriptionContext","MobileSubscriptionProvider","children","_s","subscription","setSubscription","isSubscribed","isLoading","products","plan","expiresAt","initializeSubscription","getProducts","status","verifySubscription","error","console","prev","message","purchaseSubscription","productId","isProcessing","result","success","restorePurchases","restorationComplete","activateWithCode","accessCode","refreshSubscription","clearError","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/context/MobileSubscriptionContext.jsx"],"sourcesContent":["// src/context/MobileSubscriptionContext.jsx\r\n\r\nimport React, { createContext, useEffect, useState } from 'react';\r\nimport MobileSubscriptionService from '../services/MobileSubscriptionService';\r\n\r\nexport const MobileSubscriptionContext = createContext();\r\n\r\nexport const MobileSubscriptionProvider = ({ children }) => {\r\n  const [subscription, setSubscription] = useState({\r\n    isSubscribed: false,\r\n    isLoading: true,\r\n    products: [],\r\n    plan: null,\r\n    expiresAt: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Initial setup - load products and check subscription status\r\n    const initializeSubscription = async () => {\r\n      try {\r\n        // Load available subscription products\r\n        const products = await MobileSubscriptionService.getProducts();\r\n        \r\n        // Check existing subscription status\r\n        const status = await MobileSubscriptionService.verifySubscription();\r\n        \r\n        setSubscription({\r\n          isSubscribed: status.isSubscribed,\r\n          plan: status.plan,\r\n          expiresAt: status.expiresAt,\r\n          products,\r\n          isLoading: false\r\n        });\r\n      } catch (error) {\r\n        console.error('Subscription initialization failed:', error);\r\n        setSubscription(prev => ({\r\n          ...prev,\r\n          isLoading: false,\r\n          error: error.message\r\n        }));\r\n      }\r\n    };\r\n\r\n    initializeSubscription();\r\n  }, []);\r\n\r\n  // Purchase a subscription\r\n  const purchaseSubscription = async (productId) => {\r\n    setSubscription(prev => ({ ...prev, isProcessing: true }));\r\n    try {\r\n      const result = await MobileSubscriptionService.purchaseSubscription(productId);\r\n      \r\n      if (result.success) {\r\n        setSubscription({\r\n          ...subscription,\r\n          isSubscribed: true,\r\n          plan: productId,\r\n          expiresAt: result.expiresAt,\r\n          isProcessing: false\r\n        });\r\n      } else {\r\n        setSubscription(prev => ({\r\n          ...prev,\r\n          isProcessing: false,\r\n          error: result.error\r\n        }));\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      setSubscription(prev => ({\r\n        ...prev,\r\n        isProcessing: false,\r\n        error: error.message\r\n      }));\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  // Restore previous purchases\r\n  const restorePurchases = async () => {\r\n    setSubscription(prev => ({ ...prev, isProcessing: true }));\r\n    try {\r\n      const result = await MobileSubscriptionService.restorePurchases();\r\n      \r\n      if (result.success && result.isSubscribed) {\r\n        // Verify the restored subscription\r\n        const status = await MobileSubscriptionService.verifySubscription();\r\n        \r\n        setSubscription({\r\n          ...subscription,\r\n          isSubscribed: status.isSubscribed,\r\n          plan: status.plan,\r\n          expiresAt: status.expiresAt,\r\n          isProcessing: false,\r\n          restorationComplete: true\r\n        });\r\n      } else {\r\n        setSubscription(prev => ({\r\n          ...prev,\r\n          isProcessing: false,\r\n          restorationComplete: true,\r\n          error: result.error\r\n        }));\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      setSubscription(prev => ({\r\n        ...prev,\r\n        isProcessing: false,\r\n        restorationComplete: true,\r\n        error: error.message\r\n      }));\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  // Activate with code (cross-platform support)\r\n  const activateWithCode = async (accessCode) => {\r\n    setSubscription(prev => ({ ...prev, isProcessing: true }));\r\n    try {\r\n      const result = await MobileSubscriptionService.activateWithCode(accessCode);\r\n      \r\n      if (result.success) {\r\n        setSubscription({\r\n          ...subscription,\r\n          isSubscribed: true,\r\n          plan: result.plan,\r\n          expiresAt: result.expiresAt,\r\n          isProcessing: false\r\n        });\r\n      } else {\r\n        setSubscription(prev => ({\r\n          ...prev,\r\n          isProcessing: false,\r\n          error: result.error\r\n        }));\r\n      }\r\n      \r\n      return result;\r\n    } catch (error) {\r\n      setSubscription(prev => ({\r\n        ...prev,\r\n        isProcessing: false,\r\n        error: error.message\r\n      }));\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n\r\n  // Refresh subscription status\r\n  const refreshSubscription = async () => {\r\n    try {\r\n      const status = await MobileSubscriptionService.verifySubscription();\r\n      \r\n      setSubscription(prev => ({\r\n        ...prev,\r\n        isSubscribed: status.isSubscribed,\r\n        plan: status.plan,\r\n        expiresAt: status.expiresAt\r\n      }));\r\n      \r\n      return status;\r\n    } catch (error) {\r\n      console.error('Refresh failed:', error);\r\n      return { isSubscribed: subscription.isSubscribed };\r\n    }\r\n  };\r\n\r\n  const clearError = () => {\r\n    setSubscription(prev => ({ ...prev, error: null }));\r\n  };\r\n\r\n  return (\r\n    <MobileSubscriptionContext.Provider value={{\r\n      ...subscription,\r\n      purchaseSubscription,\r\n      restorePurchases,\r\n      activateWithCode,\r\n      refreshSubscription,\r\n      clearError\r\n    }}>\r\n      {children}\r\n    </MobileSubscriptionContext.Provider>\r\n  );\r\n};\r\n\r\nexport default MobileSubscriptionContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}