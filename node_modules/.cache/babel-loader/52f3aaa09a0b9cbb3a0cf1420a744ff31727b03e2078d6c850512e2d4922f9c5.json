{"ast":null,"code":"// src/services/platforms/AndroidSubscriptionHandler.js\n\nimport { Platform } from 'react-native';\nimport * as RNIap from 'react-native-iap';\n\n/**\r\n * Android specific subscription handling using Google Play Billing\r\n */\nexport class AndroidSubscriptionHandler {\n  constructor() {\n    this.products = [];\n    this.isInitialized = false;\n    this.productIds = ['com.yourapp.monthly_premium', 'com.yourapp.yearly_premium'];\n  }\n\n  /**\r\n   * Initialize Google Play Billing\r\n   */\n  async initialize() {\n    if (Platform.OS !== 'android') return;\n    try {\n      await RNIap.initConnection();\n      this.isInitialized = true;\n\n      // Pre-load product information\n      await this.getProducts();\n\n      // Set up purchase listeners\n      this.purchaseUpdateSubscription = RNIap.purchaseUpdatedListener(async purchase => {\n        // For subscriptions, we need to acknowledge the purchase\n        if (purchase) {\n          try {\n            const acknowledgePurchase = purchase.purchaseToken ? await RNIap.acknowledgePurchaseAndroid(purchase.purchaseToken) : true;\n            if (acknowledgePurchase) {\n              console.log('Purchase acknowledged successfully');\n            }\n          } catch (ackErr) {\n            console.error('Error acknowledging purchase:', ackErr);\n          }\n        }\n      });\n      this.purchaseErrorSubscription = RNIap.purchaseErrorListener(error => {\n        console.error('Purchase error:', error);\n      });\n      return true;\n    } catch (error) {\n      console.error('Google Play Billing initialization failed:', error);\n      return false;\n    }\n  }\n\n  /**\r\n   * Get available subscription products from Google Play\r\n   */\n  async getProducts() {\n    if (!this.isInitialized) await this.initialize();\n    try {\n      this.products = await RNIap.getSubscriptions(this.productIds);\n      return this.products;\n    } catch (error) {\n      console.error('Failed to get products:', error);\n      return [];\n    }\n  }\n\n  /**\r\n   * Purchase a subscription\r\n   */\n  async purchaseSubscription(productId) {\n    if (!this.isInitialized) await this.initialize();\n    try {\n      // Request the purchase\n      const purchase = await RNIap.requestSubscription(productId);\n      if (purchase) {\n        // For Android, we'll use the purchase token as our \"receipt\"\n        return {\n          success: true,\n          receipt: JSON.stringify({\n            packageName: purchase.packageNameAndroid,\n            productId: purchase.productId,\n            purchaseToken: purchase.purchaseToken,\n            purchaseTime: purchase.transactionDate\n          }),\n          productId\n        };\n      }\n      return {\n        success: false,\n        error: 'Purchase did not complete'\n      };\n    } catch (error) {\n      console.error('Purchase failed:', error);\n      return {\n        success: false,\n        error: error.message || 'Purchase failed'\n      };\n    }\n  }\n\n  /**\r\n   * Verify receipt locally (basic checks)\r\n   * For true validation, use the server verification\r\n   */\n  async verifyReceipt(receiptString, productId) {\n    if (!this.isInitialized) await this.initialize();\n    try {\n      // Parse the receipt string back to an object\n      const receipt = JSON.parse(receiptString);\n\n      // Get all active purchases\n      const purchases = await RNIap.getAvailablePurchases();\n\n      // Find this specific purchase\n      const matchingPurchase = purchases.find(p => p.productId === productId && p.purchaseToken === receipt.purchaseToken);\n      if (matchingPurchase) {\n        var _expiresAt;\n        // Check if the purchase is still active\n        // For subscriptions, check purchaseState === 0 (purchased)\n        // and check that it hasn't been cancelled or expired\n        if (matchingPurchase.purchaseState === 0 && !matchingPurchase.isAcknowledged) {\n          // Acknowledge if not already acknowledged\n          await RNIap.acknowledgePurchaseAndroid(matchingPurchase.purchaseToken);\n        }\n\n        // For Google Play subscriptions, we need to calculate expiry date\n        // based on purchase date and subscription period\n        const purchaseDate = new Date(matchingPurchase.transactionDate);\n        let expiresAt;\n\n        // Calculate expiry based on product ID (simplified example)\n        if (productId.includes('monthly')) {\n          expiresAt = new Date(purchaseDate);\n          expiresAt.setMonth(expiresAt.getMonth() + 1);\n        } else if (productId.includes('yearly')) {\n          expiresAt = new Date(purchaseDate);\n          expiresAt.setFullYear(expiresAt.getFullYear() + 1);\n        }\n        return {\n          isValid: true,\n          expiresAt: (_expiresAt = expiresAt) === null || _expiresAt === void 0 ? void 0 : _expiresAt.toISOString()\n        };\n      }\n      return {\n        isValid: false\n      };\n    } catch (error) {\n      console.error('Receipt verification failed:', error);\n      return {\n        isValid: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\r\n   * Restore previous purchases\r\n   */\n  async restorePurchases() {\n    if (!this.isInitialized) await this.initialize();\n    try {\n      // Get all past purchases\n      const purchases = await RNIap.getAvailablePurchases();\n      if (purchases && purchases.length > 0) {\n        // Filter for subscription purchases and create receipt objects\n        const subscriptions = await Promise.all(purchases.filter(p => this.productIds.includes(p.productId)).map(async purchase => {\n          // Create a receipt string similar to our purchase format\n          const receipt = JSON.stringify({\n            packageName: purchase.packageNameAndroid,\n            productId: purchase.productId,\n            purchaseToken: purchase.purchaseToken,\n            purchaseTime: purchase.transactionDate\n          });\n\n          // Verify the receipt to check if it's still active\n          const verification = await this.verifyReceipt(receipt, purchase.productId);\n          return {\n            productId: purchase.productId,\n            receipt,\n            isActive: verification.isValid,\n            expiresAt: verification.expiresAt\n          };\n        }));\n        return {\n          success: true,\n          purchases: subscriptions\n        };\n      }\n      return {\n        success: true,\n        purchases: []\n      };\n    } catch (error) {\n      console.error('Restore failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\r\n   * Cleanup method to remove listeners\r\n   */\n  cleanup() {\n    if (this.purchaseUpdateSubscription) {\n      this.purchaseUpdateSubscription.remove();\n    }\n    if (this.purchaseErrorSubscription) {\n      this.purchaseErrorSubscription.remove();\n    }\n\n    // End IAP connection\n    RNIap.endConnection();\n  }\n}","map":{"version":3,"names":["Platform","RNIap","AndroidSubscriptionHandler","constructor","products","isInitialized","productIds","initialize","OS","initConnection","getProducts","purchaseUpdateSubscription","purchaseUpdatedListener","purchase","acknowledgePurchase","purchaseToken","acknowledgePurchaseAndroid","console","log","ackErr","error","purchaseErrorSubscription","purchaseErrorListener","getSubscriptions","purchaseSubscription","productId","requestSubscription","success","receipt","JSON","stringify","packageName","packageNameAndroid","purchaseTime","transactionDate","message","verifyReceipt","receiptString","parse","purchases","getAvailablePurchases","matchingPurchase","find","p","_expiresAt","purchaseState","isAcknowledged","purchaseDate","Date","expiresAt","includes","setMonth","getMonth","setFullYear","getFullYear","isValid","toISOString","restorePurchases","length","subscriptions","Promise","all","filter","map","verification","isActive","cleanup","remove","endConnection"],"sources":["C:/Users/juliu/Desktop/web/src/services/platforms/AndroidSubscriptionHandler.js"],"sourcesContent":["// src/services/platforms/AndroidSubscriptionHandler.js\r\n\r\nimport { Platform } from 'react-native';\r\nimport * as RNIap from 'react-native-iap';\r\n\r\n/**\r\n * Android specific subscription handling using Google Play Billing\r\n */\r\nexport class AndroidSubscriptionHandler {\r\n  constructor() {\r\n    this.products = [];\r\n    this.isInitialized = false;\r\n    this.productIds = [\r\n      'com.yourapp.monthly_premium',\r\n      'com.yourapp.yearly_premium'\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Initialize Google Play Billing\r\n   */\r\n  async initialize() {\r\n    if (Platform.OS !== 'android') return;\r\n    \r\n    try {\r\n      await RNIap.initConnection();\r\n      this.isInitialized = true;\r\n      \r\n      // Pre-load product information\r\n      await this.getProducts();\r\n      \r\n      // Set up purchase listeners\r\n      this.purchaseUpdateSubscription = RNIap.purchaseUpdatedListener(\r\n        async (purchase) => {\r\n          // For subscriptions, we need to acknowledge the purchase\r\n          if (purchase) {\r\n            try {\r\n              const acknowledgePurchase = purchase.purchaseToken \r\n                ? await RNIap.acknowledgePurchaseAndroid(purchase.purchaseToken)\r\n                : true;\r\n              \r\n              if (acknowledgePurchase) {\r\n                console.log('Purchase acknowledged successfully');\r\n              }\r\n            } catch (ackErr) {\r\n              console.error('Error acknowledging purchase:', ackErr);\r\n            }\r\n          }\r\n        }\r\n      );\r\n      \r\n      this.purchaseErrorSubscription = RNIap.purchaseErrorListener(\r\n        (error) => {\r\n          console.error('Purchase error:', error);\r\n        }\r\n      );\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Google Play Billing initialization failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available subscription products from Google Play\r\n   */\r\n  async getProducts() {\r\n    if (!this.isInitialized) await this.initialize();\r\n    \r\n    try {\r\n      this.products = await RNIap.getSubscriptions(this.productIds);\r\n      return this.products;\r\n    } catch (error) {\r\n      console.error('Failed to get products:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Purchase a subscription\r\n   */\r\n  async purchaseSubscription(productId) {\r\n    if (!this.isInitialized) await this.initialize();\r\n    \r\n    try {\r\n      // Request the purchase\r\n      const purchase = await RNIap.requestSubscription(productId);\r\n      \r\n      if (purchase) {\r\n        // For Android, we'll use the purchase token as our \"receipt\"\r\n        return {\r\n          success: true,\r\n          receipt: JSON.stringify({\r\n            packageName: purchase.packageNameAndroid,\r\n            productId: purchase.productId,\r\n            purchaseToken: purchase.purchaseToken,\r\n            purchaseTime: purchase.transactionDate\r\n          }),\r\n          productId\r\n        };\r\n      }\r\n      \r\n      return { success: false, error: 'Purchase did not complete' };\r\n    } catch (error) {\r\n      console.error('Purchase failed:', error);\r\n      return { success: false, error: error.message || 'Purchase failed' };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify receipt locally (basic checks)\r\n   * For true validation, use the server verification\r\n   */\r\n  async verifyReceipt(receiptString, productId) {\r\n    if (!this.isInitialized) await this.initialize();\r\n    \r\n    try {\r\n      // Parse the receipt string back to an object\r\n      const receipt = JSON.parse(receiptString);\r\n      \r\n      // Get all active purchases\r\n      const purchases = await RNIap.getAvailablePurchases();\r\n      \r\n      // Find this specific purchase\r\n      const matchingPurchase = purchases.find(\r\n        p => p.productId === productId && p.purchaseToken === receipt.purchaseToken\r\n      );\r\n      \r\n      if (matchingPurchase) {\r\n        // Check if the purchase is still active\r\n        // For subscriptions, check purchaseState === 0 (purchased)\r\n        // and check that it hasn't been cancelled or expired\r\n        if (matchingPurchase.purchaseState === 0 && !matchingPurchase.isAcknowledged) {\r\n          // Acknowledge if not already acknowledged\r\n          await RNIap.acknowledgePurchaseAndroid(matchingPurchase.purchaseToken);\r\n        }\r\n        \r\n        // For Google Play subscriptions, we need to calculate expiry date\r\n        // based on purchase date and subscription period\r\n        const purchaseDate = new Date(matchingPurchase.transactionDate);\r\n        let expiresAt;\r\n        \r\n        // Calculate expiry based on product ID (simplified example)\r\n        if (productId.includes('monthly')) {\r\n          expiresAt = new Date(purchaseDate);\r\n          expiresAt.setMonth(expiresAt.getMonth() + 1);\r\n        } else if (productId.includes('yearly')) {\r\n          expiresAt = new Date(purchaseDate);\r\n          expiresAt.setFullYear(expiresAt.getFullYear() + 1);\r\n        }\r\n        \r\n        return {\r\n          isValid: true,\r\n          expiresAt: expiresAt?.toISOString()\r\n        };\r\n      }\r\n      \r\n      return { isValid: false };\r\n    } catch (error) {\r\n      console.error('Receipt verification failed:', error);\r\n      return { isValid: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restore previous purchases\r\n   */\r\n  async restorePurchases() {\r\n    if (!this.isInitialized) await this.initialize();\r\n    \r\n    try {\r\n      // Get all past purchases\r\n      const purchases = await RNIap.getAvailablePurchases();\r\n      \r\n      if (purchases && purchases.length > 0) {\r\n        // Filter for subscription purchases and create receipt objects\r\n        const subscriptions = await Promise.all(\r\n          purchases\r\n            .filter(p => this.productIds.includes(p.productId))\r\n            .map(async (purchase) => {\r\n              // Create a receipt string similar to our purchase format\r\n              const receipt = JSON.stringify({\r\n                packageName: purchase.packageNameAndroid,\r\n                productId: purchase.productId,\r\n                purchaseToken: purchase.purchaseToken,\r\n                purchaseTime: purchase.transactionDate\r\n              });\r\n              \r\n              // Verify the receipt to check if it's still active\r\n              const verification = await this.verifyReceipt(receipt, purchase.productId);\r\n              \r\n              return {\r\n                productId: purchase.productId,\r\n                receipt,\r\n                isActive: verification.isValid,\r\n                expiresAt: verification.expiresAt\r\n              };\r\n            })\r\n        );\r\n        \r\n        return {\r\n          success: true,\r\n          purchases: subscriptions\r\n        };\r\n      }\r\n      \r\n      return { success: true, purchases: [] };\r\n    } catch (error) {\r\n      console.error('Restore failed:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cleanup method to remove listeners\r\n   */\r\n  cleanup() {\r\n    if (this.purchaseUpdateSubscription) {\r\n      this.purchaseUpdateSubscription.remove();\r\n    }\r\n    \r\n    if (this.purchaseErrorSubscription) {\r\n      this.purchaseErrorSubscription.remove();\r\n    }\r\n    \r\n    // End IAP connection\r\n    RNIap.endConnection();\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}