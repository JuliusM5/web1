{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n// [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' ||\n// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://cra.link/PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    // Check for updates on page load\n    registration.update();\n\n    // Also check for updates periodically\n    setInterval(() => {\n      registration.update();\n    }, 60 * 60 * 1000); // Check every hour\n\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://cra.link/PWA.');\n\n            // Dispatch event to notify the app about the update\n            window.dispatchEvent(new Event('serviceWorkerUpdated'));\n\n            // Execute callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.');\n\n            // Dispatch event for the app to show a notification\n            window.dispatchEvent(new Event('serviceWorkerInstalled'));\n\n            // Execute callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}\n\n// Function to trigger background sync\nexport function triggerSync() {\n  if ('serviceWorker' in navigator && 'SyncManager' in window) {\n    return navigator.serviceWorker.ready.then(registration => {\n      // Register a sync and pass the \"sync-trips\" tag\n      return registration.sync.register('sync-trips').then(() => {\n        console.log('Background sync registered!');\n        return true;\n      }).catch(err => {\n        console.error('Background sync registration failed:', err);\n        manualSync(); // Fallback to manual sync on error\n        return false;\n      });\n    }).catch(err => {\n      console.error('Service worker not ready:', err);\n      manualSync(); // Fallback to manual sync on error\n      return false;\n    });\n  } else {\n    console.log('Background sync not supported');\n    // Manual sync fallback for browsers that don't support background sync\n    manualSync();\n    return Promise.resolve(false);\n  }\n}\n\n// Fallback for browsers without background sync support\nfunction manualSync() {\n  // Get unsynchronized data from localStorage\n  const unsynced = JSON.parse(localStorage.getItem('unsyncedChanges') || '[]');\n  if (unsynced.length === 0) {\n    console.log('No unsynced changes to process');\n    return;\n  }\n  console.log(`Manually syncing ${unsynced.length} unsynced changes`);\n\n  // In a real implementation, this would send the data to a server\n  // For now, just mark as synced by clearing the unsynced changes\n  localStorage.setItem('unsyncedChanges', '[]');\n\n  // Update the last sync time\n  localStorage.setItem('lastSyncTime', new Date().toISOString());\n\n  // Notify the app about the sync\n  window.dispatchEvent(new CustomEvent('syncCompleted', {\n    detail: {\n      timestamp: new Date().toISOString()\n    }\n  }));\n  console.log('Manual sync completed successfully');\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","update","setInterval","onupdatefound","installingWorker","installing","onstatechange","state","controller","dispatchEvent","Event","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message","triggerSync","sync","err","manualSync","Promise","resolve","unsynced","JSON","parse","localStorage","getItem","length","setItem","Date","toISOString","CustomEvent","detail","timestamp"],"sources":["C:/Users/juliu/Desktop/web/src/serviceWorkerRegistration.js"],"sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://cra.link/PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then((registration) => {\r\n        // Check for updates on page load\r\n        registration.update();\r\n  \r\n        // Also check for updates periodically\r\n        setInterval(() => {\r\n          registration.update();\r\n        }, 60 * 60 * 1000); // Check every hour\r\n  \r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://cra.link/PWA.'\r\n                );\r\n  \r\n                // Dispatch event to notify the app about the update\r\n                window.dispatchEvent(new Event('serviceWorkerUpdated'));\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Dispatch event for the app to show a notification\r\n                window.dispatchEvent(new Event('serviceWorkerInstalled'));\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then((response) => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then((registration) => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log('No internet connection found. App is running in offline mode.');\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          registration.unregister();\r\n        })\r\n        .catch((error) => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  \r\n  // Function to trigger background sync\r\n  export function triggerSync() {\r\n    if ('serviceWorker' in navigator && 'SyncManager' in window) {\r\n      return navigator.serviceWorker.ready\r\n        .then((registration) => {\r\n          // Register a sync and pass the \"sync-trips\" tag\r\n          return registration.sync.register('sync-trips')\r\n            .then(() => {\r\n              console.log('Background sync registered!');\r\n              return true;\r\n            })\r\n            .catch(err => {\r\n              console.error('Background sync registration failed:', err);\r\n              manualSync(); // Fallback to manual sync on error\r\n              return false;\r\n            });\r\n        })\r\n        .catch(err => {\r\n          console.error('Service worker not ready:', err);\r\n          manualSync(); // Fallback to manual sync on error\r\n          return false;\r\n        });\r\n    } else {\r\n      console.log('Background sync not supported');\r\n      // Manual sync fallback for browsers that don't support background sync\r\n      manualSync();\r\n      return Promise.resolve(false);\r\n    }\r\n  }\r\n  \r\n  // Fallback for browsers without background sync support\r\n  function manualSync() {\r\n    // Get unsynchronized data from localStorage\r\n    const unsynced = JSON.parse(localStorage.getItem('unsyncedChanges') || '[]');\r\n    \r\n    if (unsynced.length === 0) {\r\n      console.log('No unsynced changes to process');\r\n      return;\r\n    }\r\n    \r\n    console.log(`Manually syncing ${unsynced.length} unsynced changes`);\r\n    \r\n    // In a real implementation, this would send the data to a server\r\n    // For now, just mark as synced by clearing the unsynced changes\r\n    localStorage.setItem('unsyncedChanges', '[]');\r\n    \r\n    // Update the last sync time\r\n    localStorage.setItem('lastSyncTime', new Date().toISOString());\r\n    \r\n    // Notify the app about the sync\r\n    window.dispatchEvent(new CustomEvent('syncCompleted', {\r\n      detail: {\r\n        timestamp: new Date().toISOString()\r\n      }\r\n    }));\r\n    \r\n    console.log('Manual sync completed successfully');\r\n  }"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}