{"ast":null,"code":"/**\r\n * Device Detection Utilities\r\n * \r\n * Provides functions to detect device type, screen size, capabilities,\r\n * and orientation for responsive design and feature detection.\r\n */import{useState,useEffect}from'react';/**\r\n * Device type constants\r\n */export const DEVICE_TYPES={MOBILE:'mobile',TABLET:'tablet',DESKTOP:'desktop'};/**\r\n * Screen size breakpoints (in pixels)\r\n */export const BREAKPOINTS={SMALL:640,// Mobile\nMEDIUM:768,// Small tablet\nLARGE:1024,// Large tablet/small desktop\nXL:1280,// Desktop\nXXL:1536// Large desktop\n};/**\r\n * Check if the app is running in a browser environment\r\n * \r\n * @returns {boolean} True if in browser environment\r\n */export const isBrowser=()=>{return typeof window!=='undefined';};/**\r\n * Detect device type based on user agent\r\n * \r\n * @returns {string} Device type (mobile, tablet, or desktop)\r\n */export const detectDeviceType=()=>{if(!isBrowser())return DEVICE_TYPES.DESKTOP;const userAgent=navigator.userAgent.toLowerCase();// Check for tablets first (some tablets identify as both mobile and tablet)\nconst isTablet=/(tablet|ipad|playbook|silk)|(android(?!.*mobile))/i.test(userAgent);if(isTablet)return DEVICE_TYPES.TABLET;// Check for mobile devices\nconst isMobile=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);if(isMobile)return DEVICE_TYPES.MOBILE;// Default to desktop\nreturn DEVICE_TYPES.DESKTOP;};/**\r\n * Get current screen size category\r\n * \r\n * @returns {string} Screen size category (sm, md, lg, xl, xxl)\r\n */export const getScreenSizeCategory=()=>{if(!isBrowser())return'lg';const width=window.innerWidth;if(width<BREAKPOINTS.SMALL)return'sm';if(width<BREAKPOINTS.MEDIUM)return'md';if(width<BREAKPOINTS.LARGE)return'lg';if(width<BREAKPOINTS.XL)return'xl';return'xxl';};/**\r\n * Check if the device is using a touch interface\r\n * \r\n * @returns {boolean} True if touch is supported\r\n */export const isTouchDevice=()=>{if(!isBrowser())return false;return'ontouchstart'in window||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0;};/**\r\n * Get current device orientation\r\n * \r\n * @returns {string} Device orientation (portrait or landscape)\r\n */export const getDeviceOrientation=()=>{if(!isBrowser())return'landscape';return window.matchMedia(\"(orientation: portrait)\").matches?'portrait':'landscape';};/**\r\n * Check device network information\r\n * \r\n * @returns {Object} Network information\r\n */export const getNetworkInfo=()=>{if(!isBrowser()){return{online:true,effectiveType:'4g',saveData:false};}const connection=navigator.connection||navigator.mozConnection||navigator.webkitConnection;return{online:navigator.onLine,effectiveType:(connection===null||connection===void 0?void 0:connection.effectiveType)||'4g',saveData:(connection===null||connection===void 0?void 0:connection.saveData)||false};};/**\r\n * Device capability detection\r\n * \r\n * @returns {Object} Device capabilities\r\n */export const detectCapabilities=()=>{if(!isBrowser()){return{pwa:false,notifications:false,geolocation:false,camera:false,bluetooth:false,webShare:false};}return{// PWA installation capability\npwa:'serviceWorker'in navigator&&window.matchMedia('(display-mode: standalone)').matches,// Notification support\nnotifications:'Notification'in window,// Geolocation support\ngeolocation:'geolocation'in navigator,// Camera access\ncamera:'mediaDevices'in navigator&&'getUserMedia'in navigator.mediaDevices,// Bluetooth support\nbluetooth:'bluetooth'in navigator,// Web share API\nwebShare:'share'in navigator};};/**\r\n * React hook for device detection\r\n * \r\n * @returns {Object} Device information that updates on window resize\r\n */export const useDeviceDetection=()=>{// Default state for SSR\nconst defaultState={isMobile:false,isTablet:false,isDesktop:true,screenSize:'lg',orientation:'landscape',isTouch:false,online:true,capabilities:{pwa:false,notifications:false,geolocation:false,camera:false,bluetooth:false,webShare:false}};// Initialize state\nconst[deviceInfo,setDeviceInfo]=useState(defaultState);useEffect(()=>{// Function to update device information\nconst updateDeviceInfo=()=>{const deviceType=detectDeviceType();const screenSize=getScreenSizeCategory();const orientation=getDeviceOrientation();const isTouch=isTouchDevice();const{online}=getNetworkInfo();const capabilities=detectCapabilities();setDeviceInfo({isMobile:deviceType===DEVICE_TYPES.MOBILE,isTablet:deviceType===DEVICE_TYPES.TABLET,isDesktop:deviceType===DEVICE_TYPES.DESKTOP,screenSize,orientation,isTouch,online,capabilities});};// Initial update\nupdateDeviceInfo();// Add event listeners\nwindow.addEventListener('resize',updateDeviceInfo);window.addEventListener('orientationchange',updateDeviceInfo);window.addEventListener('online',updateDeviceInfo);window.addEventListener('offline',updateDeviceInfo);// Cleanup function\nreturn()=>{window.removeEventListener('resize',updateDeviceInfo);window.removeEventListener('orientationchange',updateDeviceInfo);window.removeEventListener('online',updateDeviceInfo);window.removeEventListener('offline',updateDeviceInfo);};},[]);return deviceInfo;};/**\r\n * Check if the current device is a mobile device\r\n * \r\n * @returns {boolean} True if mobile device\r\n */export const isMobileDevice=()=>{return detectDeviceType()===DEVICE_TYPES.MOBILE;};/**\r\n * Check if the current device is a tablet\r\n * \r\n * @returns {boolean} True if tablet device\r\n */export const isTabletDevice=()=>{return detectDeviceType()===DEVICE_TYPES.TABLET;};/**\r\n * Check if the current device is a desktop\r\n * \r\n * @returns {boolean} True if desktop device\r\n */export const isDesktopDevice=()=>{return detectDeviceType()===DEVICE_TYPES.DESKTOP;};","map":{"version":3,"names":["useState","useEffect","DEVICE_TYPES","MOBILE","TABLET","DESKTOP","BREAKPOINTS","SMALL","MEDIUM","LARGE","XL","XXL","isBrowser","window","detectDeviceType","userAgent","navigator","toLowerCase","isTablet","test","isMobile","getScreenSizeCategory","width","innerWidth","isTouchDevice","maxTouchPoints","msMaxTouchPoints","getDeviceOrientation","matchMedia","matches","getNetworkInfo","online","effectiveType","saveData","connection","mozConnection","webkitConnection","onLine","detectCapabilities","pwa","notifications","geolocation","camera","bluetooth","webShare","mediaDevices","useDeviceDetection","defaultState","isDesktop","screenSize","orientation","isTouch","capabilities","deviceInfo","setDeviceInfo","updateDeviceInfo","deviceType","addEventListener","removeEventListener","isMobileDevice","isTabletDevice","isDesktopDevice"],"sources":["C:/Users/juliu/Desktop/web/src/utils/deviceDetection.js"],"sourcesContent":["/**\r\n * Device Detection Utilities\r\n * \r\n * Provides functions to detect device type, screen size, capabilities,\r\n * and orientation for responsive design and feature detection.\r\n */\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\n/**\r\n * Device type constants\r\n */\r\nexport const DEVICE_TYPES = {\r\n  MOBILE: 'mobile',\r\n  TABLET: 'tablet',\r\n  DESKTOP: 'desktop'\r\n};\r\n\r\n/**\r\n * Screen size breakpoints (in pixels)\r\n */\r\nexport const BREAKPOINTS = {\r\n  SMALL: 640,   // Mobile\r\n  MEDIUM: 768,  // Small tablet\r\n  LARGE: 1024,  // Large tablet/small desktop\r\n  XL: 1280,     // Desktop\r\n  XXL: 1536     // Large desktop\r\n};\r\n\r\n/**\r\n * Check if the app is running in a browser environment\r\n * \r\n * @returns {boolean} True if in browser environment\r\n */\r\nexport const isBrowser = () => {\r\n  return typeof window !== 'undefined';\r\n};\r\n\r\n/**\r\n * Detect device type based on user agent\r\n * \r\n * @returns {string} Device type (mobile, tablet, or desktop)\r\n */\r\nexport const detectDeviceType = () => {\r\n  if (!isBrowser()) return DEVICE_TYPES.DESKTOP;\r\n  \r\n  const userAgent = navigator.userAgent.toLowerCase();\r\n  \r\n  // Check for tablets first (some tablets identify as both mobile and tablet)\r\n  const isTablet = /(tablet|ipad|playbook|silk)|(android(?!.*mobile))/i.test(userAgent);\r\n  if (isTablet) return DEVICE_TYPES.TABLET;\r\n  \r\n  // Check for mobile devices\r\n  const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent);\r\n  if (isMobile) return DEVICE_TYPES.MOBILE;\r\n  \r\n  // Default to desktop\r\n  return DEVICE_TYPES.DESKTOP;\r\n};\r\n\r\n/**\r\n * Get current screen size category\r\n * \r\n * @returns {string} Screen size category (sm, md, lg, xl, xxl)\r\n */\r\nexport const getScreenSizeCategory = () => {\r\n  if (!isBrowser()) return 'lg';\r\n  \r\n  const width = window.innerWidth;\r\n  \r\n  if (width < BREAKPOINTS.SMALL) return 'sm';\r\n  if (width < BREAKPOINTS.MEDIUM) return 'md';\r\n  if (width < BREAKPOINTS.LARGE) return 'lg';\r\n  if (width < BREAKPOINTS.XL) return 'xl';\r\n  return 'xxl';\r\n};\r\n\r\n/**\r\n * Check if the device is using a touch interface\r\n * \r\n * @returns {boolean} True if touch is supported\r\n */\r\nexport const isTouchDevice = () => {\r\n  if (!isBrowser()) return false;\r\n  \r\n  return (('ontouchstart' in window) ||\r\n    (navigator.maxTouchPoints > 0) ||\r\n    (navigator.msMaxTouchPoints > 0));\r\n};\r\n\r\n/**\r\n * Get current device orientation\r\n * \r\n * @returns {string} Device orientation (portrait or landscape)\r\n */\r\nexport const getDeviceOrientation = () => {\r\n  if (!isBrowser()) return 'landscape';\r\n  \r\n  return window.matchMedia(\"(orientation: portrait)\").matches ? 'portrait' : 'landscape';\r\n};\r\n\r\n/**\r\n * Check device network information\r\n * \r\n * @returns {Object} Network information\r\n */\r\nexport const getNetworkInfo = () => {\r\n  if (!isBrowser()) {\r\n    return {\r\n      online: true,\r\n      effectiveType: '4g',\r\n      saveData: false\r\n    };\r\n  }\r\n  \r\n  const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;\r\n  \r\n  return {\r\n    online: navigator.onLine,\r\n    effectiveType: connection?.effectiveType || '4g',\r\n    saveData: connection?.saveData || false\r\n  };\r\n};\r\n\r\n/**\r\n * Device capability detection\r\n * \r\n * @returns {Object} Device capabilities\r\n */\r\nexport const detectCapabilities = () => {\r\n  if (!isBrowser()) {\r\n    return {\r\n      pwa: false,\r\n      notifications: false,\r\n      geolocation: false,\r\n      camera: false,\r\n      bluetooth: false,\r\n      webShare: false\r\n    };\r\n  }\r\n  \r\n  return {\r\n    // PWA installation capability\r\n    pwa: 'serviceWorker' in navigator && window.matchMedia('(display-mode: standalone)').matches,\r\n    // Notification support\r\n    notifications: 'Notification' in window,\r\n    // Geolocation support\r\n    geolocation: 'geolocation' in navigator,\r\n    // Camera access\r\n    camera: 'mediaDevices' in navigator && 'getUserMedia' in navigator.mediaDevices,\r\n    // Bluetooth support\r\n    bluetooth: 'bluetooth' in navigator,\r\n    // Web share API\r\n    webShare: 'share' in navigator\r\n  };\r\n};\r\n\r\n/**\r\n * React hook for device detection\r\n * \r\n * @returns {Object} Device information that updates on window resize\r\n */\r\nexport const useDeviceDetection = () => {\r\n  // Default state for SSR\r\n  const defaultState = {\r\n    isMobile: false,\r\n    isTablet: false,\r\n    isDesktop: true,\r\n    screenSize: 'lg',\r\n    orientation: 'landscape',\r\n    isTouch: false,\r\n    online: true,\r\n    capabilities: {\r\n      pwa: false,\r\n      notifications: false,\r\n      geolocation: false,\r\n      camera: false,\r\n      bluetooth: false,\r\n      webShare: false\r\n    }\r\n  };\r\n  \r\n  // Initialize state\r\n  const [deviceInfo, setDeviceInfo] = useState(defaultState);\r\n  \r\n  useEffect(() => {\r\n    // Function to update device information\r\n    const updateDeviceInfo = () => {\r\n      const deviceType = detectDeviceType();\r\n      const screenSize = getScreenSizeCategory();\r\n      const orientation = getDeviceOrientation();\r\n      const isTouch = isTouchDevice();\r\n      const { online } = getNetworkInfo();\r\n      const capabilities = detectCapabilities();\r\n      \r\n      setDeviceInfo({\r\n        isMobile: deviceType === DEVICE_TYPES.MOBILE,\r\n        isTablet: deviceType === DEVICE_TYPES.TABLET,\r\n        isDesktop: deviceType === DEVICE_TYPES.DESKTOP,\r\n        screenSize,\r\n        orientation,\r\n        isTouch,\r\n        online,\r\n        capabilities\r\n      });\r\n    };\r\n    \r\n    // Initial update\r\n    updateDeviceInfo();\r\n    \r\n    // Add event listeners\r\n    window.addEventListener('resize', updateDeviceInfo);\r\n    window.addEventListener('orientationchange', updateDeviceInfo);\r\n    window.addEventListener('online', updateDeviceInfo);\r\n    window.addEventListener('offline', updateDeviceInfo);\r\n    \r\n    // Cleanup function\r\n    return () => {\r\n      window.removeEventListener('resize', updateDeviceInfo);\r\n      window.removeEventListener('orientationchange', updateDeviceInfo);\r\n      window.removeEventListener('online', updateDeviceInfo);\r\n      window.removeEventListener('offline', updateDeviceInfo);\r\n    };\r\n  }, []);\r\n  \r\n  return deviceInfo;\r\n};\r\n\r\n/**\r\n * Check if the current device is a mobile device\r\n * \r\n * @returns {boolean} True if mobile device\r\n */\r\nexport const isMobileDevice = () => {\r\n  return detectDeviceType() === DEVICE_TYPES.MOBILE;\r\n};\r\n\r\n/**\r\n * Check if the current device is a tablet\r\n * \r\n * @returns {boolean} True if tablet device\r\n */\r\nexport const isTabletDevice = () => {\r\n  return detectDeviceType() === DEVICE_TYPES.TABLET;\r\n};\r\n\r\n/**\r\n * Check if the current device is a desktop\r\n * \r\n * @returns {boolean} True if desktop device\r\n */\r\nexport const isDesktopDevice = () => {\r\n  return detectDeviceType() === DEVICE_TYPES.DESKTOP;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}