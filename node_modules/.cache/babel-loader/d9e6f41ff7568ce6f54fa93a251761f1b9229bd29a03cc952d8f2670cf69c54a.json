{"ast":null,"code":"// src/services/efficientDealService.js\n\nimport skyscannerService from './skyscannerService';\nimport { storageKeys } from '../constants/storageKeys';\nclass EfficientDealService {\n  constructor() {\n    // Initialize with an empty locations cache\n    this.locationsCache = {};\n\n    // Load any previously cached locations from localStorage\n    this.loadCachedLocations();\n\n    // Track recently searched routes\n    this.recentSearches = new Set();\n    this.recentSearchesMaxSize = 100;\n\n    // Load saved deals\n    this.savedDeals = this.loadSavedDeals();\n  }\n  loadCachedLocations() {\n    try {\n      const cached = localStorage.getItem(storageKeys.LOCATIONS_CACHE);\n      if (cached) {\n        this.locationsCache = JSON.parse(cached);\n      }\n    } catch (error) {\n      console.error('Error loading cached locations:', error);\n      this.locationsCache = {};\n    }\n  }\n  saveCachedLocations() {\n    try {\n      localStorage.setItem(storageKeys.LOCATIONS_CACHE, JSON.stringify(this.locationsCache));\n    } catch (error) {\n      console.error('Error saving cached locations:', error);\n    }\n  }\n  loadSavedDeals() {\n    try {\n      const saved = localStorage.getItem(storageKeys.SAVED_DEALS);\n      return saved ? JSON.parse(saved) : [];\n    } catch (error) {\n      console.error('Error loading saved deals:', error);\n      return [];\n    }\n  }\n  saveDeal(deal) {\n    try {\n      const deals = this.loadSavedDeals();\n      const isDuplicate = deals.some(d => d.origin === deal.origin && d.destination === deal.destination && d.price === deal.price);\n      if (!isDuplicate) {\n        deals.push({\n          ...deal,\n          savedAt: new Date().toISOString()\n        });\n        this.savedDeals = deals;\n        localStorage.setItem(storageKeys.SAVED_DEALS, JSON.stringify(deals));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Error saving deal:', error);\n      return false;\n    }\n  }\n  removeSavedDeal(dealId) {\n    try {\n      const deals = this.loadSavedDeals();\n      const filteredDeals = deals.filter(deal => deal.id !== dealId);\n      this.savedDeals = filteredDeals;\n      localStorage.setItem(storageKeys.SAVED_DEALS, JSON.stringify(filteredDeals));\n      return true;\n    } catch (error) {\n      console.error('Error removing deal:', error);\n      return false;\n    }\n  }\n  getSavedDeals() {\n    return this.savedDeals;\n  }\n\n  // Global airport search - allows searching ANY airport\n  async searchAirports(query) {\n    try {\n      // Check cache first\n      const cacheKey = `airport-search-${query.toLowerCase()}`;\n      const cachedResults = localStorage.getItem(cacheKey);\n      if (cachedResults) {\n        return JSON.parse(cachedResults);\n      }\n\n      // Not in cache, search via API\n      const results = await skyscannerService.locationAutocomplete(query);\n      if (results && results.places) {\n        // Process and format results\n        const airports = results.places.map(place => ({\n          code: place.iata || place.entityId,\n          id: place.entityId || place.id,\n          name: place.name,\n          city: place.cityName || place.name,\n          country: place.countryName,\n          type: place.type // e.g., 'CITY', 'AIRPORT'\n        }));\n\n        // Cache results for future use\n        localStorage.setItem(cacheKey, JSON.stringify(airports));\n        return airports;\n      }\n      return [];\n    } catch (error) {\n      console.error('Error searching airports:', error);\n      return [];\n    }\n  }\n\n  // Search for flights between ANY two airports\n  async searchFlights(originCode, originId, destinationCode, destinationId, date = null) {\n    // Generate a unique search key\n    const searchKey = `${originCode}-${destinationCode}-${date || 'any'}`;\n    try {\n      // Search for one-way flights\n      const flightData = await skyscannerService.searchOneWayFlights(originCode, destinationCode, originId, destinationId, date);\n      return this.processFlightData(flightData, originCode, destinationCode, originCode,\n      // Use codes as names if actual names not available\n      destinationCode);\n    } catch (error) {\n      console.error(`Error searching flights for ${searchKey}:`, error);\n      return null;\n    }\n  }\n\n  // Process flight data (same as before)\n  processFlightData(data, originCode, destCode, originName, destName) {\n    if (!data || !data.itineraries || data.itineraries.length === 0) {\n      return null;\n    }\n\n    // Find the best (lowest price) deal\n    const bestDeal = data.itineraries.reduce((best, current) => {\n      const currentPrice = this.extractPrice(current);\n      const bestPrice = best ? this.extractPrice(best) : Infinity;\n      return currentPrice < bestPrice ? current : best;\n    }, null);\n    if (!bestDeal) return null;\n    const price = this.extractPrice(bestDeal);\n    const departureTime = this.extractDepartureTime(bestDeal);\n    const arrivalTime = this.extractArrivalTime(bestDeal);\n    const duration = this.extractDuration(bestDeal);\n    const airline = this.extractAirline(bestDeal);\n    return {\n      id: `${originCode}-${destCode}-${Date.now()}`,\n      origin: originCode,\n      originName,\n      destination: destCode,\n      destinationName: destName,\n      price,\n      departureTime,\n      arrivalTime,\n      duration,\n      airline,\n      deep_link: this.createDeepLink(originCode, destCode, departureTime)\n    };\n  }\n\n  // Extract methods remain the same\n  extractPrice(itinerary) {\n    try {\n      return itinerary.price ? itinerary.price.amount || 0 : 0;\n    } catch (error) {\n      console.error('Error extracting price:', error);\n      return 0;\n    }\n  }\n  extractDepartureTime(itinerary) {\n    try {\n      return itinerary.legs && itinerary.legs[0] ? itinerary.legs[0].departure || new Date().toISOString() : new Date().toISOString();\n    } catch (error) {\n      console.error('Error extracting departure time:', error);\n      return new Date().toISOString();\n    }\n  }\n  extractArrivalTime(itinerary) {\n    try {\n      return itinerary.legs && itinerary.legs[0] ? itinerary.legs[0].arrival || new Date().toISOString() : new Date().toISOString();\n    } catch (error) {\n      console.error('Error extracting arrival time:', error);\n      return new Date().toISOString();\n    }\n  }\n  extractDuration(itinerary) {\n    try {\n      return itinerary.legs && itinerary.legs[0] ? itinerary.legs[0].durationInMinutes || 0 : 0;\n    } catch (error) {\n      console.error('Error extracting duration:', error);\n      return 0;\n    }\n  }\n  extractAirline(itinerary) {\n    try {\n      return itinerary.legs && itinerary.legs[0] && itinerary.legs[0].carriers ? itinerary.legs[0].carriers.marketing[0].name || 'Unknown Airline' : 'Unknown Airline';\n    } catch (error) {\n      console.error('Error extracting airline:', error);\n      return 'Unknown Airline';\n    }\n  }\n  createDeepLink(origin, destination, departureDate) {\n    const formattedDate = new Date(departureDate).toISOString().split('T')[0];\n    return `https://www.skyscanner.com/transport/flights/${origin}/${destination}/${formattedDate}/`;\n  }\n}\nexport default new EfficientDealService();","map":{"version":3,"names":["skyscannerService","storageKeys","EfficientDealService","constructor","locationsCache","loadCachedLocations","recentSearches","Set","recentSearchesMaxSize","savedDeals","loadSavedDeals","cached","localStorage","getItem","LOCATIONS_CACHE","JSON","parse","error","console","saveCachedLocations","setItem","stringify","saved","SAVED_DEALS","saveDeal","deal","deals","isDuplicate","some","d","origin","destination","price","push","savedAt","Date","toISOString","removeSavedDeal","dealId","filteredDeals","filter","id","getSavedDeals","searchAirports","query","cacheKey","toLowerCase","cachedResults","results","locationAutocomplete","places","airports","map","place","code","iata","entityId","name","city","cityName","country","countryName","type","searchFlights","originCode","originId","destinationCode","destinationId","date","searchKey","flightData","searchOneWayFlights","processFlightData","data","destCode","originName","destName","itineraries","length","bestDeal","reduce","best","current","currentPrice","extractPrice","bestPrice","Infinity","departureTime","extractDepartureTime","arrivalTime","extractArrivalTime","duration","extractDuration","airline","extractAirline","now","destinationName","deep_link","createDeepLink","itinerary","amount","legs","departure","arrival","durationInMinutes","carriers","marketing","departureDate","formattedDate","split"],"sources":["C:/Users/juliu/Desktop/web/src/services/efficientDealService.js"],"sourcesContent":["// src/services/efficientDealService.js\r\n\r\nimport skyscannerService from './skyscannerService';\r\nimport { storageKeys } from '../constants/storageKeys';\r\n\r\nclass EfficientDealService {\r\n  constructor() {\r\n    // Initialize with an empty locations cache\r\n    this.locationsCache = {};\r\n    \r\n    // Load any previously cached locations from localStorage\r\n    this.loadCachedLocations();\r\n    \r\n    // Track recently searched routes\r\n    this.recentSearches = new Set();\r\n    this.recentSearchesMaxSize = 100;\r\n    \r\n    // Load saved deals\r\n    this.savedDeals = this.loadSavedDeals();\r\n  }\r\n  \r\n  loadCachedLocations() {\r\n    try {\r\n      const cached = localStorage.getItem(storageKeys.LOCATIONS_CACHE);\r\n      if (cached) {\r\n        this.locationsCache = JSON.parse(cached);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error loading cached locations:', error);\r\n      this.locationsCache = {};\r\n    }\r\n  }\r\n  \r\n  saveCachedLocations() {\r\n    try {\r\n      localStorage.setItem(storageKeys.LOCATIONS_CACHE, JSON.stringify(this.locationsCache));\r\n    } catch (error) {\r\n      console.error('Error saving cached locations:', error);\r\n    }\r\n  }\r\n  \r\n  loadSavedDeals() {\r\n    try {\r\n      const saved = localStorage.getItem(storageKeys.SAVED_DEALS);\r\n      return saved ? JSON.parse(saved) : [];\r\n    } catch (error) {\r\n      console.error('Error loading saved deals:', error);\r\n      return [];\r\n    }\r\n  }\r\n  \r\n  saveDeal(deal) {\r\n    try {\r\n      const deals = this.loadSavedDeals();\r\n      const isDuplicate = deals.some(d => \r\n        d.origin === deal.origin && \r\n        d.destination === deal.destination &&\r\n        d.price === deal.price\r\n      );\r\n      \r\n      if (!isDuplicate) {\r\n        deals.push({\r\n          ...deal,\r\n          savedAt: new Date().toISOString()\r\n        });\r\n        this.savedDeals = deals;\r\n        localStorage.setItem(storageKeys.SAVED_DEALS, JSON.stringify(deals));\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      console.error('Error saving deal:', error);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  removeSavedDeal(dealId) {\r\n    try {\r\n      const deals = this.loadSavedDeals();\r\n      const filteredDeals = deals.filter(deal => deal.id !== dealId);\r\n      this.savedDeals = filteredDeals;\r\n      localStorage.setItem(storageKeys.SAVED_DEALS, JSON.stringify(filteredDeals));\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error removing deal:', error);\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  getSavedDeals() {\r\n    return this.savedDeals;\r\n  }\r\n  \r\n  // Global airport search - allows searching ANY airport\r\n  async searchAirports(query) {\r\n    try {\r\n      // Check cache first\r\n      const cacheKey = `airport-search-${query.toLowerCase()}`;\r\n      const cachedResults = localStorage.getItem(cacheKey);\r\n      \r\n      if (cachedResults) {\r\n        return JSON.parse(cachedResults);\r\n      }\r\n      \r\n      // Not in cache, search via API\r\n      const results = await skyscannerService.locationAutocomplete(query);\r\n      \r\n      if (results && results.places) {\r\n        // Process and format results\r\n        const airports = results.places.map(place => ({\r\n          code: place.iata || place.entityId,\r\n          id: place.entityId || place.id,\r\n          name: place.name,\r\n          city: place.cityName || place.name,\r\n          country: place.countryName,\r\n          type: place.type // e.g., 'CITY', 'AIRPORT'\r\n        }));\r\n        \r\n        // Cache results for future use\r\n        localStorage.setItem(cacheKey, JSON.stringify(airports));\r\n        \r\n        return airports;\r\n      }\r\n      \r\n      return [];\r\n    } catch (error) {\r\n      console.error('Error searching airports:', error);\r\n      return [];\r\n    }\r\n  }\r\n  \r\n  // Search for flights between ANY two airports\r\n  async searchFlights(originCode, originId, destinationCode, destinationId, date = null) {\r\n    // Generate a unique search key\r\n    const searchKey = `${originCode}-${destinationCode}-${date || 'any'}`;\r\n    \r\n    try {\r\n      // Search for one-way flights\r\n      const flightData = await skyscannerService.searchOneWayFlights(\r\n        originCode, \r\n        destinationCode, \r\n        originId, \r\n        destinationId,\r\n        date\r\n      );\r\n      \r\n      return this.processFlightData(\r\n        flightData, \r\n        originCode, \r\n        destinationCode, \r\n        originCode, // Use codes as names if actual names not available\r\n        destinationCode\r\n      );\r\n    } catch (error) {\r\n      console.error(`Error searching flights for ${searchKey}:`, error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  // Process flight data (same as before)\r\n  processFlightData(data, originCode, destCode, originName, destName) {\r\n    if (!data || !data.itineraries || data.itineraries.length === 0) {\r\n      return null;\r\n    }\r\n    \r\n    // Find the best (lowest price) deal\r\n    const bestDeal = data.itineraries.reduce((best, current) => {\r\n      const currentPrice = this.extractPrice(current);\r\n      const bestPrice = best ? this.extractPrice(best) : Infinity;\r\n      \r\n      return currentPrice < bestPrice ? current : best;\r\n    }, null);\r\n    \r\n    if (!bestDeal) return null;\r\n    \r\n    const price = this.extractPrice(bestDeal);\r\n    const departureTime = this.extractDepartureTime(bestDeal);\r\n    const arrivalTime = this.extractArrivalTime(bestDeal);\r\n    const duration = this.extractDuration(bestDeal);\r\n    const airline = this.extractAirline(bestDeal);\r\n    \r\n    return {\r\n      id: `${originCode}-${destCode}-${Date.now()}`,\r\n      origin: originCode,\r\n      originName,\r\n      destination: destCode,\r\n      destinationName: destName,\r\n      price,\r\n      departureTime,\r\n      arrivalTime,\r\n      duration,\r\n      airline,\r\n      deep_link: this.createDeepLink(originCode, destCode, departureTime)\r\n    };\r\n  }\r\n  \r\n  // Extract methods remain the same\r\n  extractPrice(itinerary) {\r\n    try {\r\n      return itinerary.price ? itinerary.price.amount || 0 : 0;\r\n    } catch (error) {\r\n      console.error('Error extracting price:', error);\r\n      return 0;\r\n    }\r\n  }\r\n  \r\n  extractDepartureTime(itinerary) {\r\n    try {\r\n      return itinerary.legs && itinerary.legs[0] ? \r\n        itinerary.legs[0].departure || new Date().toISOString() : \r\n        new Date().toISOString();\r\n    } catch (error) {\r\n      console.error('Error extracting departure time:', error);\r\n      return new Date().toISOString();\r\n    }\r\n  }\r\n  \r\n  extractArrivalTime(itinerary) {\r\n    try {\r\n      return itinerary.legs && itinerary.legs[0] ? \r\n        itinerary.legs[0].arrival || new Date().toISOString() : \r\n        new Date().toISOString();\r\n    } catch (error) {\r\n      console.error('Error extracting arrival time:', error);\r\n      return new Date().toISOString();\r\n    }\r\n  }\r\n  \r\n  extractDuration(itinerary) {\r\n    try {\r\n      return itinerary.legs && itinerary.legs[0] ? \r\n        itinerary.legs[0].durationInMinutes || 0 : \r\n        0;\r\n    } catch (error) {\r\n      console.error('Error extracting duration:', error);\r\n      return 0;\r\n    }\r\n  }\r\n  \r\n  extractAirline(itinerary) {\r\n    try {\r\n      return itinerary.legs && itinerary.legs[0] && itinerary.legs[0].carriers ? \r\n        itinerary.legs[0].carriers.marketing[0].name || 'Unknown Airline' : \r\n        'Unknown Airline';\r\n    } catch (error) {\r\n      console.error('Error extracting airline:', error);\r\n      return 'Unknown Airline';\r\n    }\r\n  }\r\n  \r\n  createDeepLink(origin, destination, departureDate) {\r\n    const formattedDate = new Date(departureDate).toISOString().split('T')[0];\r\n    return `https://www.skyscanner.com/transport/flights/${origin}/${destination}/${formattedDate}/`;\r\n  }\r\n}\r\n\r\nexport default new EfficientDealService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}