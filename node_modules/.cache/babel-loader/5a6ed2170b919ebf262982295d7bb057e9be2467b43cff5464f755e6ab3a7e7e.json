{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\components\\\\UI\\\\AppSettingsWrapper.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { useSettings } from '../../context/SettingsContext';\nimport { applyThemeSettings, applyAccessibilitySettings } from '../../utils/settingsUtils';\n\n/**\r\n * Component that wraps the application and applies the current theme and settings\r\n * \r\n * @param {Object} props Component props\r\n * @param {React.ReactNode} props.children Child components\r\n * @returns {React.ReactNode} Wrapped children\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AppSettingsWrapper({\n  children\n}) {\n  _s();\n  const {\n    settings\n  } = useSettings();\n  // Use a ref to track whether settings have been applied\n  const settingsApplied = useRef(false);\n  // Use a ref to store the previous settings for comparison\n  const prevSettings = useRef(null);\n\n  // Apply settings whenever they change\n  useEffect(() => {\n    var _prevSettings$current, _settings$preferences;\n    if (!settings) return;\n\n    // Skip if settings haven't changed\n    if (prevSettings.current && JSON.stringify(prevSettings.current.appearance) === JSON.stringify(settings.appearance) && JSON.stringify(prevSettings.current.accessibility) === JSON.stringify(settings.accessibility) && ((_prevSettings$current = prevSettings.current.preferences) === null || _prevSettings$current === void 0 ? void 0 : _prevSettings$current.language) === ((_settings$preferences = settings.preferences) === null || _settings$preferences === void 0 ? void 0 : _settings$preferences.language)) {\n      return;\n    }\n\n    // Apply theme settings\n    applyThemeSettings(settings);\n\n    // Apply accessibility settings\n    applyAccessibilitySettings(settings);\n\n    // Add language attribute to the HTML tag\n    if (settings.preferences && settings.preferences.language) {\n      document.documentElement.setAttribute('lang', settings.preferences.language.split('-')[0]);\n    }\n\n    // Apply dark mode if enabled\n    if (settings.appearance && settings.appearance.darkMode) {\n      document.documentElement.classList.add('dark-mode');\n      document.body.classList.add('dark-mode');\n    } else {\n      document.documentElement.classList.remove('dark-mode');\n      document.body.classList.remove('dark-mode');\n    }\n\n    // Load the CSS file for dark mode and accessibility\n    if (!document.getElementById('accessibility-darkmode-css')) {\n      const link = document.createElement('link');\n      link.id = 'accessibility-darkmode-css';\n      link.rel = 'stylesheet';\n      link.href = '/accessibility-darkmode.css';\n      document.head.appendChild(link);\n    }\n\n    // Apply reduced motion based on user preference\n    if (settings.accessibility && settings.accessibility.reducedMotion) {\n      document.documentElement.classList.add('reduced-motion');\n    } else {\n      document.documentElement.classList.remove('reduced-motion');\n    }\n\n    // Apply high contrast mode\n    if (settings.accessibility && settings.accessibility.highContrast) {\n      document.documentElement.classList.add('high-contrast');\n    } else {\n      document.documentElement.classList.remove('high-contrast');\n    }\n\n    // Apply larger click targets\n    if (settings.accessibility && settings.accessibility.largerClickTargets) {\n      document.documentElement.classList.add('larger-targets');\n    } else {\n      document.documentElement.classList.remove('larger-targets');\n    }\n\n    // Apply custom text scaling\n    if (settings.accessibility && settings.accessibility.textScaling && settings.accessibility.textScaling !== 100) {\n      document.documentElement.style.setProperty('--text-scale-ratio', `${settings.accessibility.textScaling / 100}`);\n      document.documentElement.classList.add('custom-text-scaling');\n    } else {\n      document.documentElement.classList.remove('custom-text-scaling');\n      document.documentElement.style.removeProperty('--text-scale-ratio');\n    }\n\n    // Screen reader optimizations\n    if (settings.accessibility && settings.accessibility.screenReaderOptimized) {\n      document.documentElement.setAttribute('data-screen-reader-optimized', 'true');\n    } else {\n      document.documentElement.removeAttribute('data-screen-reader-optimized');\n    }\n\n    // Update the previous settings ref\n    prevSettings.current = JSON.parse(JSON.stringify(settings));\n\n    // Mark settings as applied\n    settingsApplied.current = true;\n  }, [settings]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n}\n_s(AppSettingsWrapper, \"dQ5fi1gL7Bzd6H4TVLncqjwGEvs=\", false, function () {\n  return [useSettings];\n});\n_c = AppSettingsWrapper;\nexport default AppSettingsWrapper;\nvar _c;\n$RefreshReg$(_c, \"AppSettingsWrapper\");","map":{"version":3,"names":["React","useEffect","useRef","useSettings","applyThemeSettings","applyAccessibilitySettings","jsxDEV","_jsxDEV","AppSettingsWrapper","children","_s","settings","settingsApplied","prevSettings","_prevSettings$current","_settings$preferences","current","JSON","stringify","appearance","accessibility","preferences","language","document","documentElement","setAttribute","split","darkMode","classList","add","body","remove","getElementById","link","createElement","id","rel","href","head","appendChild","reducedMotion","highContrast","largerClickTargets","textScaling","style","setProperty","removeProperty","screenReaderOptimized","removeAttribute","parse","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/components/UI/AppSettingsWrapper.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { useSettings } from '../../context/SettingsContext';\r\nimport { applyThemeSettings, applyAccessibilitySettings } from '../../utils/settingsUtils';\r\n\r\n/**\r\n * Component that wraps the application and applies the current theme and settings\r\n * \r\n * @param {Object} props Component props\r\n * @param {React.ReactNode} props.children Child components\r\n * @returns {React.ReactNode} Wrapped children\r\n */\r\nfunction AppSettingsWrapper({ children }) {\r\n  const { settings } = useSettings();\r\n  // Use a ref to track whether settings have been applied\r\n  const settingsApplied = useRef(false);\r\n  // Use a ref to store the previous settings for comparison\r\n  const prevSettings = useRef(null);\r\n  \r\n  // Apply settings whenever they change\r\n  useEffect(() => {\r\n    if (!settings) return;\r\n    \r\n    // Skip if settings haven't changed\r\n    if (prevSettings.current && \r\n        JSON.stringify(prevSettings.current.appearance) === JSON.stringify(settings.appearance) &&\r\n        JSON.stringify(prevSettings.current.accessibility) === JSON.stringify(settings.accessibility) &&\r\n        prevSettings.current.preferences?.language === settings.preferences?.language) {\r\n      return;\r\n    }\r\n    \r\n    // Apply theme settings\r\n    applyThemeSettings(settings);\r\n    \r\n    // Apply accessibility settings\r\n    applyAccessibilitySettings(settings);\r\n    \r\n    // Add language attribute to the HTML tag\r\n    if (settings.preferences && settings.preferences.language) {\r\n      document.documentElement.setAttribute('lang', settings.preferences.language.split('-')[0]);\r\n    }\r\n    \r\n    // Apply dark mode if enabled\r\n    if (settings.appearance && settings.appearance.darkMode) {\r\n      document.documentElement.classList.add('dark-mode');\r\n      document.body.classList.add('dark-mode');\r\n    } else {\r\n      document.documentElement.classList.remove('dark-mode');\r\n      document.body.classList.remove('dark-mode');\r\n    }\r\n    \r\n    // Load the CSS file for dark mode and accessibility\r\n    if (!document.getElementById('accessibility-darkmode-css')) {\r\n      const link = document.createElement('link');\r\n      link.id = 'accessibility-darkmode-css';\r\n      link.rel = 'stylesheet';\r\n      link.href = '/accessibility-darkmode.css';\r\n      document.head.appendChild(link);\r\n    }\r\n    \r\n    // Apply reduced motion based on user preference\r\n    if (settings.accessibility && settings.accessibility.reducedMotion) {\r\n      document.documentElement.classList.add('reduced-motion');\r\n    } else {\r\n      document.documentElement.classList.remove('reduced-motion');\r\n    }\r\n    \r\n    // Apply high contrast mode\r\n    if (settings.accessibility && settings.accessibility.highContrast) {\r\n      document.documentElement.classList.add('high-contrast');\r\n    } else {\r\n      document.documentElement.classList.remove('high-contrast');\r\n    }\r\n    \r\n    // Apply larger click targets\r\n    if (settings.accessibility && settings.accessibility.largerClickTargets) {\r\n      document.documentElement.classList.add('larger-targets');\r\n    } else {\r\n      document.documentElement.classList.remove('larger-targets');\r\n    }\r\n    \r\n    // Apply custom text scaling\r\n    if (settings.accessibility && settings.accessibility.textScaling && settings.accessibility.textScaling !== 100) {\r\n      document.documentElement.style.setProperty('--text-scale-ratio', `${settings.accessibility.textScaling / 100}`);\r\n      document.documentElement.classList.add('custom-text-scaling');\r\n    } else {\r\n      document.documentElement.classList.remove('custom-text-scaling');\r\n      document.documentElement.style.removeProperty('--text-scale-ratio');\r\n    }\r\n    \r\n    // Screen reader optimizations\r\n    if (settings.accessibility && settings.accessibility.screenReaderOptimized) {\r\n      document.documentElement.setAttribute('data-screen-reader-optimized', 'true');\r\n    } else {\r\n      document.documentElement.removeAttribute('data-screen-reader-optimized');\r\n    }\r\n    \r\n    // Update the previous settings ref\r\n    prevSettings.current = JSON.parse(JSON.stringify(settings));\r\n    \r\n    // Mark settings as applied\r\n    settingsApplied.current = true;\r\n    \r\n  }, [settings]);\r\n  \r\n  return (\r\n    <div className=\"app-container\">\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppSettingsWrapper;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}