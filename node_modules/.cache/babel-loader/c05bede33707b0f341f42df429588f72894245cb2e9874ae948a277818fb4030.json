{"ast":null,"code":"import { LOCAL_STORAGE_KEYS } from '../constants/storageKeys';\n\n// Sample data for development/demo purposes\nconst SAMPLE_AIRPORTS = [{\n  code: 'JFK',\n  name: 'John F. Kennedy International Airport',\n  city: 'New York',\n  country: 'United States',\n  type: 'airport'\n}, {\n  code: 'LHR',\n  name: 'Heathrow Airport',\n  city: 'London',\n  country: 'United Kingdom',\n  type: 'airport'\n}, {\n  code: 'CDG',\n  name: 'Charles de Gaulle Airport',\n  city: 'Paris',\n  country: 'France',\n  type: 'airport'\n}, {\n  code: 'FRA',\n  name: 'Frankfurt Airport',\n  city: 'Frankfurt',\n  country: 'Germany',\n  type: 'airport'\n}, {\n  code: 'AMS',\n  name: 'Amsterdam Airport Schiphol',\n  city: 'Amsterdam',\n  country: 'Netherlands',\n  type: 'airport'\n}, {\n  code: 'FCO',\n  name: 'Leonardo da Vinci International Airport',\n  city: 'Rome',\n  country: 'Italy',\n  type: 'airport'\n}, {\n  code: 'MAD',\n  name: 'Adolfo Suárez Madrid–Barajas Airport',\n  city: 'Madrid',\n  country: 'Spain',\n  type: 'airport'\n}, {\n  code: 'BCN',\n  name: 'Barcelona–El Prat Airport',\n  city: 'Barcelona',\n  country: 'Spain',\n  type: 'airport'\n}, {\n  code: 'DXB',\n  name: 'Dubai International Airport',\n  city: 'Dubai',\n  country: 'United Arab Emirates',\n  type: 'airport'\n}, {\n  code: 'SIN',\n  name: 'Singapore Changi Airport',\n  city: 'Singapore',\n  country: 'Singapore',\n  type: 'airport'\n}, {\n  code: 'HND',\n  name: 'Tokyo Haneda Airport',\n  city: 'Tokyo',\n  country: 'Japan',\n  type: 'airport'\n}, {\n  code: 'SYD',\n  name: 'Sydney Airport',\n  city: 'Sydney',\n  country: 'Australia',\n  type: 'airport'\n}];\n\n// Sample flight data generator (for development purposes)\nconst generateSampleFlights = searchParams => {\n  const {\n    origin,\n    destination,\n    departureDate,\n    returnDate,\n    nonStop\n  } = searchParams;\n  if (!origin || !destination || !departureDate) {\n    return [];\n  }\n  const airlines = ['Delta Airlines', 'American Airlines', 'United Airlines', 'British Airways', 'Air France', 'Lufthansa', 'Emirates', 'Singapore Airlines'];\n  const flights = [];\n\n  // Generate a random number of flights\n  const numFlights = Math.floor(Math.random() * 20) + 5; // 5-25 flights\n\n  for (let i = 0; i < numFlights; i++) {\n    const airline = airlines[Math.floor(Math.random() * airlines.length)];\n    const flightNumber = `${airline.substring(0, 2).toUpperCase()}${Math.floor(Math.random() * 1000) + 100}`;\n\n    // Random departure and arrival times\n    const departureTime = new Date(departureDate);\n    departureTime.setHours(Math.floor(Math.random() * 24));\n    departureTime.setMinutes(Math.floor(Math.random() * 12) * 5); // Round to nearest 5 minutes\n\n    const durationMinutes = Math.floor(Math.random() * 600) + 120; // 2-12 hours\n\n    const arrivalTime = new Date(departureTime);\n    arrivalTime.setMinutes(arrivalTime.getMinutes() + durationMinutes);\n\n    // Random number of stops\n    const stops = nonStop ? 0 : Math.min(Math.floor(Math.random() * 3), 2);\n\n    // Random layover info if there are stops\n    const layovers = [];\n    const stopAirports = [];\n    if (stops > 0) {\n      // Get random airports for layovers\n      const availableAirports = SAMPLE_AIRPORTS.filter(airport => airport.code !== origin && airport.code !== destination);\n      for (let j = 0; j < stops; j++) {\n        const randomAirportIndex = Math.floor(Math.random() * availableAirports.length);\n        const layoverAirport = availableAirports[randomAirportIndex];\n        stopAirports.push(layoverAirport.code);\n        layovers.push({\n          airport: layoverAirport.code,\n          duration: Math.floor(Math.random() * 180) + 45,\n          // 45-225 minutes\n          terminal: `T${Math.floor(Math.random() * 5) + 1}`\n        });\n\n        // Remove this airport from available airports to avoid duplicates\n        availableAirports.splice(randomAirportIndex, 1);\n      }\n    }\n\n    // Random price\n    const basePrice = Math.floor(Math.random() * 800) + 200; // $200-$1000\n    const taxes = Math.floor(basePrice * 0.2); // 20% taxes and fees\n    const price = basePrice + taxes;\n\n    // Baggage allowance\n    const baggage = {\n      carryOn: Math.random() > 0.2,\n      // 80% chance of carry-on included\n      checked: Math.random() > 0.5,\n      // 50% chance of checked baggage included\n      checkedAmount: Math.random() > 0.7 ? 2 : 1 // 30% chance of 2 bags, otherwise 1\n    };\n\n    // Generate a flight\n    flights.push({\n      id: `${origin}-${destination}-${i}`,\n      flightNumber,\n      airline,\n      originCode: origin,\n      destinationCode: destination,\n      departureTime: departureTime.toISOString(),\n      arrivalTime: arrivalTime.toISOString(),\n      durationMinutes,\n      stops,\n      stopAirports,\n      layovers,\n      price,\n      basePrice,\n      baggage,\n      cabinClass: searchParams.cabinClass || 'economy',\n      aircraft: ['Boeing 737', 'Boeing 777', 'Airbus A320', 'Airbus A380'][Math.floor(Math.random() * 4)],\n      distance: Math.floor(Math.random() * 5000) + 500 // 500-5500 km\n    });\n  }\n  return flights;\n};\n\n// In-memory storage for price alerts (for demo purposes)\nlet priceAlerts = [];\n\n// Initialize price alerts from localStorage if available\ntry {\n  const savedAlerts = localStorage.getItem(LOCAL_STORAGE_KEYS.PRICE_ALERTS);\n  if (savedAlerts) {\n    priceAlerts = JSON.parse(savedAlerts);\n  }\n} catch (error) {\n  console.error('Failed to load price alerts from localStorage:', error);\n}\n\n/**\r\n * Service for handling flight-related API calls\r\n */\nconst FlightService = {\n  /**\r\n   * Search for airports based on a query\r\n   * @param {string} query - The search query (city or airport name)\r\n   * @returns {Promise<Array>} - Array of matching airports\r\n   */\n  searchAirports: async query => {\n    // In a real app, this would be an API call to a flight search service\n    return new Promise(resolve => {\n      setTimeout(() => {\n        if (!query || query.length < 2) {\n          resolve([]);\n          return;\n        }\n        const lowerQuery = query.toLowerCase();\n        const results = SAMPLE_AIRPORTS.filter(airport => airport.code.toLowerCase().includes(lowerQuery) || airport.name.toLowerCase().includes(lowerQuery) || airport.city.toLowerCase().includes(lowerQuery) || airport.country.toLowerCase().includes(lowerQuery));\n        resolve(results);\n      }, 300); // Simulate network delay\n    });\n  },\n  /**\r\n   * Get airport details by IATA code\r\n   * @param {string} code - The airport IATA code\r\n   * @returns {Promise<Object|null>} - Airport details or null if not found\r\n   */\n  getAirportByCode: async code => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const airport = SAMPLE_AIRPORTS.find(airport => airport.code === code);\n        resolve(airport || null);\n      }, 100);\n    });\n  },\n  /**\r\n   * Search for flights based on search parameters\r\n   * @param {Object} searchParams - The search parameters\r\n   * @returns {Promise<Array>} - Array of matching flights\r\n   */\n  searchFlights: async searchParams => {\n    // In a real app, this would be an API call to a flight search service\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const flights = generateSampleFlights(searchParams);\n        resolve(flights);\n      }, 1500); // Simulate network delay\n    });\n  },\n  /**\r\n   * Save a price alert for a flight\r\n   * @param {Object} alertData - The alert configuration\r\n   * @returns {Promise<Object>} - The saved alert with ID\r\n   */\n  savePriceAlert: async alertData => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const newAlert = {\n          ...alertData,\n          id: `alert-${Date.now()}`,\n          createdAt: new Date().toISOString(),\n          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days\n        };\n        priceAlerts.push(newAlert);\n\n        // Save to localStorage for persistence\n        try {\n          localStorage.setItem(LOCAL_STORAGE_KEYS.PRICE_ALERTS, JSON.stringify(priceAlerts));\n        } catch (error) {\n          console.error('Failed to save price alerts to localStorage:', error);\n        }\n        resolve(newAlert);\n      }, 500);\n    });\n  },\n  /**\r\n   * Get all price alerts for a user\r\n   * @param {string} userId - The user ID\r\n   * @returns {Promise<Array>} - Array of price alerts\r\n   */\n  getPriceAlerts: async userId => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const userAlerts = priceAlerts.filter(alert => alert.user === userId);\n        resolve(userAlerts);\n      }, 300);\n    });\n  },\n  /**\r\n   * Delete a price alert\r\n   * @param {string} alertId - The alert ID\r\n   * @returns {Promise<boolean>} - Success status\r\n   */\n  deletePriceAlert: async alertId => {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const initialLength = priceAlerts.length;\n        priceAlerts = priceAlerts.filter(alert => alert.id !== alertId);\n\n        // Save to localStorage for persistence\n        try {\n          localStorage.setItem(LOCAL_STORAGE_KEYS.PRICE_ALERTS, JSON.stringify(priceAlerts));\n        } catch (error) {\n          console.error('Failed to save price alerts to localStorage:', error);\n        }\n        resolve(priceAlerts.length < initialLength);\n      }, 300);\n    });\n  }\n};\nexport default FlightService;","map":{"version":3,"names":["LOCAL_STORAGE_KEYS","SAMPLE_AIRPORTS","code","name","city","country","type","generateSampleFlights","searchParams","origin","destination","departureDate","returnDate","nonStop","airlines","flights","numFlights","Math","floor","random","i","airline","length","flightNumber","substring","toUpperCase","departureTime","Date","setHours","setMinutes","durationMinutes","arrivalTime","getMinutes","stops","min","layovers","stopAirports","availableAirports","filter","airport","j","randomAirportIndex","layoverAirport","push","duration","terminal","splice","basePrice","taxes","price","baggage","carryOn","checked","checkedAmount","id","originCode","destinationCode","toISOString","cabinClass","aircraft","distance","priceAlerts","savedAlerts","localStorage","getItem","PRICE_ALERTS","JSON","parse","error","console","FlightService","searchAirports","query","Promise","resolve","setTimeout","lowerQuery","toLowerCase","results","includes","getAirportByCode","find","searchFlights","savePriceAlert","alertData","newAlert","now","createdAt","expiresAt","setItem","stringify","getPriceAlerts","userId","userAlerts","alert","user","deletePriceAlert","alertId","initialLength"],"sources":["C:/Users/juliu/Desktop/web/src/services/FlightService.js"],"sourcesContent":["import { LOCAL_STORAGE_KEYS } from '../constants/storageKeys';\r\n\r\n// Sample data for development/demo purposes\r\nconst SAMPLE_AIRPORTS = [\r\n  { code: 'JFK', name: 'John F. Kennedy International Airport', city: 'New York', country: 'United States', type: 'airport' },\r\n  { code: 'LHR', name: 'Heathrow Airport', city: 'London', country: 'United Kingdom', type: 'airport' },\r\n  { code: 'CDG', name: 'Charles de Gaulle Airport', city: 'Paris', country: 'France', type: 'airport' },\r\n  { code: 'FRA', name: 'Frankfurt Airport', city: 'Frankfurt', country: 'Germany', type: 'airport' },\r\n  { code: 'AMS', name: 'Amsterdam Airport Schiphol', city: 'Amsterdam', country: 'Netherlands', type: 'airport' },\r\n  { code: 'FCO', name: 'Leonardo da Vinci International Airport', city: 'Rome', country: 'Italy', type: 'airport' },\r\n  { code: 'MAD', name: 'Adolfo Suárez Madrid–Barajas Airport', city: 'Madrid', country: 'Spain', type: 'airport' },\r\n  { code: 'BCN', name: 'Barcelona–El Prat Airport', city: 'Barcelona', country: 'Spain', type: 'airport' },\r\n  { code: 'DXB', name: 'Dubai International Airport', city: 'Dubai', country: 'United Arab Emirates', type: 'airport' },\r\n  { code: 'SIN', name: 'Singapore Changi Airport', city: 'Singapore', country: 'Singapore', type: 'airport' },\r\n  { code: 'HND', name: 'Tokyo Haneda Airport', city: 'Tokyo', country: 'Japan', type: 'airport' },\r\n  { code: 'SYD', name: 'Sydney Airport', city: 'Sydney', country: 'Australia', type: 'airport' },\r\n];\r\n\r\n// Sample flight data generator (for development purposes)\r\nconst generateSampleFlights = (searchParams) => {\r\n  const { origin, destination, departureDate, returnDate, nonStop } = searchParams;\r\n  \r\n  if (!origin || !destination || !departureDate) {\r\n    return [];\r\n  }\r\n  \r\n  const airlines = ['Delta Airlines', 'American Airlines', 'United Airlines', 'British Airways', 'Air France', 'Lufthansa', 'Emirates', 'Singapore Airlines'];\r\n  const flights = [];\r\n  \r\n  // Generate a random number of flights\r\n  const numFlights = Math.floor(Math.random() * 20) + 5; // 5-25 flights\r\n  \r\n  for (let i = 0; i < numFlights; i++) {\r\n    const airline = airlines[Math.floor(Math.random() * airlines.length)];\r\n    const flightNumber = `${airline.substring(0, 2).toUpperCase()}${Math.floor(Math.random() * 1000) + 100}`;\r\n    \r\n    // Random departure and arrival times\r\n    const departureTime = new Date(departureDate);\r\n    departureTime.setHours(Math.floor(Math.random() * 24));\r\n    departureTime.setMinutes(Math.floor(Math.random() * 12) * 5); // Round to nearest 5 minutes\r\n    \r\n    const durationMinutes = Math.floor(Math.random() * 600) + 120; // 2-12 hours\r\n    \r\n    const arrivalTime = new Date(departureTime);\r\n    arrivalTime.setMinutes(arrivalTime.getMinutes() + durationMinutes);\r\n    \r\n    // Random number of stops\r\n    const stops = nonStop ? 0 : Math.min(Math.floor(Math.random() * 3), 2);\r\n    \r\n    // Random layover info if there are stops\r\n    const layovers = [];\r\n    const stopAirports = [];\r\n    \r\n    if (stops > 0) {\r\n      // Get random airports for layovers\r\n      const availableAirports = SAMPLE_AIRPORTS.filter(airport => \r\n        airport.code !== origin && airport.code !== destination\r\n      );\r\n      \r\n      for (let j = 0; j < stops; j++) {\r\n        const randomAirportIndex = Math.floor(Math.random() * availableAirports.length);\r\n        const layoverAirport = availableAirports[randomAirportIndex];\r\n        stopAirports.push(layoverAirport.code);\r\n        \r\n        layovers.push({\r\n          airport: layoverAirport.code,\r\n          duration: Math.floor(Math.random() * 180) + 45, // 45-225 minutes\r\n          terminal: `T${Math.floor(Math.random() * 5) + 1}`\r\n        });\r\n        \r\n        // Remove this airport from available airports to avoid duplicates\r\n        availableAirports.splice(randomAirportIndex, 1);\r\n      }\r\n    }\r\n    \r\n    // Random price\r\n    const basePrice = Math.floor(Math.random() * 800) + 200; // $200-$1000\r\n    const taxes = Math.floor(basePrice * 0.2); // 20% taxes and fees\r\n    const price = basePrice + taxes;\r\n    \r\n    // Baggage allowance\r\n    const baggage = {\r\n      carryOn: Math.random() > 0.2, // 80% chance of carry-on included\r\n      checked: Math.random() > 0.5, // 50% chance of checked baggage included\r\n      checkedAmount: Math.random() > 0.7 ? 2 : 1 // 30% chance of 2 bags, otherwise 1\r\n    };\r\n    \r\n    // Generate a flight\r\n    flights.push({\r\n      id: `${origin}-${destination}-${i}`,\r\n      flightNumber,\r\n      airline,\r\n      originCode: origin,\r\n      destinationCode: destination,\r\n      departureTime: departureTime.toISOString(),\r\n      arrivalTime: arrivalTime.toISOString(),\r\n      durationMinutes,\r\n      stops,\r\n      stopAirports,\r\n      layovers,\r\n      price,\r\n      basePrice,\r\n      baggage,\r\n      cabinClass: searchParams.cabinClass || 'economy',\r\n      aircraft: ['Boeing 737', 'Boeing 777', 'Airbus A320', 'Airbus A380'][Math.floor(Math.random() * 4)],\r\n      distance: Math.floor(Math.random() * 5000) + 500 // 500-5500 km\r\n    });\r\n  }\r\n  \r\n  return flights;\r\n};\r\n\r\n// In-memory storage for price alerts (for demo purposes)\r\nlet priceAlerts = [];\r\n\r\n// Initialize price alerts from localStorage if available\r\ntry {\r\n  const savedAlerts = localStorage.getItem(LOCAL_STORAGE_KEYS.PRICE_ALERTS);\r\n  if (savedAlerts) {\r\n    priceAlerts = JSON.parse(savedAlerts);\r\n  }\r\n} catch (error) {\r\n  console.error('Failed to load price alerts from localStorage:', error);\r\n}\r\n\r\n/**\r\n * Service for handling flight-related API calls\r\n */\r\nconst FlightService = {\r\n  /**\r\n   * Search for airports based on a query\r\n   * @param {string} query - The search query (city or airport name)\r\n   * @returns {Promise<Array>} - Array of matching airports\r\n   */\r\n  searchAirports: async (query) => {\r\n    // In a real app, this would be an API call to a flight search service\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        if (!query || query.length < 2) {\r\n          resolve([]);\r\n          return;\r\n        }\r\n        \r\n        const lowerQuery = query.toLowerCase();\r\n        const results = SAMPLE_AIRPORTS.filter(airport => \r\n          airport.code.toLowerCase().includes(lowerQuery) ||\r\n          airport.name.toLowerCase().includes(lowerQuery) ||\r\n          airport.city.toLowerCase().includes(lowerQuery) ||\r\n          airport.country.toLowerCase().includes(lowerQuery)\r\n        );\r\n        \r\n        resolve(results);\r\n      }, 300); // Simulate network delay\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Get airport details by IATA code\r\n   * @param {string} code - The airport IATA code\r\n   * @returns {Promise<Object|null>} - Airport details or null if not found\r\n   */\r\n  getAirportByCode: async (code) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const airport = SAMPLE_AIRPORTS.find(airport => airport.code === code);\r\n        resolve(airport || null);\r\n      }, 100);\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Search for flights based on search parameters\r\n   * @param {Object} searchParams - The search parameters\r\n   * @returns {Promise<Array>} - Array of matching flights\r\n   */\r\n  searchFlights: async (searchParams) => {\r\n    // In a real app, this would be an API call to a flight search service\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const flights = generateSampleFlights(searchParams);\r\n        resolve(flights);\r\n      }, 1500); // Simulate network delay\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Save a price alert for a flight\r\n   * @param {Object} alertData - The alert configuration\r\n   * @returns {Promise<Object>} - The saved alert with ID\r\n   */\r\n  savePriceAlert: async (alertData) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const newAlert = {\r\n          ...alertData,\r\n          id: `alert-${Date.now()}`,\r\n          createdAt: new Date().toISOString(),\r\n          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString() // 30 days\r\n        };\r\n        \r\n        priceAlerts.push(newAlert);\r\n        \r\n        // Save to localStorage for persistence\r\n        try {\r\n          localStorage.setItem(LOCAL_STORAGE_KEYS.PRICE_ALERTS, JSON.stringify(priceAlerts));\r\n        } catch (error) {\r\n          console.error('Failed to save price alerts to localStorage:', error);\r\n        }\r\n        \r\n        resolve(newAlert);\r\n      }, 500);\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Get all price alerts for a user\r\n   * @param {string} userId - The user ID\r\n   * @returns {Promise<Array>} - Array of price alerts\r\n   */\r\n  getPriceAlerts: async (userId) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const userAlerts = priceAlerts.filter(alert => alert.user === userId);\r\n        resolve(userAlerts);\r\n      }, 300);\r\n    });\r\n  },\r\n  \r\n  /**\r\n   * Delete a price alert\r\n   * @param {string} alertId - The alert ID\r\n   * @returns {Promise<boolean>} - Success status\r\n   */\r\n  deletePriceAlert: async (alertId) => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const initialLength = priceAlerts.length;\r\n        priceAlerts = priceAlerts.filter(alert => alert.id !== alertId);\r\n        \r\n        // Save to localStorage for persistence\r\n        try {\r\n          localStorage.setItem(LOCAL_STORAGE_KEYS.PRICE_ALERTS, JSON.stringify(priceAlerts));\r\n        } catch (error) {\r\n          console.error('Failed to save price alerts to localStorage:', error);\r\n        }\r\n        \r\n        resolve(priceAlerts.length < initialLength);\r\n      }, 300);\r\n    });\r\n  }\r\n};\r\n\r\nexport default FlightService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}