{"ast":null,"code":"/**\r\n * Travel Advisory API Service\r\n * Provides travel safety information from the Travel-Advisory.info API\r\n */\n\n// Base API URL\nconst TRAVEL_ADVISORY_API_BASE = 'https://www.travel-advisory.info/api';\n\n/**\r\n * Get travel advisory information for all countries\r\n * \r\n * @returns {Promise<Object>} Promise that resolves to travel advisory data\r\n */\nexport const getAllTravelAdvisories = async () => {\n  try {\n    const response = await fetch(`${TRAVEL_ADVISORY_API_BASE}?api=true`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch travel advisories: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    if (data.api_status.request.code !== 200) {\n      throw new Error(`API error: ${data.api_status.request.code}`);\n    }\n    return data.data;\n  } catch (error) {\n    console.error('Error fetching travel advisories:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get travel advisory information for a specific country\r\n * \r\n * @param {string} countryCode ISO 2-letter country code (e.g., 'US', 'GB')\r\n * @returns {Promise<Object>} Promise that resolves to travel advisory data for the country\r\n */\nexport const getCountryTravelAdvisory = async countryCode => {\n  if (!countryCode) {\n    throw new Error('Country code is required');\n  }\n  try {\n    const response = await fetch(`${TRAVEL_ADVISORY_API_BASE}?countrycode=${countryCode.toUpperCase()}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch travel advisory for ${countryCode}: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    if (data.api_status.request.code !== 200) {\n      throw new Error(`API error: ${data.api_status.request.code}`);\n    }\n    return data.data[countryCode.toUpperCase()];\n  } catch (error) {\n    console.error(`Error fetching travel advisory for ${countryCode}:`, error);\n    throw error;\n  }\n};\n\n/**\r\n * Get travel advisory information for a destination (city or country)\r\n * \r\n * @param {string} destination Destination name (city or country)\r\n * @returns {Promise<Object>} Promise that resolves to travel advisory data\r\n */\nexport const getDestinationTravelAdvisory = async destination => {\n  if (!destination) {\n    throw new Error('Destination is required');\n  }\n  try {\n    // First, try to get the country code from the destination\n    const countryCode = await getCountryCodeFromDestination(destination);\n    if (countryCode) {\n      // If we have a country code, get the advisory for that country\n      return await getCountryTravelAdvisory(countryCode);\n    } else {\n      // If we couldn't get a country code, fetch all advisories and try to match by name\n      const allAdvisories = await getAllTravelAdvisories();\n\n      // Find a country that matches the destination name\n      const matchingCountry = Object.values(allAdvisories).find(country => country.name.toLowerCase() === destination.toLowerCase());\n      if (matchingCountry) {\n        return matchingCountry;\n      }\n\n      // If no exact match, try to find a partial match\n      const partialMatch = Object.values(allAdvisories).find(country => country.name.toLowerCase().includes(destination.toLowerCase()) || destination.toLowerCase().includes(country.name.toLowerCase()));\n      if (partialMatch) {\n        return partialMatch;\n      }\n\n      // If no match found, return a default advisory\n      return createDefaultAdvisory(destination);\n    }\n  } catch (error) {\n    console.error(`Error fetching travel advisory for ${destination}:`, error);\n\n    // Return a default advisory in case of error\n    return createDefaultAdvisory(destination);\n  }\n};\n\n/**\r\n * Convert a score to a risk level\r\n * \r\n * @param {number} score Advisory score (1-5)\r\n * @returns {string} Risk level (Low, Medium, High, Extreme)\r\n */\nexport const getRiskLevel = score => {\n  if (score <= 2) {\n    return 'Low';\n  } else if (score <= 3.5) {\n    return 'Medium';\n  } else if (score <= 4.5) {\n    return 'High';\n  } else {\n    return 'Extreme';\n  }\n};\n\n/**\r\n * Get travel safety tips based on risk level\r\n * \r\n * @param {string} riskLevel Risk level (Low, Medium, High, Extreme)\r\n * @returns {Array<string>} Array of safety tips\r\n */\nexport const getSafetyTips = riskLevel => {\n  const commonTips = ['Register with your country\\'s embassy or consulate before traveling', 'Keep copies of important documents like passport and visa', 'Have emergency contacts readily available', 'Purchase travel insurance that covers medical evacuation'];\n  const riskSpecificTips = {\n    'Low': ['Follow standard safety precautions as you would at home', 'Be aware of your surroundings in tourist areas', 'Keep valuables secure and out of sight'],\n    'Medium': ['Avoid demonstrations and large gatherings', 'Use reputable transportation services', 'Stay in well-reviewed accommodations', 'Keep family informed of your travel plans'],\n    'High': ['Reconsider non-essential travel to this destination', 'Maintain a low profile and avoid displaying wealth', 'Stay in secure accommodations with good safety measures', 'Have an exit strategy in case of emergencies', 'Check in regularly with family or friends'],\n    'Extreme': ['Avoid all travel to this destination if possible', 'If you must travel, hire local security services if appropriate', 'Stay in contact with your embassy or consulate', 'Have emergency evacuation plans ready', 'Follow all security protocols advised by local authorities']\n  };\n  return [...commonTips, ...(riskSpecificTips[riskLevel] || [])];\n};\n\n// Helper functions\n\n/**\r\n * Get country code from destination name using geocoding\r\n * \r\n * @param {string} destination Destination name\r\n * @returns {Promise<string|null>} Promise that resolves to country code or null\r\n */\nconst getCountryCodeFromDestination = async destination => {\n  try {\n    var _data$0$address, _data$0$address$count;\n    // Use Nominatim (OpenStreetMap) for geocoding\n    const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(destination)}&format=json&limit=1`);\n    if (!response.ok) {\n      throw new Error(`Geocoding failed: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    if (data.length === 0) {\n      return null;\n    }\n\n    // Extract country code\n    return ((_data$0$address = data[0].address) === null || _data$0$address === void 0 ? void 0 : (_data$0$address$count = _data$0$address.country_code) === null || _data$0$address$count === void 0 ? void 0 : _data$0$address$count.toUpperCase()) || null;\n  } catch (error) {\n    console.error(`Error getting country code for ${destination}:`, error);\n    return null;\n  }\n};\n\n/**\r\n * Create a default travel advisory for when API data is unavailable\r\n * \r\n * @param {string} destination Destination name\r\n * @returns {Object} Default advisory object\r\n */\nconst createDefaultAdvisory = destination => {\n  return {\n    name: destination,\n    iso_alpha2: 'XX',\n    continent: 'Unknown',\n    advisory: {\n      score: 0,\n      // Unknown risk\n      sources_active: 0,\n      message: 'No specific travel advisory information is available for this destination.',\n      updated: new Date().toISOString(),\n      source: 'TravelEase (Default)'\n    },\n    risk_level: 'Unknown',\n    safety_tips: ['Research local conditions before traveling', 'Register with your embassy or consulate', 'Purchase comprehensive travel insurance', 'Keep copies of important documents', 'Stay informed about local news and developments']\n  };\n};","map":{"version":3,"names":["TRAVEL_ADVISORY_API_BASE","getAllTravelAdvisories","response","fetch","ok","Error","status","statusText","data","json","api_status","request","code","error","console","getCountryTravelAdvisory","countryCode","toUpperCase","getDestinationTravelAdvisory","destination","getCountryCodeFromDestination","allAdvisories","matchingCountry","Object","values","find","country","name","toLowerCase","partialMatch","includes","createDefaultAdvisory","getRiskLevel","score","getSafetyTips","riskLevel","commonTips","riskSpecificTips","_data$0$address","_data$0$address$count","encodeURIComponent","length","address","country_code","iso_alpha2","continent","advisory","sources_active","message","updated","Date","toISOString","source","risk_level","safety_tips"],"sources":["C:/Users/juliu/Desktop/web/src/services/travelAdvisoryService.js"],"sourcesContent":["/**\r\n * Travel Advisory API Service\r\n * Provides travel safety information from the Travel-Advisory.info API\r\n */\r\n\r\n// Base API URL\r\nconst TRAVEL_ADVISORY_API_BASE = 'https://www.travel-advisory.info/api';\r\n\r\n/**\r\n * Get travel advisory information for all countries\r\n * \r\n * @returns {Promise<Object>} Promise that resolves to travel advisory data\r\n */\r\nexport const getAllTravelAdvisories = async () => {\r\n  try {\r\n    const response = await fetch(`${TRAVEL_ADVISORY_API_BASE}?api=true`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch travel advisories: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (data.api_status.request.code !== 200) {\r\n      throw new Error(`API error: ${data.api_status.request.code}`);\r\n    }\r\n    \r\n    return data.data;\r\n  } catch (error) {\r\n    console.error('Error fetching travel advisories:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get travel advisory information for a specific country\r\n * \r\n * @param {string} countryCode ISO 2-letter country code (e.g., 'US', 'GB')\r\n * @returns {Promise<Object>} Promise that resolves to travel advisory data for the country\r\n */\r\nexport const getCountryTravelAdvisory = async (countryCode) => {\r\n  if (!countryCode) {\r\n    throw new Error('Country code is required');\r\n  }\r\n  \r\n  try {\r\n    const response = await fetch(`${TRAVEL_ADVISORY_API_BASE}?countrycode=${countryCode.toUpperCase()}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch travel advisory for ${countryCode}: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (data.api_status.request.code !== 200) {\r\n      throw new Error(`API error: ${data.api_status.request.code}`);\r\n    }\r\n    \r\n    return data.data[countryCode.toUpperCase()];\r\n  } catch (error) {\r\n    console.error(`Error fetching travel advisory for ${countryCode}:`, error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get travel advisory information for a destination (city or country)\r\n * \r\n * @param {string} destination Destination name (city or country)\r\n * @returns {Promise<Object>} Promise that resolves to travel advisory data\r\n */\r\nexport const getDestinationTravelAdvisory = async (destination) => {\r\n  if (!destination) {\r\n    throw new Error('Destination is required');\r\n  }\r\n  \r\n  try {\r\n    // First, try to get the country code from the destination\r\n    const countryCode = await getCountryCodeFromDestination(destination);\r\n    \r\n    if (countryCode) {\r\n      // If we have a country code, get the advisory for that country\r\n      return await getCountryTravelAdvisory(countryCode);\r\n    } else {\r\n      // If we couldn't get a country code, fetch all advisories and try to match by name\r\n      const allAdvisories = await getAllTravelAdvisories();\r\n      \r\n      // Find a country that matches the destination name\r\n      const matchingCountry = Object.values(allAdvisories).find(country => \r\n        country.name.toLowerCase() === destination.toLowerCase()\r\n      );\r\n      \r\n      if (matchingCountry) {\r\n        return matchingCountry;\r\n      }\r\n      \r\n      // If no exact match, try to find a partial match\r\n      const partialMatch = Object.values(allAdvisories).find(country => \r\n        country.name.toLowerCase().includes(destination.toLowerCase()) ||\r\n        destination.toLowerCase().includes(country.name.toLowerCase())\r\n      );\r\n      \r\n      if (partialMatch) {\r\n        return partialMatch;\r\n      }\r\n      \r\n      // If no match found, return a default advisory\r\n      return createDefaultAdvisory(destination);\r\n    }\r\n  } catch (error) {\r\n    console.error(`Error fetching travel advisory for ${destination}:`, error);\r\n    \r\n    // Return a default advisory in case of error\r\n    return createDefaultAdvisory(destination);\r\n  }\r\n};\r\n\r\n/**\r\n * Convert a score to a risk level\r\n * \r\n * @param {number} score Advisory score (1-5)\r\n * @returns {string} Risk level (Low, Medium, High, Extreme)\r\n */\r\nexport const getRiskLevel = (score) => {\r\n  if (score <= 2) {\r\n    return 'Low';\r\n  } else if (score <= 3.5) {\r\n    return 'Medium';\r\n  } else if (score <= 4.5) {\r\n    return 'High';\r\n  } else {\r\n    return 'Extreme';\r\n  }\r\n};\r\n\r\n/**\r\n * Get travel safety tips based on risk level\r\n * \r\n * @param {string} riskLevel Risk level (Low, Medium, High, Extreme)\r\n * @returns {Array<string>} Array of safety tips\r\n */\r\nexport const getSafetyTips = (riskLevel) => {\r\n  const commonTips = [\r\n    'Register with your country\\'s embassy or consulate before traveling',\r\n    'Keep copies of important documents like passport and visa',\r\n    'Have emergency contacts readily available',\r\n    'Purchase travel insurance that covers medical evacuation'\r\n  ];\r\n  \r\n  const riskSpecificTips = {\r\n    'Low': [\r\n      'Follow standard safety precautions as you would at home',\r\n      'Be aware of your surroundings in tourist areas',\r\n      'Keep valuables secure and out of sight'\r\n    ],\r\n    'Medium': [\r\n      'Avoid demonstrations and large gatherings',\r\n      'Use reputable transportation services',\r\n      'Stay in well-reviewed accommodations',\r\n      'Keep family informed of your travel plans'\r\n    ],\r\n    'High': [\r\n      'Reconsider non-essential travel to this destination',\r\n      'Maintain a low profile and avoid displaying wealth',\r\n      'Stay in secure accommodations with good safety measures',\r\n      'Have an exit strategy in case of emergencies',\r\n      'Check in regularly with family or friends'\r\n    ],\r\n    'Extreme': [\r\n      'Avoid all travel to this destination if possible',\r\n      'If you must travel, hire local security services if appropriate',\r\n      'Stay in contact with your embassy or consulate',\r\n      'Have emergency evacuation plans ready',\r\n      'Follow all security protocols advised by local authorities'\r\n    ]\r\n  };\r\n  \r\n  return [...commonTips, ...(riskSpecificTips[riskLevel] || [])];\r\n};\r\n\r\n// Helper functions\r\n\r\n/**\r\n * Get country code from destination name using geocoding\r\n * \r\n * @param {string} destination Destination name\r\n * @returns {Promise<string|null>} Promise that resolves to country code or null\r\n */\r\nconst getCountryCodeFromDestination = async (destination) => {\r\n  try {\r\n    // Use Nominatim (OpenStreetMap) for geocoding\r\n    const response = await fetch(`https://nominatim.openstreetmap.org/search?q=${encodeURIComponent(destination)}&format=json&limit=1`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Geocoding failed: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (data.length === 0) {\r\n      return null;\r\n    }\r\n    \r\n    // Extract country code\r\n    return data[0].address?.country_code?.toUpperCase() || null;\r\n  } catch (error) {\r\n    console.error(`Error getting country code for ${destination}:`, error);\r\n    return null;\r\n  }\r\n};\r\n\r\n/**\r\n * Create a default travel advisory for when API data is unavailable\r\n * \r\n * @param {string} destination Destination name\r\n * @returns {Object} Default advisory object\r\n */\r\nconst createDefaultAdvisory = (destination) => {\r\n  return {\r\n    name: destination,\r\n    iso_alpha2: 'XX',\r\n    continent: 'Unknown',\r\n    advisory: {\r\n      score: 0, // Unknown risk\r\n      sources_active: 0,\r\n      message: 'No specific travel advisory information is available for this destination.',\r\n      updated: new Date().toISOString(),\r\n      source: 'TravelEase (Default)'\r\n    },\r\n    risk_level: 'Unknown',\r\n    safety_tips: [\r\n      'Research local conditions before traveling',\r\n      'Register with your embassy or consulate',\r\n      'Purchase comprehensive travel insurance',\r\n      'Keep copies of important documents',\r\n      'Stay informed about local news and developments'\r\n    ]\r\n  };\r\n};"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,wBAAwB,GAAG,sCAAsC;;AAEvE;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAG,MAAAA,CAAA,KAAY;EAChD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,wBAAwB,WAAW,CAAC;IAEpE,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,sCAAsCH,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACK,UAAU,EAAE,CAAC;IACjG;IAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAElC,IAAID,IAAI,CAACE,UAAU,CAACC,OAAO,CAACC,IAAI,KAAK,GAAG,EAAE;MACxC,MAAM,IAAIP,KAAK,CAAC,cAAcG,IAAI,CAACE,UAAU,CAACC,OAAO,CAACC,IAAI,EAAE,CAAC;IAC/D;IAEA,OAAOJ,IAAI,CAACA,IAAI;EAClB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAME,wBAAwB,GAAG,MAAOC,WAAW,IAAK;EAC7D,IAAI,CAACA,WAAW,EAAE;IAChB,MAAM,IAAIX,KAAK,CAAC,0BAA0B,CAAC;EAC7C;EAEA,IAAI;IACF,MAAMH,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGH,wBAAwB,gBAAgBgB,WAAW,CAACC,WAAW,CAAC,CAAC,EAAE,CAAC;IAEpG,IAAI,CAACf,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,uCAAuCW,WAAW,KAAKd,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACK,UAAU,EAAE,CAAC;IAClH;IAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAElC,IAAID,IAAI,CAACE,UAAU,CAACC,OAAO,CAACC,IAAI,KAAK,GAAG,EAAE;MACxC,MAAM,IAAIP,KAAK,CAAC,cAAcG,IAAI,CAACE,UAAU,CAACC,OAAO,CAACC,IAAI,EAAE,CAAC;IAC/D;IAEA,OAAOJ,IAAI,CAACA,IAAI,CAACQ,WAAW,CAACC,WAAW,CAAC,CAAC,CAAC;EAC7C,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sCAAsCG,WAAW,GAAG,EAAEH,KAAK,CAAC;IAC1E,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,4BAA4B,GAAG,MAAOC,WAAW,IAAK;EACjE,IAAI,CAACA,WAAW,EAAE;IAChB,MAAM,IAAId,KAAK,CAAC,yBAAyB,CAAC;EAC5C;EAEA,IAAI;IACF;IACA,MAAMW,WAAW,GAAG,MAAMI,6BAA6B,CAACD,WAAW,CAAC;IAEpE,IAAIH,WAAW,EAAE;MACf;MACA,OAAO,MAAMD,wBAAwB,CAACC,WAAW,CAAC;IACpD,CAAC,MAAM;MACL;MACA,MAAMK,aAAa,GAAG,MAAMpB,sBAAsB,CAAC,CAAC;;MAEpD;MACA,MAAMqB,eAAe,GAAGC,MAAM,CAACC,MAAM,CAACH,aAAa,CAAC,CAACI,IAAI,CAACC,OAAO,IAC/DA,OAAO,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,KAAKT,WAAW,CAACS,WAAW,CAAC,CACzD,CAAC;MAED,IAAIN,eAAe,EAAE;QACnB,OAAOA,eAAe;MACxB;;MAEA;MACA,MAAMO,YAAY,GAAGN,MAAM,CAACC,MAAM,CAACH,aAAa,CAAC,CAACI,IAAI,CAACC,OAAO,IAC5DA,OAAO,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAACE,QAAQ,CAACX,WAAW,CAACS,WAAW,CAAC,CAAC,CAAC,IAC9DT,WAAW,CAACS,WAAW,CAAC,CAAC,CAACE,QAAQ,CAACJ,OAAO,CAACC,IAAI,CAACC,WAAW,CAAC,CAAC,CAC/D,CAAC;MAED,IAAIC,YAAY,EAAE;QAChB,OAAOA,YAAY;MACrB;;MAEA;MACA,OAAOE,qBAAqB,CAACZ,WAAW,CAAC;IAC3C;EACF,CAAC,CAAC,OAAON,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,sCAAsCM,WAAW,GAAG,EAAEN,KAAK,CAAC;;IAE1E;IACA,OAAOkB,qBAAqB,CAACZ,WAAW,CAAC;EAC3C;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMa,YAAY,GAAIC,KAAK,IAAK;EACrC,IAAIA,KAAK,IAAI,CAAC,EAAE;IACd,OAAO,KAAK;EACd,CAAC,MAAM,IAAIA,KAAK,IAAI,GAAG,EAAE;IACvB,OAAO,QAAQ;EACjB,CAAC,MAAM,IAAIA,KAAK,IAAI,GAAG,EAAE;IACvB,OAAO,MAAM;EACf,CAAC,MAAM;IACL,OAAO,SAAS;EAClB;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAIC,SAAS,IAAK;EAC1C,MAAMC,UAAU,GAAG,CACjB,qEAAqE,EACrE,2DAA2D,EAC3D,2CAA2C,EAC3C,0DAA0D,CAC3D;EAED,MAAMC,gBAAgB,GAAG;IACvB,KAAK,EAAE,CACL,yDAAyD,EACzD,gDAAgD,EAChD,wCAAwC,CACzC;IACD,QAAQ,EAAE,CACR,2CAA2C,EAC3C,uCAAuC,EACvC,sCAAsC,EACtC,2CAA2C,CAC5C;IACD,MAAM,EAAE,CACN,qDAAqD,EACrD,oDAAoD,EACpD,yDAAyD,EACzD,8CAA8C,EAC9C,2CAA2C,CAC5C;IACD,SAAS,EAAE,CACT,kDAAkD,EAClD,iEAAiE,EACjE,gDAAgD,EAChD,uCAAuC,EACvC,4DAA4D;EAEhE,CAAC;EAED,OAAO,CAAC,GAAGD,UAAU,EAAE,IAAIC,gBAAgB,CAACF,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;AAChE,CAAC;;AAED;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMf,6BAA6B,GAAG,MAAOD,WAAW,IAAK;EAC3D,IAAI;IAAA,IAAAmB,eAAA,EAAAC,qBAAA;IACF;IACA,MAAMrC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gDAAgDqC,kBAAkB,CAACrB,WAAW,CAAC,sBAAsB,CAAC;IAEnI,IAAI,CAACjB,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,qBAAqBH,QAAQ,CAACI,MAAM,IAAIJ,QAAQ,CAACK,UAAU,EAAE,CAAC;IAChF;IAEA,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;IAElC,IAAID,IAAI,CAACiC,MAAM,KAAK,CAAC,EAAE;MACrB,OAAO,IAAI;IACb;;IAEA;IACA,OAAO,EAAAH,eAAA,GAAA9B,IAAI,CAAC,CAAC,CAAC,CAACkC,OAAO,cAAAJ,eAAA,wBAAAC,qBAAA,GAAfD,eAAA,CAAiBK,YAAY,cAAAJ,qBAAA,uBAA7BA,qBAAA,CAA+BtB,WAAW,CAAC,CAAC,KAAI,IAAI;EAC7D,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,kCAAkCM,WAAW,GAAG,EAAEN,KAAK,CAAC;IACtE,OAAO,IAAI;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,MAAMkB,qBAAqB,GAAIZ,WAAW,IAAK;EAC7C,OAAO;IACLQ,IAAI,EAAER,WAAW;IACjByB,UAAU,EAAE,IAAI;IAChBC,SAAS,EAAE,SAAS;IACpBC,QAAQ,EAAE;MACRb,KAAK,EAAE,CAAC;MAAE;MACVc,cAAc,EAAE,CAAC;MACjBC,OAAO,EAAE,4EAA4E;MACrFC,OAAO,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACjCC,MAAM,EAAE;IACV,CAAC;IACDC,UAAU,EAAE,SAAS;IACrBC,WAAW,EAAE,CACX,4CAA4C,EAC5C,yCAAyC,EACzC,yCAAyC,EACzC,oCAAoC,EACpC,iDAAiD;EAErD,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}