{"ast":null,"code":"// API service for fetching destination data using free and open APIs\n\n// Base URLs for various free APIs\nconst OPEN_METEO_BASE_URL = 'https://api.open-meteo.com/v1';\nconst NOMINATIM_BASE_URL = 'https://nominatim.openstreetmap.org';\nconst RESTCOUNTRIES_BASE_URL = 'https://restcountries.com/v3.1';\nconst EXCHANGERATE_BASE_URL = 'https://open.er-api.com/v6/latest';\n\n// Geocoding: Convert location name to coordinates using OpenStreetMap's Nominatim API\nexport const geocodeLocation = async locationName => {\n  try {\n    const response = await fetch(`${NOMINATIM_BASE_URL}/search?q=${encodeURIComponent(locationName)}&format=json&limit=1`, {\n      headers: {\n        'Accept-Language': 'en-US,en',\n        'User-Agent': 'TravelEase/1.0' // It's good practice to identify your app to the API\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Geocoding failed');\n    }\n    const data = await response.json();\n    if (data.length === 0) {\n      throw new Error('Location not found');\n    }\n\n    // Extract the country code safely with fallbacks\n    let countryCode = 'UNKNOWN';\n    if (data[0].address && data[0].address.country_code) {\n      countryCode = data[0].address.country_code.toUpperCase();\n    } else if (data[0].country_code) {\n      countryCode = data[0].country_code.toUpperCase();\n    }\n    return {\n      lat: parseFloat(data[0].lat),\n      lon: parseFloat(data[0].lon),\n      name: data[0].display_name.split(',')[0],\n      country: countryCode\n    };\n  } catch (error) {\n    console.error('Geocoding error:', error);\n    throw error;\n  }\n};\n\n// Reverse Geocoding: Convert coordinates to location name\nexport const reverseGeocode = async (lat, lon) => {\n  try {\n    const response = await fetch(`${NOMINATIM_BASE_URL}/reverse?lat=${lat}&lon=${lon}&format=json`, {\n      headers: {\n        'Accept-Language': 'en-US,en',\n        'User-Agent': 'TravelEase/1.0'\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Reverse geocoding failed');\n    }\n    const data = await response.json();\n    if (!data || !data.address) {\n      throw new Error('Location not found');\n    }\n    return {\n      name: data.address.city || data.address.town || data.address.village || data.address.county || 'Unknown Location',\n      country: data.address.country || 'Unknown Country'\n    };\n  } catch (error) {\n    console.error('Reverse geocoding error:', error);\n    throw error;\n  }\n};\n\n// Get weather data for a location using Open-Meteo API (free, no API key required)\nexport const getWeatherForecast = async (lat, lon) => {\n  try {\n    const response = await fetch(`${OPEN_METEO_BASE_URL}/forecast?latitude=${lat}&longitude=${lon}&daily=weathercode,temperature_2m_max,temperature_2m_min,precipitation_sum,precipitation_hours&current_weather=true&timezone=auto`);\n    if (!response.ok) {\n      throw new Error('Weather data fetch failed');\n    }\n    const data = await response.json();\n\n    // Process the data to match our expected format\n    return processOpenMeteoData(data, lat, lon);\n  } catch (error) {\n    console.error('Weather fetch error:', error);\n    throw error;\n  }\n};\n\n// Process Open-Meteo data to match our app's expected format\nfunction processOpenMeteoData(data, lat, lon) {\n  // WMO Weather interpretation codes to description mapping\n  const weatherCodes = {\n    0: {\n      main: 'Clear',\n      description: 'clear sky',\n      icon: '01d'\n    },\n    1: {\n      main: 'Clear',\n      description: 'mainly clear',\n      icon: '01d'\n    },\n    2: {\n      main: 'Clouds',\n      description: 'partly cloudy',\n      icon: '02d'\n    },\n    3: {\n      main: 'Clouds',\n      description: 'overcast',\n      icon: '03d'\n    },\n    45: {\n      main: 'Fog',\n      description: 'fog',\n      icon: '50d'\n    },\n    48: {\n      main: 'Fog',\n      description: 'depositing rime fog',\n      icon: '50d'\n    },\n    51: {\n      main: 'Drizzle',\n      description: 'light drizzle',\n      icon: '09d'\n    },\n    53: {\n      main: 'Drizzle',\n      description: 'moderate drizzle',\n      icon: '09d'\n    },\n    55: {\n      main: 'Drizzle',\n      description: 'dense drizzle',\n      icon: '09d'\n    },\n    56: {\n      main: 'Drizzle',\n      description: 'freezing drizzle',\n      icon: '09d'\n    },\n    57: {\n      main: 'Drizzle',\n      description: 'dense freezing drizzle',\n      icon: '09d'\n    },\n    61: {\n      main: 'Rain',\n      description: 'slight rain',\n      icon: '10d'\n    },\n    63: {\n      main: 'Rain',\n      description: 'moderate rain',\n      icon: '10d'\n    },\n    65: {\n      main: 'Rain',\n      description: 'heavy rain',\n      icon: '10d'\n    },\n    66: {\n      main: 'Rain',\n      description: 'freezing rain',\n      icon: '13d'\n    },\n    67: {\n      main: 'Rain',\n      description: 'heavy freezing rain',\n      icon: '13d'\n    },\n    71: {\n      main: 'Snow',\n      description: 'slight snow fall',\n      icon: '13d'\n    },\n    73: {\n      main: 'Snow',\n      description: 'moderate snow fall',\n      icon: '13d'\n    },\n    75: {\n      main: 'Snow',\n      description: 'heavy snow fall',\n      icon: '13d'\n    },\n    77: {\n      main: 'Snow',\n      description: 'snow grains',\n      icon: '13d'\n    },\n    80: {\n      main: 'Rain',\n      description: 'slight rain showers',\n      icon: '09d'\n    },\n    81: {\n      main: 'Rain',\n      description: 'moderate rain showers',\n      icon: '09d'\n    },\n    82: {\n      main: 'Rain',\n      description: 'violent rain showers',\n      icon: '09d'\n    },\n    85: {\n      main: 'Snow',\n      description: 'slight snow showers',\n      icon: '13d'\n    },\n    86: {\n      main: 'Snow',\n      description: 'heavy snow showers',\n      icon: '13d'\n    },\n    95: {\n      main: 'Thunderstorm',\n      description: 'thunderstorm',\n      icon: '11d'\n    },\n    96: {\n      main: 'Thunderstorm',\n      description: 'thunderstorm with hail',\n      icon: '11d'\n    },\n    99: {\n      main: 'Thunderstorm',\n      description: 'thunderstorm with heavy hail',\n      icon: '11d'\n    }\n  };\n\n  // Get current weather\n  const currentWeatherCode = data.current_weather.weathercode;\n  const currentWeather = weatherCodes[currentWeatherCode] || weatherCodes[0]; // Default to clear if code not found\n\n  // Create a forecast format that matches what our components expect\n  const forecast = {\n    city: {\n      name: `Location at ${lat.toFixed(2)}, ${lon.toFixed(2)}`,\n      coord: {\n        lat,\n        lon\n      }\n    },\n    current_weather: {\n      ...data.current_weather,\n      weather: [currentWeather]\n    },\n    daily: {\n      time: data.daily.time,\n      weathercode: data.daily.weathercode,\n      temperature_max: data.daily.temperature_2m_max,\n      temperature_min: data.daily.temperature_2m_min,\n      precipitation_sum: data.daily.precipitation_sum,\n      precipitation_hours: data.daily.precipitation_hours\n    },\n    // Create a list format similar to OpenWeatherMap for compatibility\n    list: data.daily.time.map((time, index) => {\n      const weatherCode = data.daily.weathercode[index];\n      const weather = weatherCodes[weatherCode] || weatherCodes[0];\n      return {\n        dt: new Date(time).getTime() / 1000,\n        dt_txt: time,\n        main: {\n          temp: (data.daily.temperature_2m_max[index] + data.daily.temperature_2m_min[index]) / 2,\n          // Average temp\n          temp_min: data.daily.temperature_2m_min[index],\n          temp_max: data.daily.temperature_2m_max[index],\n          humidity: 70 // Open-Meteo free API doesn't provide humidity for daily forecasts\n        },\n        weather: [weather]\n      };\n    })\n  };\n  return forecast;\n}\n\n// Get country information using RestCountries API\nexport const getCountryInfo = async countryCode => {\n  try {\n    const response = await fetch(`${RESTCOUNTRIES_BASE_URL}/alpha/${countryCode}`);\n    if (!response.ok) {\n      throw new Error('Country info fetch failed');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Country info fetch error:', error);\n    throw error;\n  }\n};\n\n// Get currency exchange rates using Open Exchange Rates API\nexport const getCurrencyRates = async (baseCurrency = 'USD') => {\n  try {\n    const response = await fetch(`${EXCHANGERATE_BASE_URL}/${baseCurrency}`);\n    if (!response.ok) {\n      throw new Error('Exchange rate fetch failed');\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('Exchange rate fetch error:', error);\n    throw error;\n  }\n};\n\n// Get travel advisory information \n// This uses basic country advisories as we don't have a specific API\nexport const getTravelAdvisory = async countryCode => {\n  try {\n    // Simulate travel advisory with some basic countries\n    // In a real app, you'd use a proper travel advisory API\n    const advisories = {\n      'US': {\n        score: 2,\n        message: 'Exercise increased caution'\n      },\n      'FR': {\n        score: 2,\n        message: 'Exercise increased caution'\n      },\n      'JP': {\n        score: 1,\n        message: 'Exercise normal precautions'\n      },\n      'GB': {\n        score: 2,\n        message: 'Exercise increased caution'\n      },\n      'AU': {\n        score: 1,\n        message: 'Exercise normal precautions'\n      },\n      'EG': {\n        score: 3,\n        message: 'Reconsider travel'\n      },\n      'BR': {\n        score: 2,\n        message: 'Exercise increased caution'\n      },\n      'RU': {\n        score: 4,\n        message: 'Do not travel'\n      }\n    };\n    const advisory = advisories[countryCode] || {\n      score: 2,\n      message: 'Exercise increased caution'\n    };\n    return {\n      data: {\n        [countryCode]: advisory\n      }\n    };\n  } catch (error) {\n    console.error('Travel advisory fetch error:', error);\n    throw error;\n  }\n};\n\n// Get complete destination information (combines all APIs)\nexport const getCompleteDestinationInfo = async locationName => {\n  try {\n    var _countryInfo$2, _countryInfo$2$name, _countryInfo$3, _countryInfo$4, _countryInfo$4$curren, _countryInfo$4$curren2, _countryInfo$5, _countryInfo$5$curren, _countryInfo$5$curren2, _countryInfo$6, _travelAdvisory$data, _countryInfo$7, _countryInfo$7$flags, _countryInfo$8, _countryInfo$8$capita, _countryInfo$9, _countryInfo$10, _countryInfo$10$timez, _countryInfo$11, _countryInfo$11$car;\n    // First, geocode the location to get coordinates and country code\n    const geoData = await geocodeLocation(locationName);\n\n    // Fetch country information\n    let countryInfo = [];\n    try {\n      countryInfo = await getCountryInfo(geoData.country);\n    } catch (err) {\n      console.warn('Could not fetch country info:', err);\n      countryInfo = [];\n    }\n\n    // Fetch weather data\n    const weatherData = await getWeatherForecast(geoData.lat, geoData.lon);\n\n    // Fetch currency exchange rates\n    let currencyRates = {\n      rates: {\n        USD: 1,\n        EUR: 0.93,\n        GBP: 0.81\n      }\n    };\n    let currencyCode = 'USD';\n    try {\n      var _countryInfo$;\n      if ((_countryInfo$ = countryInfo[0]) !== null && _countryInfo$ !== void 0 && _countryInfo$.currencies) {\n        currencyCode = Object.keys(countryInfo[0].currencies)[0];\n        currencyRates = await getCurrencyRates(currencyCode);\n      }\n    } catch (err) {\n      console.warn('Could not fetch currency rates:', err);\n    }\n\n    // Fetch travel advisory\n    const travelAdvisory = await getTravelAdvisory(geoData.country);\n\n    // Compile all the data\n    return {\n      name: geoData.name,\n      country: ((_countryInfo$2 = countryInfo[0]) === null || _countryInfo$2 === void 0 ? void 0 : (_countryInfo$2$name = _countryInfo$2.name) === null || _countryInfo$2$name === void 0 ? void 0 : _countryInfo$2$name.common) || geoData.country,\n      coordinates: {\n        lat: geoData.lat,\n        lon: geoData.lon\n      },\n      weather: weatherData,\n      language: (_countryInfo$3 = countryInfo[0]) !== null && _countryInfo$3 !== void 0 && _countryInfo$3.languages ? Object.values(countryInfo[0].languages)[0] : 'Unknown',\n      currency: {\n        code: currencyCode,\n        name: ((_countryInfo$4 = countryInfo[0]) === null || _countryInfo$4 === void 0 ? void 0 : (_countryInfo$4$curren = _countryInfo$4.currencies) === null || _countryInfo$4$curren === void 0 ? void 0 : (_countryInfo$4$curren2 = _countryInfo$4$curren[currencyCode]) === null || _countryInfo$4$curren2 === void 0 ? void 0 : _countryInfo$4$curren2.name) || 'Unknown',\n        symbol: ((_countryInfo$5 = countryInfo[0]) === null || _countryInfo$5 === void 0 ? void 0 : (_countryInfo$5$curren = _countryInfo$5.currencies) === null || _countryInfo$5$curren === void 0 ? void 0 : (_countryInfo$5$curren2 = _countryInfo$5$curren[currencyCode]) === null || _countryInfo$5$curren2 === void 0 ? void 0 : _countryInfo$5$curren2.symbol) || '$',\n        rates: currencyRates.rates\n      },\n      emergency: ((_countryInfo$6 = countryInfo[0]) === null || _countryInfo$6 === void 0 ? void 0 : _countryInfo$6.emergency) || {\n        police: '911',\n        ambulance: '911'\n      },\n      travelAdvisory: (_travelAdvisory$data = travelAdvisory.data) === null || _travelAdvisory$data === void 0 ? void 0 : _travelAdvisory$data[geoData.country],\n      flag: ((_countryInfo$7 = countryInfo[0]) === null || _countryInfo$7 === void 0 ? void 0 : (_countryInfo$7$flags = _countryInfo$7.flags) === null || _countryInfo$7$flags === void 0 ? void 0 : _countryInfo$7$flags.png) || '',\n      capital: ((_countryInfo$8 = countryInfo[0]) === null || _countryInfo$8 === void 0 ? void 0 : (_countryInfo$8$capita = _countryInfo$8.capital) === null || _countryInfo$8$capita === void 0 ? void 0 : _countryInfo$8$capita[0]) || '',\n      population: ((_countryInfo$9 = countryInfo[0]) === null || _countryInfo$9 === void 0 ? void 0 : _countryInfo$9.population) || 0,\n      timezone: ((_countryInfo$10 = countryInfo[0]) === null || _countryInfo$10 === void 0 ? void 0 : (_countryInfo$10$timez = _countryInfo$10.timezones) === null || _countryInfo$10$timez === void 0 ? void 0 : _countryInfo$10$timez[0]) || 'UTC',\n      drivingSide: ((_countryInfo$11 = countryInfo[0]) === null || _countryInfo$11 === void 0 ? void 0 : (_countryInfo$11$car = _countryInfo$11.car) === null || _countryInfo$11$car === void 0 ? void 0 : _countryInfo$11$car.side) || 'right',\n      mapLink: `https://www.google.com/maps/place/${encodeURIComponent(locationName)}`\n    };\n  } catch (error) {\n    console.error('Complete destination info fetch error:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["OPEN_METEO_BASE_URL","NOMINATIM_BASE_URL","RESTCOUNTRIES_BASE_URL","EXCHANGERATE_BASE_URL","geocodeLocation","locationName","response","fetch","encodeURIComponent","headers","ok","Error","data","json","length","countryCode","address","country_code","toUpperCase","lat","parseFloat","lon","name","display_name","split","country","error","console","reverseGeocode","city","town","village","county","getWeatherForecast","processOpenMeteoData","weatherCodes","main","description","icon","currentWeatherCode","current_weather","weathercode","currentWeather","forecast","toFixed","coord","weather","daily","time","temperature_max","temperature_2m_max","temperature_min","temperature_2m_min","precipitation_sum","precipitation_hours","list","map","index","weatherCode","dt","Date","getTime","dt_txt","temp","temp_min","temp_max","humidity","getCountryInfo","getCurrencyRates","baseCurrency","getTravelAdvisory","advisories","score","message","advisory","getCompleteDestinationInfo","_countryInfo$2","_countryInfo$2$name","_countryInfo$3","_countryInfo$4","_countryInfo$4$curren","_countryInfo$4$curren2","_countryInfo$5","_countryInfo$5$curren","_countryInfo$5$curren2","_countryInfo$6","_travelAdvisory$data","_countryInfo$7","_countryInfo$7$flags","_countryInfo$8","_countryInfo$8$capita","_countryInfo$9","_countryInfo$10","_countryInfo$10$timez","_countryInfo$11","_countryInfo$11$car","geoData","countryInfo","err","warn","weatherData","currencyRates","rates","USD","EUR","GBP","currencyCode","_countryInfo$","currencies","Object","keys","travelAdvisory","common","coordinates","language","languages","values","currency","code","symbol","emergency","police","ambulance","flag","flags","png","capital","population","timezone","timezones","drivingSide","car","side","mapLink"],"sources":["C:/Users/juliu/Desktop/web/src/services/apiService.js"],"sourcesContent":["// API service for fetching destination data using free and open APIs\r\n\r\n// Base URLs for various free APIs\r\nconst OPEN_METEO_BASE_URL = 'https://api.open-meteo.com/v1';\r\nconst NOMINATIM_BASE_URL = 'https://nominatim.openstreetmap.org';\r\nconst RESTCOUNTRIES_BASE_URL = 'https://restcountries.com/v3.1';\r\nconst EXCHANGERATE_BASE_URL = 'https://open.er-api.com/v6/latest';\r\n\r\n// Geocoding: Convert location name to coordinates using OpenStreetMap's Nominatim API\r\nexport const geocodeLocation = async (locationName) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${NOMINATIM_BASE_URL}/search?q=${encodeURIComponent(locationName)}&format=json&limit=1`,\r\n      {\r\n        headers: {\r\n          'Accept-Language': 'en-US,en',\r\n          'User-Agent': 'TravelEase/1.0' // It's good practice to identify your app to the API\r\n        }\r\n      }\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Geocoding failed');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (data.length === 0) {\r\n      throw new Error('Location not found');\r\n    }\r\n    \r\n    // Extract the country code safely with fallbacks\r\n    let countryCode = 'UNKNOWN';\r\n    if (data[0].address && data[0].address.country_code) {\r\n      countryCode = data[0].address.country_code.toUpperCase();\r\n    } else if (data[0].country_code) {\r\n      countryCode = data[0].country_code.toUpperCase();\r\n    }\r\n    \r\n    return {\r\n      lat: parseFloat(data[0].lat),\r\n      lon: parseFloat(data[0].lon),\r\n      name: data[0].display_name.split(',')[0],\r\n      country: countryCode\r\n    };\r\n  } catch (error) {\r\n    console.error('Geocoding error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Reverse Geocoding: Convert coordinates to location name\r\nexport const reverseGeocode = async (lat, lon) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${NOMINATIM_BASE_URL}/reverse?lat=${lat}&lon=${lon}&format=json`,\r\n      {\r\n        headers: {\r\n          'Accept-Language': 'en-US,en',\r\n          'User-Agent': 'TravelEase/1.0'\r\n        }\r\n      }\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Reverse geocoding failed');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    if (!data || !data.address) {\r\n      throw new Error('Location not found');\r\n    }\r\n    \r\n    return {\r\n      name: data.address.city || data.address.town || data.address.village || data.address.county || 'Unknown Location',\r\n      country: data.address.country || 'Unknown Country'\r\n    };\r\n  } catch (error) {\r\n    console.error('Reverse geocoding error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get weather data for a location using Open-Meteo API (free, no API key required)\r\nexport const getWeatherForecast = async (lat, lon) => {\r\n  try {\r\n    const response = await fetch(\r\n      `${OPEN_METEO_BASE_URL}/forecast?latitude=${lat}&longitude=${lon}&daily=weathercode,temperature_2m_max,temperature_2m_min,precipitation_sum,precipitation_hours&current_weather=true&timezone=auto`\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Weather data fetch failed');\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // Process the data to match our expected format\r\n    return processOpenMeteoData(data, lat, lon);\r\n  } catch (error) {\r\n    console.error('Weather fetch error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Process Open-Meteo data to match our app's expected format\r\nfunction processOpenMeteoData(data, lat, lon) {\r\n  // WMO Weather interpretation codes to description mapping\r\n  const weatherCodes = {\r\n    0: { main: 'Clear', description: 'clear sky', icon: '01d' },\r\n    1: { main: 'Clear', description: 'mainly clear', icon: '01d' },\r\n    2: { main: 'Clouds', description: 'partly cloudy', icon: '02d' },\r\n    3: { main: 'Clouds', description: 'overcast', icon: '03d' },\r\n    45: { main: 'Fog', description: 'fog', icon: '50d' },\r\n    48: { main: 'Fog', description: 'depositing rime fog', icon: '50d' },\r\n    51: { main: 'Drizzle', description: 'light drizzle', icon: '09d' },\r\n    53: { main: 'Drizzle', description: 'moderate drizzle', icon: '09d' },\r\n    55: { main: 'Drizzle', description: 'dense drizzle', icon: '09d' },\r\n    56: { main: 'Drizzle', description: 'freezing drizzle', icon: '09d' },\r\n    57: { main: 'Drizzle', description: 'dense freezing drizzle', icon: '09d' },\r\n    61: { main: 'Rain', description: 'slight rain', icon: '10d' },\r\n    63: { main: 'Rain', description: 'moderate rain', icon: '10d' },\r\n    65: { main: 'Rain', description: 'heavy rain', icon: '10d' },\r\n    66: { main: 'Rain', description: 'freezing rain', icon: '13d' },\r\n    67: { main: 'Rain', description: 'heavy freezing rain', icon: '13d' },\r\n    71: { main: 'Snow', description: 'slight snow fall', icon: '13d' },\r\n    73: { main: 'Snow', description: 'moderate snow fall', icon: '13d' },\r\n    75: { main: 'Snow', description: 'heavy snow fall', icon: '13d' },\r\n    77: { main: 'Snow', description: 'snow grains', icon: '13d' },\r\n    80: { main: 'Rain', description: 'slight rain showers', icon: '09d' },\r\n    81: { main: 'Rain', description: 'moderate rain showers', icon: '09d' },\r\n    82: { main: 'Rain', description: 'violent rain showers', icon: '09d' },\r\n    85: { main: 'Snow', description: 'slight snow showers', icon: '13d' },\r\n    86: { main: 'Snow', description: 'heavy snow showers', icon: '13d' },\r\n    95: { main: 'Thunderstorm', description: 'thunderstorm', icon: '11d' },\r\n    96: { main: 'Thunderstorm', description: 'thunderstorm with hail', icon: '11d' },\r\n    99: { main: 'Thunderstorm', description: 'thunderstorm with heavy hail', icon: '11d' }\r\n  };\r\n  \r\n  // Get current weather\r\n  const currentWeatherCode = data.current_weather.weathercode;\r\n  const currentWeather = weatherCodes[currentWeatherCode] || weatherCodes[0]; // Default to clear if code not found\r\n  \r\n  // Create a forecast format that matches what our components expect\r\n  const forecast = {\r\n    city: {\r\n      name: `Location at ${lat.toFixed(2)}, ${lon.toFixed(2)}`,\r\n      coord: { lat, lon }\r\n    },\r\n    current_weather: {\r\n      ...data.current_weather,\r\n      weather: [currentWeather]\r\n    },\r\n    daily: {\r\n      time: data.daily.time,\r\n      weathercode: data.daily.weathercode,\r\n      temperature_max: data.daily.temperature_2m_max,\r\n      temperature_min: data.daily.temperature_2m_min,\r\n      precipitation_sum: data.daily.precipitation_sum,\r\n      precipitation_hours: data.daily.precipitation_hours\r\n    },\r\n    // Create a list format similar to OpenWeatherMap for compatibility\r\n    list: data.daily.time.map((time, index) => {\r\n      const weatherCode = data.daily.weathercode[index];\r\n      const weather = weatherCodes[weatherCode] || weatherCodes[0];\r\n      \r\n      return {\r\n        dt: new Date(time).getTime() / 1000,\r\n        dt_txt: time,\r\n        main: {\r\n          temp: (data.daily.temperature_2m_max[index] + data.daily.temperature_2m_min[index]) / 2, // Average temp\r\n          temp_min: data.daily.temperature_2m_min[index],\r\n          temp_max: data.daily.temperature_2m_max[index],\r\n          humidity: 70 // Open-Meteo free API doesn't provide humidity for daily forecasts\r\n        },\r\n        weather: [weather]\r\n      };\r\n    })\r\n  };\r\n  \r\n  return forecast;\r\n}\r\n\r\n// Get country information using RestCountries API\r\nexport const getCountryInfo = async (countryCode) => {\r\n  try {\r\n    const response = await fetch(`${RESTCOUNTRIES_BASE_URL}/alpha/${countryCode}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Country info fetch failed');\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Country info fetch error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get currency exchange rates using Open Exchange Rates API\r\nexport const getCurrencyRates = async (baseCurrency = 'USD') => {\r\n  try {\r\n    const response = await fetch(`${EXCHANGERATE_BASE_URL}/${baseCurrency}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error('Exchange rate fetch failed');\r\n    }\r\n    \r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Exchange rate fetch error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get travel advisory information \r\n// This uses basic country advisories as we don't have a specific API\r\nexport const getTravelAdvisory = async (countryCode) => {\r\n  try {\r\n    // Simulate travel advisory with some basic countries\r\n    // In a real app, you'd use a proper travel advisory API\r\n    const advisories = {\r\n      'US': { score: 2, message: 'Exercise increased caution' },\r\n      'FR': { score: 2, message: 'Exercise increased caution' },\r\n      'JP': { score: 1, message: 'Exercise normal precautions' },\r\n      'GB': { score: 2, message: 'Exercise increased caution' },\r\n      'AU': { score: 1, message: 'Exercise normal precautions' },\r\n      'EG': { score: 3, message: 'Reconsider travel' },\r\n      'BR': { score: 2, message: 'Exercise increased caution' },\r\n      'RU': { score: 4, message: 'Do not travel' }\r\n    };\r\n    \r\n    const advisory = advisories[countryCode] || { score: 2, message: 'Exercise increased caution' };\r\n    \r\n    return {\r\n      data: {\r\n        [countryCode]: advisory\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error('Travel advisory fetch error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Get complete destination information (combines all APIs)\r\nexport const getCompleteDestinationInfo = async (locationName) => {\r\n  try {\r\n    // First, geocode the location to get coordinates and country code\r\n    const geoData = await geocodeLocation(locationName);\r\n    \r\n    // Fetch country information\r\n    let countryInfo = [];\r\n    try {\r\n      countryInfo = await getCountryInfo(geoData.country);\r\n    } catch (err) {\r\n      console.warn('Could not fetch country info:', err);\r\n      countryInfo = [];\r\n    }\r\n    \r\n    // Fetch weather data\r\n    const weatherData = await getWeatherForecast(geoData.lat, geoData.lon);\r\n    \r\n    // Fetch currency exchange rates\r\n    let currencyRates = { rates: { USD: 1, EUR: 0.93, GBP: 0.81 } };\r\n    let currencyCode = 'USD';\r\n    try {\r\n      if (countryInfo[0]?.currencies) {\r\n        currencyCode = Object.keys(countryInfo[0].currencies)[0];\r\n        currencyRates = await getCurrencyRates(currencyCode);\r\n      }\r\n    } catch (err) {\r\n      console.warn('Could not fetch currency rates:', err);\r\n    }\r\n    \r\n    // Fetch travel advisory\r\n    const travelAdvisory = await getTravelAdvisory(geoData.country);\r\n    \r\n    // Compile all the data\r\n    return {\r\n      name: geoData.name,\r\n      country: countryInfo[0]?.name?.common || geoData.country,\r\n      coordinates: {\r\n        lat: geoData.lat,\r\n        lon: geoData.lon\r\n      },\r\n      weather: weatherData,\r\n      language: countryInfo[0]?.languages ? Object.values(countryInfo[0].languages)[0] : 'Unknown',\r\n      currency: {\r\n        code: currencyCode,\r\n        name: countryInfo[0]?.currencies?.[currencyCode]?.name || 'Unknown',\r\n        symbol: countryInfo[0]?.currencies?.[currencyCode]?.symbol || '$',\r\n        rates: currencyRates.rates\r\n      },\r\n      emergency: countryInfo[0]?.emergency || { police: '911', ambulance: '911' },\r\n      travelAdvisory: travelAdvisory.data?.[geoData.country],\r\n      flag: countryInfo[0]?.flags?.png || '',\r\n      capital: countryInfo[0]?.capital?.[0] || '',\r\n      population: countryInfo[0]?.population || 0,\r\n      timezone: countryInfo[0]?.timezones?.[0] || 'UTC',\r\n      drivingSide: countryInfo[0]?.car?.side || 'right',\r\n      mapLink: `https://www.google.com/maps/place/${encodeURIComponent(locationName)}`\r\n    };\r\n  } catch (error) {\r\n    console.error('Complete destination info fetch error:', error);\r\n    throw error;\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}