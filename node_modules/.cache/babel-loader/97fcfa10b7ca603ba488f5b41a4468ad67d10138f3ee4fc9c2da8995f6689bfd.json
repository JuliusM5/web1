{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useDeviceDetection } from '../../utils/deviceDetection';\n\n/**\r\n * A wrapper component that renders different content based on screen size\r\n * @param {Object} props - Component props\r\n * @param {React.ReactNode} props.mobile - Content to render on mobile devices\r\n * @param {React.ReactNode} props.tablet - Content to render on tablet devices\r\n * @param {React.ReactNode} props.desktop - Content to render on desktop devices\r\n * @param {React.ReactNode} props.fallback - Fallback content if no specific size matches\r\n * @returns {React.ReactNode} - The appropriate content for the current screen size\r\n */\nfunction ResponsiveWrapper({\n  mobile,\n  tablet,\n  desktop,\n  fallback\n}) {\n  _s();\n  const deviceInfo = useDeviceDetection();\n  const [mounted, setMounted] = useState(false);\n\n  // Only perform client-side rendering after mount to avoid hydration issues\n  useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  // Return null during SSR or before hydration is complete\n  if (!mounted) {\n    return null;\n  }\n  if (deviceInfo.isMobile && mobile) {\n    return mobile;\n  }\n  if (deviceInfo.isTablet && tablet) {\n    return tablet;\n  }\n  if (deviceInfo.isDesktop && desktop) {\n    return desktop;\n  }\n\n  // Fallback logic - use the most appropriate component for the device\n  if (deviceInfo.isMobile) {\n    return mobile || tablet || desktop || fallback;\n  }\n  if (deviceInfo.isTablet) {\n    return tablet || desktop || mobile || fallback;\n  }\n  if (deviceInfo.isDesktop) {\n    return desktop || tablet || mobile || fallback;\n  }\n  return fallback || null;\n}\n_s(ResponsiveWrapper, \"/X4b3UNM0HO6tBbMfuI2m/XYaBk=\", false, function () {\n  return [useDeviceDetection];\n});\n_c = ResponsiveWrapper;\nexport default ResponsiveWrapper;\nvar _c;\n$RefreshReg$(_c, \"ResponsiveWrapper\");","map":{"version":3,"names":["React","useEffect","useState","useDeviceDetection","ResponsiveWrapper","mobile","tablet","desktop","fallback","_s","deviceInfo","mounted","setMounted","isMobile","isTablet","isDesktop","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/components/UI/ResponsiveWrapper.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDeviceDetection } from '../../utils/deviceDetection';\r\n\r\n/**\r\n * A wrapper component that renders different content based on screen size\r\n * @param {Object} props - Component props\r\n * @param {React.ReactNode} props.mobile - Content to render on mobile devices\r\n * @param {React.ReactNode} props.tablet - Content to render on tablet devices\r\n * @param {React.ReactNode} props.desktop - Content to render on desktop devices\r\n * @param {React.ReactNode} props.fallback - Fallback content if no specific size matches\r\n * @returns {React.ReactNode} - The appropriate content for the current screen size\r\n */\r\nfunction ResponsiveWrapper({ mobile, tablet, desktop, fallback }) {\r\n  const deviceInfo = useDeviceDetection();\r\n  const [mounted, setMounted] = useState(false);\r\n  \r\n  // Only perform client-side rendering after mount to avoid hydration issues\r\n  useEffect(() => {\r\n    setMounted(true);\r\n  }, []);\r\n  \r\n  // Return null during SSR or before hydration is complete\r\n  if (!mounted) {\r\n    return null;\r\n  }\r\n  \r\n  if (deviceInfo.isMobile && mobile) {\r\n    return mobile;\r\n  }\r\n  \r\n  if (deviceInfo.isTablet && tablet) {\r\n    return tablet;\r\n  }\r\n  \r\n  if (deviceInfo.isDesktop && desktop) {\r\n    return desktop;\r\n  }\r\n  \r\n  // Fallback logic - use the most appropriate component for the device\r\n  if (deviceInfo.isMobile) {\r\n    return mobile || tablet || desktop || fallback;\r\n  }\r\n  \r\n  if (deviceInfo.isTablet) {\r\n    return tablet || desktop || mobile || fallback;\r\n  }\r\n  \r\n  if (deviceInfo.isDesktop) {\r\n    return desktop || tablet || mobile || fallback;\r\n  }\r\n  \r\n  return fallback || null;\r\n}\r\n\r\nexport default ResponsiveWrapper;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,kBAAkB,QAAQ,6BAA6B;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAAC;EAAEC,MAAM;EAAEC,MAAM;EAAEC,OAAO;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EAChE,MAAMC,UAAU,GAAGP,kBAAkB,CAAC,CAAC;EACvC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACAD,SAAS,CAAC,MAAM;IACdW,UAAU,CAAC,IAAI,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAI,CAACD,OAAO,EAAE;IACZ,OAAO,IAAI;EACb;EAEA,IAAID,UAAU,CAACG,QAAQ,IAAIR,MAAM,EAAE;IACjC,OAAOA,MAAM;EACf;EAEA,IAAIK,UAAU,CAACI,QAAQ,IAAIR,MAAM,EAAE;IACjC,OAAOA,MAAM;EACf;EAEA,IAAII,UAAU,CAACK,SAAS,IAAIR,OAAO,EAAE;IACnC,OAAOA,OAAO;EAChB;;EAEA;EACA,IAAIG,UAAU,CAACG,QAAQ,EAAE;IACvB,OAAOR,MAAM,IAAIC,MAAM,IAAIC,OAAO,IAAIC,QAAQ;EAChD;EAEA,IAAIE,UAAU,CAACI,QAAQ,EAAE;IACvB,OAAOR,MAAM,IAAIC,OAAO,IAAIF,MAAM,IAAIG,QAAQ;EAChD;EAEA,IAAIE,UAAU,CAACK,SAAS,EAAE;IACxB,OAAOR,OAAO,IAAID,MAAM,IAAID,MAAM,IAAIG,QAAQ;EAChD;EAEA,OAAOA,QAAQ,IAAI,IAAI;AACzB;AAACC,EAAA,CAxCQL,iBAAiB;EAAA,QACLD,kBAAkB;AAAA;AAAAa,EAAA,GAD9BZ,iBAAiB;AA0C1B,eAAeA,iBAAiB;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}