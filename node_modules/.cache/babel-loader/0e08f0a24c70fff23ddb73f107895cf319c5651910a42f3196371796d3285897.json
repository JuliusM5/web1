{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\context\\\\SubscriptionContext.jsx\",\n  _s = $RefreshSig$();\n// src/context/SubscriptionContext.jsx\n\nimport React, { createContext, useEffect, useState } from 'react';\nimport { storageKeys } from '../constants/storageKeys';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SubscriptionContext = /*#__PURE__*/createContext();\nexport const SubscriptionProvider = ({\n  children\n}) => {\n  _s();\n  const [subscription, setSubscription] = useState({\n    isSubscribed: false,\n    isLoading: true,\n    plan: null,\n    expiresAt: null,\n    error: null\n  });\n  useEffect(() => {\n    // Check subscription status on mount\n    verifySubscription();\n  }, []);\n  const verifySubscription = async (showLoading = true) => {\n    const token = localStorage.getItem(storageKeys.SUBSCRIPTION_TOKEN);\n\n    // No token, not subscribed\n    if (!token) {\n      setSubscription(prev => ({\n        ...prev,\n        isSubscribed: false,\n        isLoading: false\n      }));\n      return;\n    }\n\n    // Show loading state if requested\n    if (showLoading) {\n      setSubscription(prev => ({\n        ...prev,\n        isLoading: true\n      }));\n    }\n    try {\n      // Check if token is expired\n      const expiryDate = localStorage.getItem(storageKeys.SUBSCRIPTION_EXPIRY);\n      if (!expiryDate || new Date(expiryDate) <= new Date()) {\n        // Token expired, clear storage\n        localStorage.removeItem(storageKeys.SUBSCRIPTION_TOKEN);\n        localStorage.removeItem(storageKeys.SUBSCRIPTION_EXPIRY);\n        setSubscription({\n          isSubscribed: false,\n          plan: null,\n          expiresAt: null,\n          isLoading: false,\n          error: 'Subscription expired'\n        });\n        return;\n      }\n\n      // Valid subscription\n      setSubscription({\n        isSubscribed: true,\n        // For development, assume plan from localStorage or default to monthly\n        plan: localStorage.getItem('subscription_plan') || 'monthly_premium',\n        expiresAt: expiryDate,\n        isLoading: false,\n        error: null\n      });\n    } catch (error) {\n      console.error('Subscription verification failed:', error);\n\n      // Fallback to local verification\n      const expiryDate = localStorage.getItem(storageKeys.SUBSCRIPTION_EXPIRY);\n      if (expiryDate && new Date(expiryDate) > new Date()) {\n        setSubscription(prev => ({\n          ...prev,\n          isSubscribed: true,\n          isOfflineVerified: true,\n          isLoading: false\n        }));\n      } else {\n        setSubscription(prev => ({\n          ...prev,\n          isSubscribed: false,\n          isLoading: false,\n          error: 'Failed to verify subscription status'\n        }));\n      }\n    }\n  };\n  const purchaseSubscription = async (email, plan) => {\n    setSubscription(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    try {\n      // For development, simulate a successful subscription\n      // In production, this would create a checkout session with Stripe\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1500));\n\n      // Generate mock data\n      const token = 'token_' + Date.now();\n      const expiryDate = new Date();\n\n      // Set expiration based on plan\n      if (plan === 'yearly_premium') {\n        expiryDate.setFullYear(expiryDate.getFullYear() + 1);\n      } else {\n        expiryDate.setMonth(expiryDate.getMonth() + 1);\n      }\n\n      // Store in localStorage\n      localStorage.setItem(storageKeys.SUBSCRIPTION_TOKEN, token);\n      localStorage.setItem(storageKeys.SUBSCRIPTION_EXPIRY, expiryDate.toISOString());\n      localStorage.setItem('subscription_plan', plan);\n\n      // Generate a mock mobile access code\n      const mobileAccessCode = 'TEST-' + Math.random().toString(36).substring(2, 6).toUpperCase() + '-CODE';\n\n      // Update subscription state\n      setSubscription({\n        isSubscribed: true,\n        plan: plan,\n        expiresAt: expiryDate.toISOString(),\n        isLoading: false,\n        error: null\n      });\n      return {\n        success: true,\n        mobileAccessCode\n      };\n    } catch (error) {\n      console.error('Purchase subscription error:', error);\n      setSubscription(prev => ({\n        ...prev,\n        isLoading: false,\n        error: 'Failed to process subscription'\n      }));\n      return {\n        success: false,\n        error: 'Failed to process subscription'\n      };\n    }\n  };\n  const activateTokenFromEmail = async token => {\n    setSubscription(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    try {\n      // For development, simulate activation\n      // In production, this would verify the token with your server\n\n      // Simulate API delay\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // Store token in localStorage\n      localStorage.setItem(storageKeys.SUBSCRIPTION_TOKEN, token);\n\n      // Set expiry to 30 days from now (for demo)\n      const expiryDate = new Date();\n      expiryDate.setDate(expiryDate.getDate() + 30);\n      localStorage.setItem(storageKeys.SUBSCRIPTION_EXPIRY, expiryDate.toISOString());\n\n      // Update subscription state\n      setSubscription({\n        isSubscribed: true,\n        plan: 'monthly_premium',\n        // Assume monthly plan for activation\n        expiresAt: expiryDate.toISOString(),\n        isLoading: false,\n        error: null\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Token activation failed:', error);\n      setSubscription(prev => ({\n        ...prev,\n        isLoading: false,\n        error: 'Failed to activate subscription'\n      }));\n      return {\n        success: false,\n        error: 'Failed to activate subscription'\n      };\n    }\n  };\n  const cancelSubscription = async () => {\n    try {\n      // For development, just remove from localStorage\n      // In production, this would call your backend to cancel in Stripe\n\n      // Clear local storage\n      localStorage.removeItem(storageKeys.SUBSCRIPTION_TOKEN);\n      localStorage.removeItem(storageKeys.SUBSCRIPTION_EXPIRY);\n      localStorage.removeItem('subscription_plan');\n\n      // Update state\n      setSubscription({\n        isSubscribed: false,\n        plan: null,\n        expiresAt: null,\n        isLoading: false,\n        error: null\n      });\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Cancel subscription error:', error);\n      return {\n        success: false,\n        error: 'Failed to cancel subscription'\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SubscriptionContext.Provider, {\n    value: {\n      ...subscription,\n      purchaseSubscription,\n      activateTokenFromEmail,\n      refreshSubscription: verifySubscription,\n      cancelSubscription\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n};\n_s(SubscriptionProvider, \"4bp76JDu090kbtikxVHt2pR/6pM=\");\n_c = SubscriptionProvider;\nexport default SubscriptionContext;\nvar _c;\n$RefreshReg$(_c, \"SubscriptionProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","storageKeys","jsxDEV","_jsxDEV","SubscriptionContext","SubscriptionProvider","children","_s","subscription","setSubscription","isSubscribed","isLoading","plan","expiresAt","error","verifySubscription","showLoading","token","localStorage","getItem","SUBSCRIPTION_TOKEN","prev","expiryDate","SUBSCRIPTION_EXPIRY","Date","removeItem","console","isOfflineVerified","purchaseSubscription","email","Promise","resolve","setTimeout","now","setFullYear","getFullYear","setMonth","getMonth","setItem","toISOString","mobileAccessCode","Math","random","toString","substring","toUpperCase","success","activateTokenFromEmail","setDate","getDate","cancelSubscription","Provider","value","refreshSubscription","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/context/SubscriptionContext.jsx"],"sourcesContent":["// src/context/SubscriptionContext.jsx\r\n\r\nimport React, { createContext, useEffect, useState } from 'react';\r\nimport { storageKeys } from '../constants/storageKeys';\r\n\r\nexport const SubscriptionContext = createContext();\r\n\r\nexport const SubscriptionProvider = ({ children }) => {\r\n  const [subscription, setSubscription] = useState({\r\n    isSubscribed: false,\r\n    isLoading: true,\r\n    plan: null,\r\n    expiresAt: null,\r\n    error: null\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Check subscription status on mount\r\n    verifySubscription();\r\n  }, []);\r\n\r\n  const verifySubscription = async (showLoading = true) => {\r\n    const token = localStorage.getItem(storageKeys.SUBSCRIPTION_TOKEN);\r\n    \r\n    // No token, not subscribed\r\n    if (!token) {\r\n      setSubscription(prev => ({ \r\n        ...prev, \r\n        isSubscribed: false, \r\n        isLoading: false \r\n      }));\r\n      return;\r\n    }\r\n    \r\n    // Show loading state if requested\r\n    if (showLoading) {\r\n      setSubscription(prev => ({ ...prev, isLoading: true }));\r\n    }\r\n    \r\n    try {\r\n      // Check if token is expired\r\n      const expiryDate = localStorage.getItem(storageKeys.SUBSCRIPTION_EXPIRY);\r\n      \r\n      if (!expiryDate || new Date(expiryDate) <= new Date()) {\r\n        // Token expired, clear storage\r\n        localStorage.removeItem(storageKeys.SUBSCRIPTION_TOKEN);\r\n        localStorage.removeItem(storageKeys.SUBSCRIPTION_EXPIRY);\r\n        \r\n        setSubscription({\r\n          isSubscribed: false,\r\n          plan: null,\r\n          expiresAt: null,\r\n          isLoading: false,\r\n          error: 'Subscription expired'\r\n        });\r\n        return;\r\n      }\r\n      \r\n      // Valid subscription\r\n      setSubscription({\r\n        isSubscribed: true,\r\n        // For development, assume plan from localStorage or default to monthly\r\n        plan: localStorage.getItem('subscription_plan') || 'monthly_premium',\r\n        expiresAt: expiryDate,\r\n        isLoading: false,\r\n        error: null\r\n      });\r\n    } catch (error) {\r\n      console.error('Subscription verification failed:', error);\r\n      \r\n      // Fallback to local verification\r\n      const expiryDate = localStorage.getItem(storageKeys.SUBSCRIPTION_EXPIRY);\r\n      if (expiryDate && new Date(expiryDate) > new Date()) {\r\n        setSubscription(prev => ({\r\n          ...prev,\r\n          isSubscribed: true,\r\n          isOfflineVerified: true,\r\n          isLoading: false\r\n        }));\r\n      } else {\r\n        setSubscription(prev => ({\r\n          ...prev,\r\n          isSubscribed: false,\r\n          isLoading: false,\r\n          error: 'Failed to verify subscription status'\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const purchaseSubscription = async (email, plan) => {\r\n    setSubscription(prev => ({ ...prev, isLoading: true }));\r\n    \r\n    try {\r\n      // For development, simulate a successful subscription\r\n      // In production, this would create a checkout session with Stripe\r\n      \r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      \r\n      // Generate mock data\r\n      const token = 'token_' + Date.now();\r\n      const expiryDate = new Date();\r\n      \r\n      // Set expiration based on plan\r\n      if (plan === 'yearly_premium') {\r\n        expiryDate.setFullYear(expiryDate.getFullYear() + 1);\r\n      } else {\r\n        expiryDate.setMonth(expiryDate.getMonth() + 1);\r\n      }\r\n      \r\n      // Store in localStorage\r\n      localStorage.setItem(storageKeys.SUBSCRIPTION_TOKEN, token);\r\n      localStorage.setItem(storageKeys.SUBSCRIPTION_EXPIRY, expiryDate.toISOString());\r\n      localStorage.setItem('subscription_plan', plan);\r\n      \r\n      // Generate a mock mobile access code\r\n      const mobileAccessCode = 'TEST-' + Math.random().toString(36).substring(2, 6).toUpperCase() + '-CODE';\r\n      \r\n      // Update subscription state\r\n      setSubscription({\r\n        isSubscribed: true,\r\n        plan: plan,\r\n        expiresAt: expiryDate.toISOString(),\r\n        isLoading: false,\r\n        error: null\r\n      });\r\n      \r\n      return {\r\n        success: true,\r\n        mobileAccessCode\r\n      };\r\n    } catch (error) {\r\n      console.error('Purchase subscription error:', error);\r\n      \r\n      setSubscription(prev => ({\r\n        ...prev,\r\n        isLoading: false,\r\n        error: 'Failed to process subscription'\r\n      }));\r\n      \r\n      return {\r\n        success: false,\r\n        error: 'Failed to process subscription'\r\n      };\r\n    }\r\n  };\r\n\r\n  const activateTokenFromEmail = async (token) => {\r\n    setSubscription(prev => ({ ...prev, isLoading: true }));\r\n    \r\n    try {\r\n      // For development, simulate activation\r\n      // In production, this would verify the token with your server\r\n      \r\n      // Simulate API delay\r\n      await new Promise(resolve => setTimeout(resolve, 1000));\r\n      \r\n      // Store token in localStorage\r\n      localStorage.setItem(storageKeys.SUBSCRIPTION_TOKEN, token);\r\n      \r\n      // Set expiry to 30 days from now (for demo)\r\n      const expiryDate = new Date();\r\n      expiryDate.setDate(expiryDate.getDate() + 30);\r\n      localStorage.setItem(storageKeys.SUBSCRIPTION_EXPIRY, expiryDate.toISOString());\r\n      \r\n      // Update subscription state\r\n      setSubscription({\r\n        isSubscribed: true,\r\n        plan: 'monthly_premium', // Assume monthly plan for activation\r\n        expiresAt: expiryDate.toISOString(),\r\n        isLoading: false,\r\n        error: null\r\n      });\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Token activation failed:', error);\r\n      \r\n      setSubscription(prev => ({\r\n        ...prev,\r\n        isLoading: false,\r\n        error: 'Failed to activate subscription'\r\n      }));\r\n      \r\n      return {\r\n        success: false,\r\n        error: 'Failed to activate subscription'\r\n      };\r\n    }\r\n  };\r\n\r\n  const cancelSubscription = async () => {\r\n    try {\r\n      // For development, just remove from localStorage\r\n      // In production, this would call your backend to cancel in Stripe\r\n      \r\n      // Clear local storage\r\n      localStorage.removeItem(storageKeys.SUBSCRIPTION_TOKEN);\r\n      localStorage.removeItem(storageKeys.SUBSCRIPTION_EXPIRY);\r\n      localStorage.removeItem('subscription_plan');\r\n      \r\n      // Update state\r\n      setSubscription({\r\n        isSubscribed: false,\r\n        plan: null,\r\n        expiresAt: null,\r\n        isLoading: false,\r\n        error: null\r\n      });\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Cancel subscription error:', error);\r\n      \r\n      return {\r\n        success: false,\r\n        error: 'Failed to cancel subscription'\r\n      };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SubscriptionContext.Provider value={{\r\n      ...subscription,\r\n      purchaseSubscription,\r\n      activateTokenFromEmail,\r\n      refreshSubscription: verifySubscription,\r\n      cancelSubscription\r\n    }}>\r\n      {children}\r\n    </SubscriptionContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SubscriptionContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}