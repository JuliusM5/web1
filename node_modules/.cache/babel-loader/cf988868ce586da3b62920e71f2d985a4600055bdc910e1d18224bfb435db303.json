{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\context\\\\SubscriptionContext.jsx\",\n  _s = $RefreshSig$();\n// src/context/SubscriptionContext.jsx\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport { useDeviceDetection } from '../utils/deviceDetection'; // Use the named export that exists\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SubscriptionContext = /*#__PURE__*/createContext();\nexport const SubscriptionProvider = ({\n  children\n}) => {\n  _s();\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  const [subscriptionPlan, setSubscriptionPlan] = useState(null);\n  const [freeAlertCount, setFreeAlertCount] = useState(0);\n  const [expiryDate, setExpiryDate] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const deviceInfo = useDeviceDetection(); // Use the existing function\n\n  // Load subscription state on mount\n  useEffect(() => {\n    // Simulated subscription check\n    const loadSubscription = async () => {\n      try {\n        // In a real app, this would come from a service or API\n        const mockSubscriptionData = localStorage.getItem('user_subscription');\n        if (mockSubscriptionData) {\n          const parsedData = JSON.parse(mockSubscriptionData);\n          setIsSubscribed(parsedData.isSubscribed);\n          setSubscriptionPlan(parsedData.plan);\n          setFreeAlertCount(parsedData.freeAlertsUsed || 0);\n          setExpiryDate(parsedData.expiryDate ? new Date(parsedData.expiryDate) : null);\n        }\n      } catch (error) {\n        console.error('Error loading subscription:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadSubscription();\n  }, []);\n  const incrementFreeAlertCount = () => {\n    if (!isSubscribed && freeAlertCount < 3) {\n      const newCount = freeAlertCount + 1;\n      setFreeAlertCount(newCount);\n      return true;\n    }\n    return false;\n  };\n  const startSubscription = async plan => {\n    setLoading(true);\n    try {\n      // Simulated subscription start\n      const mockResult = {\n        success: true,\n        expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days\n      };\n      if (mockResult.success) {\n        setIsSubscribed(true);\n        setSubscriptionPlan(plan);\n        setExpiryDate(mockResult.expiryDate);\n\n        // Save to localStorage for persistence\n        localStorage.setItem('user_subscription', JSON.stringify({\n          isSubscribed: true,\n          plan: plan,\n          expiryDate: mockResult.expiryDate.toISOString(),\n          freeAlertsUsed: freeAlertCount\n        }));\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        error: 'Subscription failed'\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const cancelSubscription = async () => {\n    setLoading(true);\n    try {\n      // Simulated cancellation\n      setIsSubscribed(false);\n      setSubscriptionPlan(null);\n      setExpiryDate(null);\n\n      // Update localStorage\n      localStorage.setItem('user_subscription', JSON.stringify({\n        isSubscribed: false,\n        plan: null,\n        expiryDate: null,\n        freeAlertsUsed: freeAlertCount\n      }));\n      return {\n        success: true\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SubscriptionContext.Provider, {\n    value: {\n      isSubscribed,\n      subscriptionPlan,\n      freeAlertCount,\n      expiryDate,\n      loading,\n      incrementFreeAlertCount,\n      startSubscription,\n      cancelSubscription\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s(SubscriptionProvider, \"f/ymQNlqVHHtNrcP22yxEbHheek=\", false, function () {\n  return [useDeviceDetection];\n});\n_c = SubscriptionProvider;\nexport default SubscriptionContext;\nvar _c;\n$RefreshReg$(_c, \"SubscriptionProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useDeviceDetection","jsxDEV","_jsxDEV","SubscriptionContext","SubscriptionProvider","children","_s","isSubscribed","setIsSubscribed","subscriptionPlan","setSubscriptionPlan","freeAlertCount","setFreeAlertCount","expiryDate","setExpiryDate","loading","setLoading","deviceInfo","loadSubscription","mockSubscriptionData","localStorage","getItem","parsedData","JSON","parse","plan","freeAlertsUsed","Date","error","console","incrementFreeAlertCount","newCount","startSubscription","mockResult","success","now","setItem","stringify","toISOString","message","cancelSubscription","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/context/SubscriptionContext.jsx"],"sourcesContent":["// src/context/SubscriptionContext.jsx\r\n\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport { useDeviceDetection } from '../utils/deviceDetection'; // Use the named export that exists\r\n\r\nconst SubscriptionContext = createContext();\r\n\r\nexport const SubscriptionProvider = ({ children }) => {\r\n  const [isSubscribed, setIsSubscribed] = useState(false);\r\n  const [subscriptionPlan, setSubscriptionPlan] = useState(null);\r\n  const [freeAlertCount, setFreeAlertCount] = useState(0);\r\n  const [expiryDate, setExpiryDate] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const deviceInfo = useDeviceDetection(); // Use the existing function\r\n  \r\n  // Load subscription state on mount\r\n  useEffect(() => {\r\n    // Simulated subscription check\r\n    const loadSubscription = async () => {\r\n      try {\r\n        // In a real app, this would come from a service or API\r\n        const mockSubscriptionData = localStorage.getItem('user_subscription');\r\n        if (mockSubscriptionData) {\r\n          const parsedData = JSON.parse(mockSubscriptionData);\r\n          setIsSubscribed(parsedData.isSubscribed);\r\n          setSubscriptionPlan(parsedData.plan);\r\n          setFreeAlertCount(parsedData.freeAlertsUsed || 0);\r\n          setExpiryDate(parsedData.expiryDate ? new Date(parsedData.expiryDate) : null);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading subscription:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadSubscription();\r\n  }, []);\r\n  \r\n  const incrementFreeAlertCount = () => {\r\n    if (!isSubscribed && freeAlertCount < 3) {\r\n      const newCount = freeAlertCount + 1;\r\n      setFreeAlertCount(newCount);\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  \r\n  const startSubscription = async (plan) => {\r\n    setLoading(true);\r\n    try {\r\n      // Simulated subscription start\r\n      const mockResult = {\r\n        success: true,\r\n        expiryDate: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000) // 30 days\r\n      };\r\n      \r\n      if (mockResult.success) {\r\n        setIsSubscribed(true);\r\n        setSubscriptionPlan(plan);\r\n        setExpiryDate(mockResult.expiryDate);\r\n        \r\n        // Save to localStorage for persistence\r\n        localStorage.setItem('user_subscription', JSON.stringify({\r\n          isSubscribed: true,\r\n          plan: plan,\r\n          expiryDate: mockResult.expiryDate.toISOString(),\r\n          freeAlertsUsed: freeAlertCount\r\n        }));\r\n        \r\n        return { success: true };\r\n      }\r\n      \r\n      return { success: false, error: 'Subscription failed' };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  const cancelSubscription = async () => {\r\n    setLoading(true);\r\n    try {\r\n      // Simulated cancellation\r\n      setIsSubscribed(false);\r\n      setSubscriptionPlan(null);\r\n      setExpiryDate(null);\r\n      \r\n      // Update localStorage\r\n      localStorage.setItem('user_subscription', JSON.stringify({\r\n        isSubscribed: false,\r\n        plan: null,\r\n        expiryDate: null,\r\n        freeAlertsUsed: freeAlertCount\r\n      }));\r\n      \r\n      return { success: true };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <SubscriptionContext.Provider value={{\r\n      isSubscribed,\r\n      subscriptionPlan,\r\n      freeAlertCount,\r\n      expiryDate,\r\n      loading,\r\n      incrementFreeAlertCount,\r\n      startSubscription,\r\n      cancelSubscription\r\n    }}>\r\n      {children}\r\n    </SubscriptionContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SubscriptionContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}