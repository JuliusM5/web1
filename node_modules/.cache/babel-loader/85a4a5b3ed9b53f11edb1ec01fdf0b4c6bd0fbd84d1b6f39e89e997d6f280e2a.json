{"ast":null,"code":"// src/services/stripeService.js\n// Simplified Stripe service using the global Stripe.js\n\nimport ApiClient from './ApiClient';\nimport { captureError } from '../utils/errorMonitoring';\nclass StripeService {\n  constructor() {\n    this.stripe = null;\n    this.elements = null;\n    this.apiKey = process.env.REACT_APP_STRIPE_PUBLIC_KEY || '';\n    this.initialized = false;\n  }\n\n  // Load Stripe.js and initialize\n  async init() {\n    if (this.initialized) return;\n    try {\n      // Check if Stripe.js is already loaded\n      if (window.Stripe) {\n        this.stripe = window.Stripe(this.apiKey);\n        this.initialized = true;\n        return;\n      }\n\n      // Load Stripe.js dynamically\n      return new Promise((resolve, reject) => {\n        const script = document.createElement('script');\n        script.src = 'https://js.stripe.com/v3/';\n        script.async = true;\n        script.onload = () => {\n          this.stripe = window.Stripe(this.apiKey);\n          this.initialized = true;\n          resolve();\n        };\n        script.onerror = error => {\n          console.error('Failed to load Stripe.js:', error);\n          reject(new Error('Failed to load Stripe.js'));\n        };\n        document.body.appendChild(script);\n      });\n    } catch (error) {\n      console.error('Failed to initialize Stripe:', error);\n      captureError(error, {\n        context: 'Stripe initialization'\n      });\n      throw error;\n    }\n  }\n\n  // Make sure Stripe is initialized before using it\n  async ensureInitialized() {\n    if (!this.initialized) {\n      await this.init();\n    }\n    if (!this.stripe) {\n      throw new Error('Stripe failed to initialize');\n    }\n  }\n\n  // Create a payment method from a card element\n  async createPaymentMethod(cardElement, billingDetails) {\n    await this.ensureInitialized();\n    try {\n      const result = await this.stripe.createPaymentMethod({\n        type: 'card',\n        card: cardElement,\n        billing_details: billingDetails\n      });\n      if (result.error) {\n        throw result.error;\n      }\n      return result.paymentMethod;\n    } catch (error) {\n      console.error('Failed to create payment method:', error);\n      captureError(error, {\n        context: 'Create payment method'\n      });\n      throw error;\n    }\n  }\n\n  // Create a subscription through API\n  async createSubscription(paymentMethodId, planId) {\n    try {\n      // We'll use our API client to call our backend\n      const response = await ApiClient.post('/api/subscriptions', {\n        paymentMethodId,\n        planId\n      });\n      return response;\n    } catch (error) {\n      console.error('Failed to create subscription:', error);\n      captureError(error, {\n        context: 'Create subscription'\n      });\n      throw error;\n    }\n  }\n\n  // Cancel a subscription\n  async cancelSubscription(subscriptionId) {\n    try {\n      const response = await ApiClient.post(`/api/subscriptions/${subscriptionId}/cancel`);\n      return response;\n    } catch (error) {\n      console.error('Failed to cancel subscription:', error);\n      captureError(error, {\n        context: 'Cancel subscription'\n      });\n      throw error;\n    }\n  }\n\n  // For displaying card input in the UI\n  createCardElement(options = {}) {\n    if (!this.stripe) {\n      console.error('Stripe not initialized');\n      return null;\n    }\n    if (!this.elements) {\n      this.elements = this.stripe.elements();\n    }\n\n    // Default styling options\n    const defaultOptions = {\n      style: {\n        base: {\n          fontSize: '16px',\n          color: '#32325d',\n          fontFamily: 'Arial, sans-serif',\n          '::placeholder': {\n            color: '#aab7c4'\n          }\n        },\n        invalid: {\n          color: '#fa755a',\n          iconColor: '#fa755a'\n        }\n      }\n    };\n    return this.elements.create('card', {\n      ...defaultOptions,\n      ...options\n    });\n  }\n\n  // Mock method for testing without Stripe\n  mockCreateSubscription(planId) {\n    return {\n      id: `sub_mock_${Math.random().toString(36).substring(2, 11)}`,\n      status: 'active',\n      current_period_end: Math.floor(Date.now() / 1000) + 30 * 24 * 60 * 60,\n      // 30 days from now\n      plan: {\n        id: planId,\n        amount: planId === 'premium_monthly' ? 999 : 9999 // $9.99 or $99.99\n      }\n    };\n  }\n}\nexport default new StripeService();","map":{"version":3,"names":["ApiClient","captureError","StripeService","constructor","stripe","elements","apiKey","process","env","REACT_APP_STRIPE_PUBLIC_KEY","initialized","init","window","Stripe","Promise","resolve","reject","script","document","createElement","src","async","onload","onerror","error","console","Error","body","appendChild","context","ensureInitialized","createPaymentMethod","cardElement","billingDetails","result","type","card","billing_details","paymentMethod","createSubscription","paymentMethodId","planId","response","post","cancelSubscription","subscriptionId","createCardElement","options","defaultOptions","style","base","fontSize","color","fontFamily","invalid","iconColor","create","mockCreateSubscription","id","Math","random","toString","substring","status","current_period_end","floor","Date","now","plan","amount"],"sources":["C:/Users/juliu/Desktop/web/src/services/stripeService.js"],"sourcesContent":["// src/services/stripeService.js\r\n// Simplified Stripe service using the global Stripe.js\r\n\r\nimport ApiClient from './ApiClient';\r\nimport { captureError } from '../utils/errorMonitoring';\r\n\r\nclass StripeService {\r\n  constructor() {\r\n    this.stripe = null;\r\n    this.elements = null;\r\n    this.apiKey = process.env.REACT_APP_STRIPE_PUBLIC_KEY || '';\r\n    this.initialized = false;\r\n  }\r\n\r\n  // Load Stripe.js and initialize\r\n  async init() {\r\n    if (this.initialized) return;\r\n    \r\n    try {\r\n      // Check if Stripe.js is already loaded\r\n      if (window.Stripe) {\r\n        this.stripe = window.Stripe(this.apiKey);\r\n        this.initialized = true;\r\n        return;\r\n      }\r\n      \r\n      // Load Stripe.js dynamically\r\n      return new Promise((resolve, reject) => {\r\n        const script = document.createElement('script');\r\n        script.src = 'https://js.stripe.com/v3/';\r\n        script.async = true;\r\n        \r\n        script.onload = () => {\r\n          this.stripe = window.Stripe(this.apiKey);\r\n          this.initialized = true;\r\n          resolve();\r\n        };\r\n        \r\n        script.onerror = (error) => {\r\n          console.error('Failed to load Stripe.js:', error);\r\n          reject(new Error('Failed to load Stripe.js'));\r\n        };\r\n        \r\n        document.body.appendChild(script);\r\n      });\r\n    } catch (error) {\r\n      console.error('Failed to initialize Stripe:', error);\r\n      captureError(error, { context: 'Stripe initialization' });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Make sure Stripe is initialized before using it\r\n  async ensureInitialized() {\r\n    if (!this.initialized) {\r\n      await this.init();\r\n    }\r\n    \r\n    if (!this.stripe) {\r\n      throw new Error('Stripe failed to initialize');\r\n    }\r\n  }\r\n\r\n  // Create a payment method from a card element\r\n  async createPaymentMethod(cardElement, billingDetails) {\r\n    await this.ensureInitialized();\r\n    \r\n    try {\r\n      const result = await this.stripe.createPaymentMethod({\r\n        type: 'card',\r\n        card: cardElement,\r\n        billing_details: billingDetails\r\n      });\r\n      \r\n      if (result.error) {\r\n        throw result.error;\r\n      }\r\n      \r\n      return result.paymentMethod;\r\n    } catch (error) {\r\n      console.error('Failed to create payment method:', error);\r\n      captureError(error, { context: 'Create payment method' });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Create a subscription through API\r\n  async createSubscription(paymentMethodId, planId) {\r\n    try {\r\n      // We'll use our API client to call our backend\r\n      const response = await ApiClient.post('/api/subscriptions', {\r\n        paymentMethodId,\r\n        planId\r\n      });\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      console.error('Failed to create subscription:', error);\r\n      captureError(error, { context: 'Create subscription' });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Cancel a subscription\r\n  async cancelSubscription(subscriptionId) {\r\n    try {\r\n      const response = await ApiClient.post(`/api/subscriptions/${subscriptionId}/cancel`);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Failed to cancel subscription:', error);\r\n      captureError(error, { context: 'Cancel subscription' });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // For displaying card input in the UI\r\n  createCardElement(options = {}) {\r\n    if (!this.stripe) {\r\n      console.error('Stripe not initialized');\r\n      return null;\r\n    }\r\n    \r\n    if (!this.elements) {\r\n      this.elements = this.stripe.elements();\r\n    }\r\n    \r\n    // Default styling options\r\n    const defaultOptions = {\r\n      style: {\r\n        base: {\r\n          fontSize: '16px',\r\n          color: '#32325d',\r\n          fontFamily: 'Arial, sans-serif',\r\n          '::placeholder': {\r\n            color: '#aab7c4'\r\n          }\r\n        },\r\n        invalid: {\r\n          color: '#fa755a',\r\n          iconColor: '#fa755a'\r\n        }\r\n      }\r\n    };\r\n    \r\n    return this.elements.create('card', {\r\n      ...defaultOptions,\r\n      ...options\r\n    });\r\n  }\r\n\r\n  // Mock method for testing without Stripe\r\n  mockCreateSubscription(planId) {\r\n    return {\r\n      id: `sub_mock_${Math.random().toString(36).substring(2, 11)}`,\r\n      status: 'active',\r\n      current_period_end: Math.floor(Date.now() / 1000) + 30 * 24 * 60 * 60, // 30 days from now\r\n      plan: {\r\n        id: planId,\r\n        amount: planId === 'premium_monthly' ? 999 : 9999 // $9.99 or $99.99\r\n      }\r\n    };\r\n  }\r\n}\r\n\r\nexport default new StripeService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}