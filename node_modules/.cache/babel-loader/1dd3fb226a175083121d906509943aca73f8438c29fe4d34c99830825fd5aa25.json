{"ast":null,"code":"// src/utils/i18n.js\nimport{useState,useEffect,createContext,useContext}from'react';import translations from'./translations';// Create a context for internationalization\nimport{jsx as _jsx}from\"react/jsx-runtime\";const I18nContext=/*#__PURE__*/createContext();// Default language\nconst DEFAULT_LANGUAGE='en-US';// Available languages\nexport const AVAILABLE_LANGUAGES=[{code:'en-US',name:'English (US)'},{code:'en-GB',name:'English (UK)'},{code:'es-ES',name:'Spanish'},{code:'fr-FR',name:'French'},{code:'de-DE',name:'German'},{code:'it-IT',name:'Italian'},{code:'ja-JP',name:'Japanese'},{code:'zh-CN',name:'Chinese (Simplified)'}];// Provider component for internationalization\nexport const I18nProvider=_ref=>{let{children}=_ref;const[language,setLanguage]=useState(DEFAULT_LANGUAGE);// Function to set the language\nconst changeLanguage=lang=>{if(translations[lang]){setLanguage(lang);// Update HTML lang attribute\ndocument.documentElement.setAttribute('lang',lang.split('-')[0]);// Store in local storage for persistence\nlocalStorage.setItem('userLanguage',lang);}};// Get translation for a key\nconst t=function(key){var _translations$languag,_translations$DEFAULT;let replacements=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};// Get the translation from the current language\nlet translation=((_translations$languag=translations[language])===null||_translations$languag===void 0?void 0:_translations$languag[key])||((_translations$DEFAULT=translations[DEFAULT_LANGUAGE])===null||_translations$DEFAULT===void 0?void 0:_translations$DEFAULT[key])||key;// Replace placeholders with actual values\nObject.entries(replacements).forEach(_ref2=>{let[placeholder,value]=_ref2;translation=translation.replace(`{${placeholder}}`,value);});return translation;};// Initialize language from localStorage or settings\nuseEffect(()=>{const storedLanguage=localStorage.getItem('userLanguage');if(storedLanguage&&translations[storedLanguage]){setLanguage(storedLanguage);document.documentElement.setAttribute('lang',storedLanguage.split('-')[0]);}else{// Try to get language from user settings\ntry{var _userSettings$prefere;const userSettings=JSON.parse(localStorage.getItem('userSettings'));const settingsLanguage=userSettings===null||userSettings===void 0?void 0:(_userSettings$prefere=userSettings.preferences)===null||_userSettings$prefere===void 0?void 0:_userSettings$prefere.language;if(settingsLanguage&&translations[settingsLanguage]){setLanguage(settingsLanguage);document.documentElement.setAttribute('lang',settingsLanguage.split('-')[0]);}}catch(error){console.error('Error loading language from settings:',error);}}},[]);// Listen for settings changes to sync language\nuseEffect(()=>{const handleStorageChange=e=>{if(e.key==='userSettings'){try{var _userSettings$prefere2;const userSettings=JSON.parse(e.newValue);const settingsLanguage=userSettings===null||userSettings===void 0?void 0:(_userSettings$prefere2=userSettings.preferences)===null||_userSettings$prefere2===void 0?void 0:_userSettings$prefere2.language;if(settingsLanguage&&translations[settingsLanguage]&&settingsLanguage!==language){setLanguage(settingsLanguage);document.documentElement.setAttribute('lang',settingsLanguage.split('-')[0]);}}catch(error){console.error('Error syncing language from settings:',error);}}};window.addEventListener('storage',handleStorageChange);return()=>window.removeEventListener('storage',handleStorageChange);},[language]);return/*#__PURE__*/_jsx(I18nContext.Provider,{value:{language,changeLanguage,t},children:children});};// Custom hook to use the internationalization context\nexport const useI18n=()=>{const context=useContext(I18nContext);if(!context){throw new Error('useI18n must be used within an I18nProvider');}return context;};// Connect the settings language preference with the i18n system\nexport const syncLanguageWithSettings=userSettings=>{var _userSettings$prefere3;if(userSettings!==null&&userSettings!==void 0&&(_userSettings$prefere3=userSettings.preferences)!==null&&_userSettings$prefere3!==void 0&&_userSettings$prefere3.language){const settingsLanguage=userSettings.preferences.language;if(translations[settingsLanguage]){localStorage.setItem('userLanguage',settingsLanguage);document.documentElement.setAttribute('lang',settingsLanguage.split('-')[0]);return true;}}return false;};","map":{"version":3,"names":["useState","useEffect","createContext","useContext","translations","jsx","_jsx","I18nContext","DEFAULT_LANGUAGE","AVAILABLE_LANGUAGES","code","name","I18nProvider","_ref","children","language","setLanguage","changeLanguage","lang","document","documentElement","setAttribute","split","localStorage","setItem","t","key","_translations$languag","_translations$DEFAULT","replacements","arguments","length","undefined","translation","Object","entries","forEach","_ref2","placeholder","value","replace","storedLanguage","getItem","_userSettings$prefere","userSettings","JSON","parse","settingsLanguage","preferences","error","console","handleStorageChange","e","_userSettings$prefere2","newValue","window","addEventListener","removeEventListener","Provider","useI18n","context","Error","syncLanguageWithSettings","_userSettings$prefere3"],"sources":["C:/Users/juliu/Desktop/web/src/utils/i18n.js"],"sourcesContent":["// src/utils/i18n.js\r\nimport { useState, useEffect, createContext, useContext } from 'react';\r\nimport translations from './translations';\r\n\r\n// Create a context for internationalization\r\nconst I18nContext = createContext();\r\n\r\n// Default language\r\nconst DEFAULT_LANGUAGE = 'en-US';\r\n\r\n// Available languages\r\nexport const AVAILABLE_LANGUAGES = [\r\n  { code: 'en-US', name: 'English (US)' },\r\n  { code: 'en-GB', name: 'English (UK)' },\r\n  { code: 'es-ES', name: 'Spanish' },\r\n  { code: 'fr-FR', name: 'French' },\r\n  { code: 'de-DE', name: 'German' },\r\n  { code: 'it-IT', name: 'Italian' },\r\n  { code: 'ja-JP', name: 'Japanese' },\r\n  { code: 'zh-CN', name: 'Chinese (Simplified)' },\r\n];\r\n\r\n// Provider component for internationalization\r\nexport const I18nProvider = ({ children }) => {\r\n  const [language, setLanguage] = useState(DEFAULT_LANGUAGE);\r\n  \r\n  // Function to set the language\r\n  const changeLanguage = (lang) => {\r\n    if (translations[lang]) {\r\n      setLanguage(lang);\r\n      // Update HTML lang attribute\r\n      document.documentElement.setAttribute('lang', lang.split('-')[0]);\r\n      // Store in local storage for persistence\r\n      localStorage.setItem('userLanguage', lang);\r\n    }\r\n  };\r\n  \r\n  // Get translation for a key\r\n  const t = (key, replacements = {}) => {\r\n    // Get the translation from the current language\r\n    let translation = translations[language]?.[key] || translations[DEFAULT_LANGUAGE]?.[key] || key;\r\n    \r\n    // Replace placeholders with actual values\r\n    Object.entries(replacements).forEach(([placeholder, value]) => {\r\n      translation = translation.replace(`{${placeholder}}`, value);\r\n    });\r\n    \r\n    return translation;\r\n  };\r\n  \r\n  // Initialize language from localStorage or settings\r\n  useEffect(() => {\r\n    const storedLanguage = localStorage.getItem('userLanguage');\r\n    if (storedLanguage && translations[storedLanguage]) {\r\n      setLanguage(storedLanguage);\r\n      document.documentElement.setAttribute('lang', storedLanguage.split('-')[0]);\r\n    } else {\r\n      // Try to get language from user settings\r\n      try {\r\n        const userSettings = JSON.parse(localStorage.getItem('userSettings'));\r\n        const settingsLanguage = userSettings?.preferences?.language;\r\n        \r\n        if (settingsLanguage && translations[settingsLanguage]) {\r\n          setLanguage(settingsLanguage);\r\n          document.documentElement.setAttribute('lang', settingsLanguage.split('-')[0]);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading language from settings:', error);\r\n      }\r\n    }\r\n  }, []);\r\n  \r\n  // Listen for settings changes to sync language\r\n  useEffect(() => {\r\n    const handleStorageChange = (e) => {\r\n      if (e.key === 'userSettings') {\r\n        try {\r\n          const userSettings = JSON.parse(e.newValue);\r\n          const settingsLanguage = userSettings?.preferences?.language;\r\n          \r\n          if (settingsLanguage && translations[settingsLanguage] && settingsLanguage !== language) {\r\n            setLanguage(settingsLanguage);\r\n            document.documentElement.setAttribute('lang', settingsLanguage.split('-')[0]);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error syncing language from settings:', error);\r\n        }\r\n      }\r\n    };\r\n    \r\n    window.addEventListener('storage', handleStorageChange);\r\n    return () => window.removeEventListener('storage', handleStorageChange);\r\n  }, [language]);\r\n  \r\n  return (\r\n    <I18nContext.Provider value={{ language, changeLanguage, t }}>\r\n      {children}\r\n    </I18nContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the internationalization context\r\nexport const useI18n = () => {\r\n  const context = useContext(I18nContext);\r\n  if (!context) {\r\n    throw new Error('useI18n must be used within an I18nProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Connect the settings language preference with the i18n system\r\nexport const syncLanguageWithSettings = (userSettings) => {\r\n  if (userSettings?.preferences?.language) {\r\n    const settingsLanguage = userSettings.preferences.language;\r\n    if (translations[settingsLanguage]) {\r\n      localStorage.setItem('userLanguage', settingsLanguage);\r\n      document.documentElement.setAttribute('lang', settingsLanguage.split('-')[0]);\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}