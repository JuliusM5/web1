{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\context\\\\SubscriptionContext.jsx\",\n  _s = $RefreshSig$();\n// src/context/SubscriptionContext.jsx\n\nimport React, { createContext, useState, useEffect } from 'react';\nimport SubscriptionService from '../services/SubscriptionService';\nimport { deviceDetection } from '../utils/deviceDetection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SubscriptionContext = /*#__PURE__*/createContext();\nexport const SubscriptionProvider = ({\n  children\n}) => {\n  _s();\n  const [isSubscribed, setIsSubscribed] = useState(false);\n  const [subscriptionPlan, setSubscriptionPlan] = useState(null);\n  const [freeAlertCount, setFreeAlertCount] = useState(0);\n  const [expiryDate, setExpiryDate] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const deviceInfo = deviceDetection();\n  useEffect(() => {\n    // Load subscription state on mount\n    const loadSubscription = async () => {\n      try {\n        const state = SubscriptionService.getSubscriptionState();\n        setIsSubscribed(state.isSubscribed);\n        setSubscriptionPlan(state.plan);\n        setFreeAlertCount(state.freeAlertsUsed);\n        setExpiryDate(state.expiryDate ? new Date(state.expiryDate) : null);\n      } catch (error) {\n        console.error('Error loading subscription:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadSubscription();\n  }, []);\n  const incrementFreeAlertCount = () => {\n    if (!isSubscribed && freeAlertCount < 3) {\n      const newCount = freeAlertCount + 1;\n      setFreeAlertCount(newCount);\n      return true;\n    }\n    return false;\n  };\n  const startSubscription = async plan => {\n    setLoading(true);\n    try {\n      // Determine platform for payment\n      const platform = deviceInfo.isIOS ? 'ios' : deviceInfo.isAndroid ? 'android' : 'web';\n      const result = await SubscriptionService.startSubscription(plan, platform);\n      if (result.success) {\n        const state = SubscriptionService.getSubscriptionState();\n        setIsSubscribed(state.isSubscribed);\n        setSubscriptionPlan(state.plan);\n        setExpiryDate(state.expiryDate ? new Date(state.expiryDate) : null);\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        error: result.error\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const cancelSubscription = async () => {\n    setLoading(true);\n    try {\n      const result = await SubscriptionService.cancelSubscription();\n      if (result.success) {\n        setIsSubscribed(false);\n        setSubscriptionPlan(null);\n        setExpiryDate(null);\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        error: result.error\n      };\n    } catch (error) {\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(SubscriptionContext.Provider, {\n    value: {\n      isSubscribed,\n      subscriptionPlan,\n      freeAlertCount,\n      expiryDate,\n      loading,\n      incrementFreeAlertCount,\n      startSubscription,\n      cancelSubscription\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(SubscriptionProvider, \"ubHWJTlxhnt8lzkN1iO+X6VwAZE=\");\n_c = SubscriptionProvider;\nvar _c;\n$RefreshReg$(_c, \"SubscriptionProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","SubscriptionService","deviceDetection","jsxDEV","_jsxDEV","SubscriptionContext","SubscriptionProvider","children","_s","isSubscribed","setIsSubscribed","subscriptionPlan","setSubscriptionPlan","freeAlertCount","setFreeAlertCount","expiryDate","setExpiryDate","loading","setLoading","deviceInfo","loadSubscription","state","getSubscriptionState","plan","freeAlertsUsed","Date","error","console","incrementFreeAlertCount","newCount","startSubscription","platform","isIOS","isAndroid","result","success","message","cancelSubscription","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/context/SubscriptionContext.jsx"],"sourcesContent":["// src/context/SubscriptionContext.jsx\r\n\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport SubscriptionService from '../services/SubscriptionService';\r\nimport { deviceDetection } from '../utils/deviceDetection';\r\n\r\nexport const SubscriptionContext = createContext();\r\n\r\nexport const SubscriptionProvider = ({ children }) => {\r\n  const [isSubscribed, setIsSubscribed] = useState(false);\r\n  const [subscriptionPlan, setSubscriptionPlan] = useState(null);\r\n  const [freeAlertCount, setFreeAlertCount] = useState(0);\r\n  const [expiryDate, setExpiryDate] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const deviceInfo = deviceDetection();\r\n  \r\n  useEffect(() => {\r\n    // Load subscription state on mount\r\n    const loadSubscription = async () => {\r\n      try {\r\n        const state = SubscriptionService.getSubscriptionState();\r\n        setIsSubscribed(state.isSubscribed);\r\n        setSubscriptionPlan(state.plan);\r\n        setFreeAlertCount(state.freeAlertsUsed);\r\n        setExpiryDate(state.expiryDate ? new Date(state.expiryDate) : null);\r\n      } catch (error) {\r\n        console.error('Error loading subscription:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadSubscription();\r\n  }, []);\r\n  \r\n  const incrementFreeAlertCount = () => {\r\n    if (!isSubscribed && freeAlertCount < 3) {\r\n      const newCount = freeAlertCount + 1;\r\n      setFreeAlertCount(newCount);\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n  \r\n  const startSubscription = async (plan) => {\r\n    setLoading(true);\r\n    try {\r\n      // Determine platform for payment\r\n      const platform = deviceInfo.isIOS ? 'ios' : \r\n                      deviceInfo.isAndroid ? 'android' : 'web';\r\n                      \r\n      const result = await SubscriptionService.startSubscription(plan, platform);\r\n      \r\n      if (result.success) {\r\n        const state = SubscriptionService.getSubscriptionState();\r\n        setIsSubscribed(state.isSubscribed);\r\n        setSubscriptionPlan(state.plan);\r\n        setExpiryDate(state.expiryDate ? new Date(state.expiryDate) : null);\r\n        return { success: true };\r\n      }\r\n      \r\n      return { success: false, error: result.error };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  const cancelSubscription = async () => {\r\n    setLoading(true);\r\n    try {\r\n      const result = await SubscriptionService.cancelSubscription();\r\n      \r\n      if (result.success) {\r\n        setIsSubscribed(false);\r\n        setSubscriptionPlan(null);\r\n        setExpiryDate(null);\r\n        return { success: true };\r\n      }\r\n      \r\n      return { success: false, error: result.error };\r\n    } catch (error) {\r\n      return { success: false, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <SubscriptionContext.Provider value={{\r\n      isSubscribed,\r\n      subscriptionPlan,\r\n      freeAlertCount,\r\n      expiryDate,\r\n      loading,\r\n      incrementFreeAlertCount,\r\n      startSubscription,\r\n      cancelSubscription\r\n    }}>\r\n      {children}\r\n    </SubscriptionContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}