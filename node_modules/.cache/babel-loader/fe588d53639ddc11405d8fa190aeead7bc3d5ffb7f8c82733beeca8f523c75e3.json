{"ast":null,"code":"// Enhanced SubscriptionService.js with tokenized access\nimport ApiClient from './ApiClient';\nimport { storageKeys } from '../constants/storageKeys';\nclass SubscriptionService {\n  // Purchase subscription without account\n  async purchaseSubscription(email, plan) {\n    try {\n      // Initialize payment processor (Stripe/PayPal)\n      const paymentResult = await this.initiatePayment(email, plan);\n      if (paymentResult.success) {\n        // Store access token locally\n        localStorage.setItem(storageKeys.SUBSCRIPTION_TOKEN, paymentResult.accessToken);\n        localStorage.setItem(storageKeys.SUBSCRIPTION_EXPIRY, paymentResult.expiresAt);\n        return {\n          success: true,\n          ...paymentResult\n        };\n      }\n      return {\n        success: false,\n        error: paymentResult.error\n      };\n    } catch (error) {\n      console.error('Purchase failed:', error);\n      return {\n        success: false,\n        error: 'Payment processing failed'\n      };\n    }\n  }\n\n  // Verify token validity (called on app start and before accessing premium features)\n  async verifySubscription() {\n    const token = localStorage.getItem(storageKeys.SUBSCRIPTION_TOKEN);\n    if (!token) return {\n      isSubscribed: false\n    };\n    try {\n      const response = await ApiClient.post('/verify-subscription', {\n        token\n      });\n      return {\n        isSubscribed: response.valid,\n        plan: response.plan,\n        expiresAt: response.expiresAt\n      };\n    } catch (error) {\n      console.error('Verification failed:', error);\n      // Fallback to local verification if server unreachable\n      const expiryDate = localStorage.getItem(storageKeys.SUBSCRIPTION_EXPIRY);\n      if (expiryDate && new Date(expiryDate) > new Date()) {\n        return {\n          isSubscribed: true,\n          isOfflineVerified: true\n        };\n      }\n      return {\n        isSubscribed: false\n      };\n    }\n  }\n\n  // Allow users to access via email link\n  async activateTokenFromEmail(accessToken) {\n    try {\n      const tokenData = await ApiClient.post('/validate-token', {\n        token: accessToken\n      });\n      if (tokenData.valid) {\n        localStorage.setItem(storageKeys.SUBSCRIPTION_TOKEN, accessToken);\n        localStorage.setItem(storageKeys.SUBSCRIPTION_EXPIRY, tokenData.expiresAt);\n        return {\n          success: true\n        };\n      }\n      return {\n        success: false,\n        error: 'Invalid or expired token'\n      };\n    } catch (error) {\n      console.error('Token activation failed:', error);\n      return {\n        success: false,\n        error: 'Token validation failed'\n      };\n    }\n  }\n\n  // Helper method to initiate payment\n  async initiatePayment(email, plan) {\n    // Integration with payment processor (Stripe shown as example)\n    // This would typically be handled by your backend API\n    return ApiClient.post('/create-subscription', {\n      email,\n      plan,\n      returnUrl: window.location.origin + '/subscription/confirm'\n    });\n  }\n}\nexport default new SubscriptionService();","map":{"version":3,"names":["ApiClient","storageKeys","SubscriptionService","purchaseSubscription","email","plan","paymentResult","initiatePayment","success","localStorage","setItem","SUBSCRIPTION_TOKEN","accessToken","SUBSCRIPTION_EXPIRY","expiresAt","error","console","verifySubscription","token","getItem","isSubscribed","response","post","valid","expiryDate","Date","isOfflineVerified","activateTokenFromEmail","tokenData","returnUrl","window","location","origin"],"sources":["C:/Users/juliu/Desktop/web/src/services/SubscriptionService.js"],"sourcesContent":["// Enhanced SubscriptionService.js with tokenized access\r\nimport ApiClient from './ApiClient';\r\nimport { storageKeys } from '../constants/storageKeys';\r\n\r\nclass SubscriptionService {\r\n  // Purchase subscription without account\r\n  async purchaseSubscription(email, plan) {\r\n    try {\r\n      // Initialize payment processor (Stripe/PayPal)\r\n      const paymentResult = await this.initiatePayment(email, plan);\r\n      \r\n      if (paymentResult.success) {\r\n        // Store access token locally\r\n        localStorage.setItem(storageKeys.SUBSCRIPTION_TOKEN, paymentResult.accessToken);\r\n        localStorage.setItem(storageKeys.SUBSCRIPTION_EXPIRY, paymentResult.expiresAt);\r\n        return { success: true, ...paymentResult };\r\n      }\r\n      return { success: false, error: paymentResult.error };\r\n    } catch (error) {\r\n      console.error('Purchase failed:', error);\r\n      return { success: false, error: 'Payment processing failed' };\r\n    }\r\n  }\r\n\r\n  // Verify token validity (called on app start and before accessing premium features)\r\n  async verifySubscription() {\r\n    const token = localStorage.getItem(storageKeys.SUBSCRIPTION_TOKEN);\r\n    if (!token) return { isSubscribed: false };\r\n\r\n    try {\r\n      const response = await ApiClient.post('/verify-subscription', { token });\r\n      return { \r\n        isSubscribed: response.valid, \r\n        plan: response.plan,\r\n        expiresAt: response.expiresAt\r\n      };\r\n    } catch (error) {\r\n      console.error('Verification failed:', error);\r\n      // Fallback to local verification if server unreachable\r\n      const expiryDate = localStorage.getItem(storageKeys.SUBSCRIPTION_EXPIRY);\r\n      if (expiryDate && new Date(expiryDate) > new Date()) {\r\n        return { isSubscribed: true, isOfflineVerified: true };\r\n      }\r\n      return { isSubscribed: false };\r\n    }\r\n  }\r\n\r\n  // Allow users to access via email link\r\n  async activateTokenFromEmail(accessToken) {\r\n    try {\r\n      const tokenData = await ApiClient.post('/validate-token', { token: accessToken });\r\n      if (tokenData.valid) {\r\n        localStorage.setItem(storageKeys.SUBSCRIPTION_TOKEN, accessToken);\r\n        localStorage.setItem(storageKeys.SUBSCRIPTION_EXPIRY, tokenData.expiresAt);\r\n        return { success: true };\r\n      }\r\n      return { success: false, error: 'Invalid or expired token' };\r\n    } catch (error) {\r\n      console.error('Token activation failed:', error);\r\n      return { success: false, error: 'Token validation failed' };\r\n    }\r\n  }\r\n\r\n  // Helper method to initiate payment\r\n  async initiatePayment(email, plan) {\r\n    // Integration with payment processor (Stripe shown as example)\r\n    // This would typically be handled by your backend API\r\n    return ApiClient.post('/create-subscription', { \r\n      email, \r\n      plan,\r\n      returnUrl: window.location.origin + '/subscription/confirm'\r\n    });\r\n  }\r\n}\r\n\r\nexport default new SubscriptionService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}