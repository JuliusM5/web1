{"ast":null,"code":"// src/services/ApiClient.js\n// Simple API client using native fetch instead of axios\n\nimport { captureError } from '../utils/errorMonitoring';\nclass ApiClient {\n  constructor() {\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\n    this.defaultHeaders = {\n      'Content-Type': 'application/json'\n    };\n  }\n\n  // Helper to get full URL\n  getUrl(endpoint) {\n    return `${this.baseURL}${endpoint.startsWith('/') ? endpoint : `/${endpoint}`}`;\n  }\n\n  // Helper to prepare request options\n  getRequestOptions(method, data, customHeaders = {}) {\n    // Get device ID for request\n    const deviceId = localStorage.getItem('deviceId');\n\n    // Prepare headers\n    const headers = {\n      ...this.defaultHeaders,\n      ...customHeaders\n    };\n\n    // Add device ID to headers if available\n    if (deviceId) {\n      headers['X-Device-ID'] = deviceId;\n    }\n\n    // Prepare options\n    const options = {\n      method,\n      headers,\n      credentials: 'include' // Include cookies in requests\n    };\n\n    // Add body for non-GET requests\n    if (data && method !== 'GET') {\n      options.body = JSON.stringify(data);\n    }\n    return options;\n  }\n\n  // Helper to handle responses\n  async handleResponse(response) {\n    // Check if the request was successful\n    if (!response.ok) {\n      const error = new Error(`HTTP error ${response.status}`);\n      error.status = response.status;\n      try {\n        // Try to parse error response\n        error.responseData = await response.json();\n      } catch (e) {\n        // If parsing fails, use text response\n        error.responseText = await response.text();\n      }\n      throw error;\n    }\n\n    // Check content type to determine how to parse the response\n    const contentType = response.headers.get('Content-Type') || '';\n    if (contentType.includes('application/json')) {\n      return await response.json();\n    } else if (contentType.includes('text/')) {\n      return await response.text();\n    } else {\n      // For other types (like blobs), return the response\n      return response;\n    }\n  }\n\n  // Main request method\n  async request(endpoint, method, data, customHeaders) {\n    try {\n      const url = this.getUrl(endpoint);\n      const options = this.getRequestOptions(method, data, customHeaders);\n      const response = await fetch(url, options);\n      return await this.handleResponse(response);\n    } catch (error) {\n      // Log the error\n      console.error(`API ${method} request to ${endpoint} failed:`, error);\n\n      // Capture for monitoring\n      captureError(error, {\n        context: 'API request',\n        endpoint,\n        method\n      });\n\n      // Rethrow for handling by caller\n      throw error;\n    }\n  }\n\n  // Convenience methods for common HTTP methods\n  async get(endpoint, customHeaders) {\n    return this.request(endpoint, 'GET', null, customHeaders);\n  }\n  async post(endpoint, data, customHeaders) {\n    return this.request(endpoint, 'POST', data, customHeaders);\n  }\n  async put(endpoint, data, customHeaders) {\n    return this.request(endpoint, 'PUT', data, customHeaders);\n  }\n  async patch(endpoint, data, customHeaders) {\n    return this.request(endpoint, 'PATCH', data, customHeaders);\n  }\n  async delete(endpoint, customHeaders) {\n    return this.request(endpoint, 'DELETE', null, customHeaders);\n  }\n}\nexport default new ApiClient();","map":{"version":3,"names":["captureError","ApiClient","constructor","baseURL","process","env","REACT_APP_API_URL","defaultHeaders","getUrl","endpoint","startsWith","getRequestOptions","method","data","customHeaders","deviceId","localStorage","getItem","headers","options","credentials","body","JSON","stringify","handleResponse","response","ok","error","Error","status","responseData","json","e","responseText","text","contentType","get","includes","request","url","fetch","console","context","post","put","patch","delete"],"sources":["C:/Users/juliu/Desktop/web/src/services/ApiClient.js"],"sourcesContent":["// src/services/ApiClient.js\r\n// Simple API client using native fetch instead of axios\r\n\r\nimport { captureError } from '../utils/errorMonitoring';\r\n\r\nclass ApiClient {\r\n  constructor() {\r\n    this.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:8080';\r\n    this.defaultHeaders = {\r\n      'Content-Type': 'application/json'\r\n    };\r\n  }\r\n\r\n  // Helper to get full URL\r\n  getUrl(endpoint) {\r\n    return `${this.baseURL}${endpoint.startsWith('/') ? endpoint : `/${endpoint}`}`;\r\n  }\r\n\r\n  // Helper to prepare request options\r\n  getRequestOptions(method, data, customHeaders = {}) {\r\n    // Get device ID for request\r\n    const deviceId = localStorage.getItem('deviceId');\r\n    \r\n    // Prepare headers\r\n    const headers = {\r\n      ...this.defaultHeaders,\r\n      ...customHeaders\r\n    };\r\n    \r\n    // Add device ID to headers if available\r\n    if (deviceId) {\r\n      headers['X-Device-ID'] = deviceId;\r\n    }\r\n    \r\n    // Prepare options\r\n    const options = {\r\n      method,\r\n      headers,\r\n      credentials: 'include' // Include cookies in requests\r\n    };\r\n    \r\n    // Add body for non-GET requests\r\n    if (data && method !== 'GET') {\r\n      options.body = JSON.stringify(data);\r\n    }\r\n    \r\n    return options;\r\n  }\r\n\r\n  // Helper to handle responses\r\n  async handleResponse(response) {\r\n    // Check if the request was successful\r\n    if (!response.ok) {\r\n      const error = new Error(`HTTP error ${response.status}`);\r\n      error.status = response.status;\r\n      \r\n      try {\r\n        // Try to parse error response\r\n        error.responseData = await response.json();\r\n      } catch (e) {\r\n        // If parsing fails, use text response\r\n        error.responseText = await response.text();\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n    \r\n    // Check content type to determine how to parse the response\r\n    const contentType = response.headers.get('Content-Type') || '';\r\n    \r\n    if (contentType.includes('application/json')) {\r\n      return await response.json();\r\n    } else if (contentType.includes('text/')) {\r\n      return await response.text();\r\n    } else {\r\n      // For other types (like blobs), return the response\r\n      return response;\r\n    }\r\n  }\r\n\r\n  // Main request method\r\n  async request(endpoint, method, data, customHeaders) {\r\n    try {\r\n      const url = this.getUrl(endpoint);\r\n      const options = this.getRequestOptions(method, data, customHeaders);\r\n      \r\n      const response = await fetch(url, options);\r\n      return await this.handleResponse(response);\r\n    } catch (error) {\r\n      // Log the error\r\n      console.error(`API ${method} request to ${endpoint} failed:`, error);\r\n      \r\n      // Capture for monitoring\r\n      captureError(error, {\r\n        context: 'API request',\r\n        endpoint,\r\n        method\r\n      });\r\n      \r\n      // Rethrow for handling by caller\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Convenience methods for common HTTP methods\r\n  async get(endpoint, customHeaders) {\r\n    return this.request(endpoint, 'GET', null, customHeaders);\r\n  }\r\n\r\n  async post(endpoint, data, customHeaders) {\r\n    return this.request(endpoint, 'POST', data, customHeaders);\r\n  }\r\n\r\n  async put(endpoint, data, customHeaders) {\r\n    return this.request(endpoint, 'PUT', data, customHeaders);\r\n  }\r\n\r\n  async patch(endpoint, data, customHeaders) {\r\n    return this.request(endpoint, 'PATCH', data, customHeaders);\r\n  }\r\n\r\n  async delete(endpoint, customHeaders) {\r\n    return this.request(endpoint, 'DELETE', null, customHeaders);\r\n  }\r\n}\r\n\r\nexport default new ApiClient();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}