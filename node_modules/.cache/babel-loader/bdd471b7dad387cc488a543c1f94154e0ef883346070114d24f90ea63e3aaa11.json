{"ast":null,"code":"// In SubscriptionContext.jsx - update purchaseSubscription method\n\nconst purchaseSubscription = async (email, plan) => {\n  setSubscription(prev => ({\n    ...prev,\n    isLoading: true\n  }));\n  try {\n    // Create a checkout session with Stripe\n    const response = await fetch('/api/create-checkout-session', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        priceId: plan === 'yearly_premium' ? 'price_yearly_id' : 'price_monthly_id',\n        successUrl: `${window.location.origin}/subscription/success?session_id={CHECKOUT_SESSION_ID}`,\n        cancelUrl: `${window.location.origin}/subscription/cancel`\n      })\n    });\n    const session = await response.json();\n    if (session.error) {\n      throw new Error(session.error);\n    }\n\n    // Redirect to Stripe Checkout\n    window.location.href = session.url;\n    return {\n      success: true\n    };\n  } catch (error) {\n    console.error('Purchase subscription error:', error);\n    setSubscription(prev => ({\n      ...prev,\n      isLoading: false,\n      error: 'Failed to process subscription'\n    }));\n    return {\n      success: false,\n      error: 'Failed to process subscription'\n    };\n  }\n};","map":{"version":3,"names":["purchaseSubscription","email","plan","setSubscription","prev","isLoading","response","fetch","method","headers","body","JSON","stringify","priceId","successUrl","window","location","origin","cancelUrl","session","json","error","Error","href","url","success","console"],"sources":["C:/Users/juliu/Desktop/web/src/context/SubscriptionContext.jsx"],"sourcesContent":["// In SubscriptionContext.jsx - update purchaseSubscription method\r\n\r\nconst purchaseSubscription = async (email, plan) => {\r\n  setSubscription(prev => ({ ...prev, isLoading: true }));\r\n  \r\n  try {\r\n    // Create a checkout session with Stripe\r\n    const response = await fetch('/api/create-checkout-session', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({\r\n        email,\r\n        priceId: plan === 'yearly_premium' ? 'price_yearly_id' : 'price_monthly_id',\r\n        successUrl: `${window.location.origin}/subscription/success?session_id={CHECKOUT_SESSION_ID}`,\r\n        cancelUrl: `${window.location.origin}/subscription/cancel`\r\n      })\r\n    });\r\n    \r\n    const session = await response.json();\r\n    \r\n    if (session.error) {\r\n      throw new Error(session.error);\r\n    }\r\n    \r\n    // Redirect to Stripe Checkout\r\n    window.location.href = session.url;\r\n    \r\n    return { success: true };\r\n  } catch (error) {\r\n    console.error('Purchase subscription error:', error);\r\n    \r\n    setSubscription(prev => ({\r\n      ...prev,\r\n      isLoading: false,\r\n      error: 'Failed to process subscription'\r\n    }));\r\n    \r\n    return {\r\n      success: false,\r\n      error: 'Failed to process subscription'\r\n    };\r\n  }\r\n};"],"mappings":"AAAA;;AAEA,MAAMA,oBAAoB,GAAG,MAAAA,CAAOC,KAAK,EAAEC,IAAI,KAAK;EAClDC,eAAe,CAACC,IAAI,KAAK;IAAE,GAAGA,IAAI;IAAEC,SAAS,EAAE;EAAK,CAAC,CAAC,CAAC;EAEvD,IAAI;IACF;IACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;MAC3DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBX,KAAK;QACLY,OAAO,EAAEX,IAAI,KAAK,gBAAgB,GAAG,iBAAiB,GAAG,kBAAkB;QAC3EY,UAAU,EAAE,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM,wDAAwD;QAC7FC,SAAS,EAAE,GAAGH,MAAM,CAACC,QAAQ,CAACC,MAAM;MACtC,CAAC;IACH,CAAC,CAAC;IAEF,MAAME,OAAO,GAAG,MAAMb,QAAQ,CAACc,IAAI,CAAC,CAAC;IAErC,IAAID,OAAO,CAACE,KAAK,EAAE;MACjB,MAAM,IAAIC,KAAK,CAACH,OAAO,CAACE,KAAK,CAAC;IAChC;;IAEA;IACAN,MAAM,CAACC,QAAQ,CAACO,IAAI,GAAGJ,OAAO,CAACK,GAAG;IAElC,OAAO;MAAEC,OAAO,EAAE;IAAK,CAAC;EAC1B,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACdK,OAAO,CAACL,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IAEpDlB,eAAe,CAACC,IAAI,KAAK;MACvB,GAAGA,IAAI;MACPC,SAAS,EAAE,KAAK;MAChBgB,KAAK,EAAE;IACT,CAAC,CAAC,CAAC;IAEH,OAAO;MACLI,OAAO,EAAE,KAAK;MACdJ,KAAK,EAAE;IACT,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}