{"ast":null,"code":"// Default application settings\nexport const DEFAULT_SETTINGS = {\n  appearance: {\n    fontSize: 'medium',\n    colorScheme: 'blue'\n  },\n  preferences: {\n    defaultCurrency: 'USD',\n    dateFormat: 'MM/DD/YYYY',\n    distanceUnit: 'miles',\n    temperatureUnit: 'fahrenheit',\n    language: 'en-US'\n  },\n  notifications: {\n    tripReminders: true,\n    taskReminders: true,\n    budgetAlerts: true,\n    emailNotifications: false\n  },\n  privacy: {\n    shareLocationData: true,\n    collectAnalytics: true,\n    autoSaveEnabled: true\n  }\n};\n\n// Get current user settings (or defaults if none exist)\nexport const getUserSettings = () => {\n  try {\n    const savedSettings = localStorage.getItem('userSettings');\n    return savedSettings ? JSON.parse(savedSettings) : DEFAULT_SETTINGS;\n  } catch (error) {\n    console.error(\"Error loading user settings:\", error);\n    return DEFAULT_SETTINGS;\n  }\n};\n\n// Save user settings\nexport const saveUserSettings = settings => {\n  try {\n    localStorage.setItem('userSettings', JSON.stringify(settings));\n    return true;\n  } catch (error) {\n    console.error(\"Error saving user settings:\", error);\n    return false;\n  }\n};\n\n// Apply theme settings to the document\nexport const applyThemeSettings = settings => {\n  const {\n    fontSize,\n    colorScheme\n  } = settings.appearance;\n\n  // Apply font size\n  document.documentElement.classList.remove('text-sm', 'text-base', 'text-lg');\n  if (fontSize === 'small') {\n    document.documentElement.classList.add('text-sm');\n  } else if (fontSize === 'medium') {\n    document.documentElement.classList.add('text-base');\n  } else if (fontSize === 'large') {\n    document.documentElement.classList.add('text-lg');\n  }\n\n  // Apply color scheme\n  // Remove any existing color scheme classes\n  const colorSchemeClasses = ['theme-blue', 'theme-purple', 'theme-green', 'theme-red', 'theme-amber', 'theme-indigo'];\n  document.documentElement.classList.remove(...colorSchemeClasses);\n  document.documentElement.classList.add(`theme-${colorScheme}`);\n\n  // Set a custom property to track current theme\n  document.documentElement.style.setProperty('--current-theme', colorScheme);\n\n  // Update favicon color (optional enhancement)\n  updateFaviconColor(colorScheme);\n  return true;\n};\n\n// Function to update favicon color based on theme\nconst updateFaviconColor = colorScheme => {\n  const themeColors = {\n    'blue': '#3b82f6',\n    'purple': '#8b5cf6',\n    'green': '#10b981',\n    'red': '#ef4444',\n    'amber': '#f59e0b',\n    'indigo': '#6366f1'\n  };\n  const color = themeColors[colorScheme] || themeColors.blue;\n\n  // Look for existing favicon\n  const existingFavicon = document.querySelector('link[rel=\"icon\"]');\n  if (existingFavicon) {\n    // If it's a simple .ico file, we can't modify it\n    if (existingFavicon.href.endsWith('.ico')) {\n      console.log('Cannot update .ico favicon color');\n      return;\n    }\n\n    // For SVG favicons, we could potentially update the color\n    // This would require a more complex implementation\n\n    // For simplicity, we'll just log that we would update the favicon\n    console.log(`Favicon would be updated to ${colorScheme} theme with color ${color}`);\n  }\n};\n\n// Format date according to user preferences\nexport const formatDate = (dateString, settings) => {\n  var _settings$preferences;\n  if (!dateString) return '';\n  const date = new Date(dateString);\n  const format = (settings === null || settings === void 0 ? void 0 : (_settings$preferences = settings.preferences) === null || _settings$preferences === void 0 ? void 0 : _settings$preferences.dateFormat) || 'MM/DD/YYYY';\n  switch (format) {\n    case 'DD/MM/YYYY':\n      return `${padZero(date.getDate())}/${padZero(date.getMonth() + 1)}/${date.getFullYear()}`;\n    case 'YYYY-MM-DD':\n      return `${date.getFullYear()}-${padZero(date.getMonth() + 1)}-${padZero(date.getDate())}`;\n    case 'MMMM D, YYYY':\n      return `${getMonthName(date.getMonth())} ${date.getDate()}, ${date.getFullYear()}`;\n    case 'D MMMM YYYY':\n      return `${date.getDate()} ${getMonthName(date.getMonth())} ${date.getFullYear()}`;\n    case 'MM/DD/YYYY':\n    default:\n      return `${padZero(date.getMonth() + 1)}/${padZero(date.getDate())}/${date.getFullYear()}`;\n  }\n};\n\n// Format currency according to user preferences\nexport const formatCurrency = (amount, settings) => {\n  var _settings$preferences2;\n  const currencyCode = (settings === null || settings === void 0 ? void 0 : (_settings$preferences2 = settings.preferences) === null || _settings$preferences2 === void 0 ? void 0 : _settings$preferences2.defaultCurrency) || 'USD';\n\n  // Simple mapping of currency codes to symbols\n  const currencySymbols = {\n    'USD': '$',\n    'EUR': '€',\n    'GBP': '£',\n    'JPY': '¥',\n    'CAD': 'CA$',\n    'AUD': 'AU$',\n    'CNY': '¥',\n    'INR': '₹'\n  };\n  const symbol = currencySymbols[currencyCode] || currencyCode;\n\n  // Format the amount with 2 decimal places (except for JPY)\n  let formattedAmount;\n  if (currencyCode === 'JPY' || currencyCode === 'CNY') {\n    formattedAmount = Math.round(amount).toLocaleString();\n  } else {\n    formattedAmount = Number(amount).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\n  }\n  return `${symbol}${formattedAmount}`;\n};\n\n// Convert temperature according to user preferences\nexport const formatTemperature = (celsius, settings) => {\n  var _settings$preferences3;\n  const unit = (settings === null || settings === void 0 ? void 0 : (_settings$preferences3 = settings.preferences) === null || _settings$preferences3 === void 0 ? void 0 : _settings$preferences3.temperatureUnit) || 'fahrenheit';\n  if (unit === 'celsius') {\n    return `${Math.round(celsius)}°C`;\n  } else {\n    // Convert to Fahrenheit\n    const fahrenheit = celsius * 9 / 5 + 32;\n    return `${Math.round(fahrenheit)}°F`;\n  }\n};\n\n// Convert distance according to user preferences\nexport const formatDistance = (kilometers, settings) => {\n  var _settings$preferences4;\n  const unit = (settings === null || settings === void 0 ? void 0 : (_settings$preferences4 = settings.preferences) === null || _settings$preferences4 === void 0 ? void 0 : _settings$preferences4.distanceUnit) || 'miles';\n  if (unit === 'kilometers') {\n    return `${kilometers.toFixed(1)} km`;\n  } else {\n    // Convert to miles\n    const miles = kilometers * 0.621371;\n    return `${miles.toFixed(1)} mi`;\n  }\n};\n\n// Helper functions\nconst padZero = num => {\n  return num.toString().padStart(2, '0');\n};\nconst getMonthName = monthIndex => {\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  return months[monthIndex];\n};\n\n// Reset all app data (for privacy clear option)\nexport const clearAllAppData = () => {\n  if (window.confirm(\"Are you sure you want to clear ALL data? This will delete all your trips, templates, and settings. This action cannot be undone.\")) {\n    try {\n      localStorage.clear();\n      return true;\n    } catch (error) {\n      console.error(\"Error clearing app data:\", error);\n      return false;\n    }\n  }\n  return false;\n};\n\n// Export all user data as JSON\nexport const exportUserData = () => {\n  try {\n    const data = {\n      trips: JSON.parse(localStorage.getItem('travelPlannerTrips') || '[]'),\n      templates: JSON.parse(localStorage.getItem('tripTemplates') || '[]'),\n      settings: JSON.parse(localStorage.getItem('userSettings') || '{}')\n    };\n    const dataStr = JSON.stringify(data, null, 2);\n    const dataUri = `data:application/json;charset=utf-8,${encodeURIComponent(dataStr)}`;\n    const exportFileName = `travelease_backup_${new Date().toISOString().split('T')[0]}.json`;\n    const linkElement = document.createElement('a');\n    linkElement.setAttribute('href', dataUri);\n    linkElement.setAttribute('download', exportFileName);\n    linkElement.click();\n    return true;\n  } catch (error) {\n    console.error(\"Error exporting user data:\", error);\n    return false;\n  }\n};\n\n// Import user data from JSON file\nexport const importUserData = async file => {\n  try {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = event => {\n        try {\n          const data = JSON.parse(event.target.result);\n\n          // Validate the imported data has expected structure\n          if (!data.trips || !data.templates || !data.settings) {\n            reject(new Error(\"Invalid data format. The file does not contain valid TravelEase data.\"));\n            return;\n          }\n\n          // Import the data\n          localStorage.setItem('travelPlannerTrips', JSON.stringify(data.trips));\n          localStorage.setItem('tripTemplates', JSON.stringify(data.templates));\n          localStorage.setItem('userSettings', JSON.stringify(data.settings));\n          resolve(true);\n        } catch (error) {\n          reject(new Error(\"Failed to parse the imported file: \" + error.message));\n        }\n      };\n      reader.onerror = () => {\n        reject(new Error(\"Failed to read the file\"));\n      };\n      reader.readAsText(file);\n    });\n  } catch (error) {\n    console.error(\"Error importing user data:\", error);\n    return false;\n  }\n};","map":{"version":3,"names":["DEFAULT_SETTINGS","appearance","fontSize","colorScheme","preferences","defaultCurrency","dateFormat","distanceUnit","temperatureUnit","language","notifications","tripReminders","taskReminders","budgetAlerts","emailNotifications","privacy","shareLocationData","collectAnalytics","autoSaveEnabled","getUserSettings","savedSettings","localStorage","getItem","JSON","parse","error","console","saveUserSettings","settings","setItem","stringify","applyThemeSettings","document","documentElement","classList","remove","add","colorSchemeClasses","style","setProperty","updateFaviconColor","themeColors","color","blue","existingFavicon","querySelector","href","endsWith","log","formatDate","dateString","_settings$preferences","date","Date","format","padZero","getDate","getMonth","getFullYear","getMonthName","formatCurrency","amount","_settings$preferences2","currencyCode","currencySymbols","symbol","formattedAmount","Math","round","toLocaleString","Number","toFixed","replace","formatTemperature","celsius","_settings$preferences3","unit","fahrenheit","formatDistance","kilometers","_settings$preferences4","miles","num","toString","padStart","monthIndex","months","clearAllAppData","window","confirm","clear","exportUserData","data","trips","templates","dataStr","dataUri","encodeURIComponent","exportFileName","toISOString","split","linkElement","createElement","setAttribute","click","importUserData","file","Promise","resolve","reject","reader","FileReader","onload","event","target","result","Error","message","onerror","readAsText"],"sources":["C:/Users/juliu/Desktop/web/src/utils/settingsUtils.js"],"sourcesContent":["// Default application settings\r\nexport const DEFAULT_SETTINGS = {\r\n  appearance: {\r\n    fontSize: 'medium',\r\n    colorScheme: 'blue',\r\n  },\r\n  preferences: {\r\n    defaultCurrency: 'USD',\r\n    dateFormat: 'MM/DD/YYYY',\r\n    distanceUnit: 'miles',\r\n    temperatureUnit: 'fahrenheit',\r\n    language: 'en-US',\r\n  },\r\n  notifications: {\r\n    tripReminders: true,\r\n    taskReminders: true,\r\n    budgetAlerts: true,\r\n    emailNotifications: false,\r\n  },\r\n  privacy: {\r\n    shareLocationData: true,\r\n    collectAnalytics: true,\r\n    autoSaveEnabled: true,\r\n  }\r\n};\r\n\r\n// Get current user settings (or defaults if none exist)\r\nexport const getUserSettings = () => {\r\n  try {\r\n    const savedSettings = localStorage.getItem('userSettings');\r\n    return savedSettings ? JSON.parse(savedSettings) : DEFAULT_SETTINGS;\r\n  } catch (error) {\r\n    console.error(\"Error loading user settings:\", error);\r\n    return DEFAULT_SETTINGS;\r\n  }\r\n};\r\n\r\n// Save user settings\r\nexport const saveUserSettings = (settings) => {\r\n  try {\r\n    localStorage.setItem('userSettings', JSON.stringify(settings));\r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error saving user settings:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Apply theme settings to the document\r\nexport const applyThemeSettings = (settings) => {\r\n  const { fontSize, colorScheme } = settings.appearance;\r\n  \r\n  // Apply font size\r\n  document.documentElement.classList.remove('text-sm', 'text-base', 'text-lg');\r\n  if (fontSize === 'small') {\r\n    document.documentElement.classList.add('text-sm');\r\n  } else if (fontSize === 'medium') {\r\n    document.documentElement.classList.add('text-base');\r\n  } else if (fontSize === 'large') {\r\n    document.documentElement.classList.add('text-lg');\r\n  }\r\n  \r\n  // Apply color scheme\r\n  // Remove any existing color scheme classes\r\n  const colorSchemeClasses = [\r\n    'theme-blue', 'theme-purple', 'theme-green', \r\n    'theme-red', 'theme-amber', 'theme-indigo'\r\n  ];\r\n  document.documentElement.classList.remove(...colorSchemeClasses);\r\n  document.documentElement.classList.add(`theme-${colorScheme}`);\r\n  \r\n  // Set a custom property to track current theme\r\n  document.documentElement.style.setProperty('--current-theme', colorScheme);\r\n  \r\n  // Update favicon color (optional enhancement)\r\n  updateFaviconColor(colorScheme);\r\n  \r\n  return true;\r\n};\r\n\r\n// Function to update favicon color based on theme\r\nconst updateFaviconColor = (colorScheme) => {\r\n  const themeColors = {\r\n    'blue': '#3b82f6',\r\n    'purple': '#8b5cf6',\r\n    'green': '#10b981',\r\n    'red': '#ef4444',\r\n    'amber': '#f59e0b',\r\n    'indigo': '#6366f1'\r\n  };\r\n  \r\n  const color = themeColors[colorScheme] || themeColors.blue;\r\n  \r\n  // Look for existing favicon\r\n  const existingFavicon = document.querySelector('link[rel=\"icon\"]');\r\n  \r\n  if (existingFavicon) {\r\n    // If it's a simple .ico file, we can't modify it\r\n    if (existingFavicon.href.endsWith('.ico')) {\r\n      console.log('Cannot update .ico favicon color');\r\n      return;\r\n    }\r\n    \r\n    // For SVG favicons, we could potentially update the color\r\n    // This would require a more complex implementation\r\n    \r\n    // For simplicity, we'll just log that we would update the favicon\r\n    console.log(`Favicon would be updated to ${colorScheme} theme with color ${color}`);\r\n  }\r\n};\r\n\r\n// Format date according to user preferences\r\nexport const formatDate = (dateString, settings) => {\r\n  if (!dateString) return '';\r\n  \r\n  const date = new Date(dateString);\r\n  const format = settings?.preferences?.dateFormat || 'MM/DD/YYYY';\r\n  \r\n  switch (format) {\r\n    case 'DD/MM/YYYY':\r\n      return `${padZero(date.getDate())}/${padZero(date.getMonth() + 1)}/${date.getFullYear()}`;\r\n    case 'YYYY-MM-DD':\r\n      return `${date.getFullYear()}-${padZero(date.getMonth() + 1)}-${padZero(date.getDate())}`;\r\n    case 'MMMM D, YYYY':\r\n      return `${getMonthName(date.getMonth())} ${date.getDate()}, ${date.getFullYear()}`;\r\n    case 'D MMMM YYYY':\r\n      return `${date.getDate()} ${getMonthName(date.getMonth())} ${date.getFullYear()}`;\r\n    case 'MM/DD/YYYY':\r\n    default:\r\n      return `${padZero(date.getMonth() + 1)}/${padZero(date.getDate())}/${date.getFullYear()}`;\r\n  }\r\n};\r\n\r\n// Format currency according to user preferences\r\nexport const formatCurrency = (amount, settings) => {\r\n  const currencyCode = settings?.preferences?.defaultCurrency || 'USD';\r\n  \r\n  // Simple mapping of currency codes to symbols\r\n  const currencySymbols = {\r\n    'USD': '$',\r\n    'EUR': '€',\r\n    'GBP': '£',\r\n    'JPY': '¥',\r\n    'CAD': 'CA$',\r\n    'AUD': 'AU$',\r\n    'CNY': '¥',\r\n    'INR': '₹',\r\n  };\r\n  \r\n  const symbol = currencySymbols[currencyCode] || currencyCode;\r\n  \r\n  // Format the amount with 2 decimal places (except for JPY)\r\n  let formattedAmount;\r\n  if (currencyCode === 'JPY' || currencyCode === 'CNY') {\r\n    formattedAmount = Math.round(amount).toLocaleString();\r\n  } else {\r\n    formattedAmount = Number(amount).toFixed(2).replace(/\\d(?=(\\d{3})+\\.)/g, '$&,');\r\n  }\r\n  \r\n  return `${symbol}${formattedAmount}`;\r\n};\r\n\r\n// Convert temperature according to user preferences\r\nexport const formatTemperature = (celsius, settings) => {\r\n  const unit = settings?.preferences?.temperatureUnit || 'fahrenheit';\r\n  \r\n  if (unit === 'celsius') {\r\n    return `${Math.round(celsius)}°C`;\r\n  } else {\r\n    // Convert to Fahrenheit\r\n    const fahrenheit = (celsius * 9/5) + 32;\r\n    return `${Math.round(fahrenheit)}°F`;\r\n  }\r\n};\r\n\r\n// Convert distance according to user preferences\r\nexport const formatDistance = (kilometers, settings) => {\r\n  const unit = settings?.preferences?.distanceUnit || 'miles';\r\n  \r\n  if (unit === 'kilometers') {\r\n    return `${kilometers.toFixed(1)} km`;\r\n  } else {\r\n    // Convert to miles\r\n    const miles = kilometers * 0.621371;\r\n    return `${miles.toFixed(1)} mi`;\r\n  }\r\n};\r\n\r\n// Helper functions\r\nconst padZero = (num) => {\r\n  return num.toString().padStart(2, '0');\r\n};\r\n\r\nconst getMonthName = (monthIndex) => {\r\n  const months = [\r\n    'January', 'February', 'March', 'April', 'May', 'June',\r\n    'July', 'August', 'September', 'October', 'November', 'December'\r\n  ];\r\n  return months[monthIndex];\r\n};\r\n\r\n// Reset all app data (for privacy clear option)\r\nexport const clearAllAppData = () => {\r\n  if (window.confirm(\"Are you sure you want to clear ALL data? This will delete all your trips, templates, and settings. This action cannot be undone.\")) {\r\n    try {\r\n      localStorage.clear();\r\n      return true;\r\n    } catch (error) {\r\n      console.error(\"Error clearing app data:\", error);\r\n      return false;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n// Export all user data as JSON\r\nexport const exportUserData = () => {\r\n  try {\r\n    const data = {\r\n      trips: JSON.parse(localStorage.getItem('travelPlannerTrips') || '[]'),\r\n      templates: JSON.parse(localStorage.getItem('tripTemplates') || '[]'),\r\n      settings: JSON.parse(localStorage.getItem('userSettings') || '{}')\r\n    };\r\n    \r\n    const dataStr = JSON.stringify(data, null, 2);\r\n    const dataUri = `data:application/json;charset=utf-8,${encodeURIComponent(dataStr)}`;\r\n    \r\n    const exportFileName = `travelease_backup_${new Date().toISOString().split('T')[0]}.json`;\r\n    \r\n    const linkElement = document.createElement('a');\r\n    linkElement.setAttribute('href', dataUri);\r\n    linkElement.setAttribute('download', exportFileName);\r\n    linkElement.click();\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error(\"Error exporting user data:\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Import user data from JSON file\r\nexport const importUserData = async (file) => {\r\n  try {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      \r\n      reader.onload = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.target.result);\r\n          \r\n          // Validate the imported data has expected structure\r\n          if (!data.trips || !data.templates || !data.settings) {\r\n            reject(new Error(\"Invalid data format. The file does not contain valid TravelEase data.\"));\r\n            return;\r\n          }\r\n          \r\n          // Import the data\r\n          localStorage.setItem('travelPlannerTrips', JSON.stringify(data.trips));\r\n          localStorage.setItem('tripTemplates', JSON.stringify(data.templates));\r\n          localStorage.setItem('userSettings', JSON.stringify(data.settings));\r\n          \r\n          resolve(true);\r\n        } catch (error) {\r\n          reject(new Error(\"Failed to parse the imported file: \" + error.message));\r\n        }\r\n      };\r\n      \r\n      reader.onerror = () => {\r\n        reject(new Error(\"Failed to read the file\"));\r\n      };\r\n      \r\n      reader.readAsText(file);\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error importing user data:\", error);\r\n    return false;\r\n  }\r\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,gBAAgB,GAAG;EAC9BC,UAAU,EAAE;IACVC,QAAQ,EAAE,QAAQ;IAClBC,WAAW,EAAE;EACf,CAAC;EACDC,WAAW,EAAE;IACXC,eAAe,EAAE,KAAK;IACtBC,UAAU,EAAE,YAAY;IACxBC,YAAY,EAAE,OAAO;IACrBC,eAAe,EAAE,YAAY;IAC7BC,QAAQ,EAAE;EACZ,CAAC;EACDC,aAAa,EAAE;IACbC,aAAa,EAAE,IAAI;IACnBC,aAAa,EAAE,IAAI;IACnBC,YAAY,EAAE,IAAI;IAClBC,kBAAkB,EAAE;EACtB,CAAC;EACDC,OAAO,EAAE;IACPC,iBAAiB,EAAE,IAAI;IACvBC,gBAAgB,EAAE,IAAI;IACtBC,eAAe,EAAE;EACnB;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAGA,CAAA,KAAM;EACnC,IAAI;IACF,MAAMC,aAAa,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;IAC1D,OAAOF,aAAa,GAAGG,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC,GAAGpB,gBAAgB;EACrE,CAAC,CAAC,OAAOyB,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAOzB,gBAAgB;EACzB;AACF,CAAC;;AAED;AACA,OAAO,MAAM2B,gBAAgB,GAAIC,QAAQ,IAAK;EAC5C,IAAI;IACFP,YAAY,CAACQ,OAAO,CAAC,cAAc,EAAEN,IAAI,CAACO,SAAS,CAACF,QAAQ,CAAC,CAAC;IAC9D,OAAO,IAAI;EACb,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,kBAAkB,GAAIH,QAAQ,IAAK;EAC9C,MAAM;IAAE1B,QAAQ;IAAEC;EAAY,CAAC,GAAGyB,QAAQ,CAAC3B,UAAU;;EAErD;EACA+B,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,SAAS,EAAE,WAAW,EAAE,SAAS,CAAC;EAC5E,IAAIjC,QAAQ,KAAK,OAAO,EAAE;IACxB8B,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,GAAG,CAAC,SAAS,CAAC;EACnD,CAAC,MAAM,IAAIlC,QAAQ,KAAK,QAAQ,EAAE;IAChC8B,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,GAAG,CAAC,WAAW,CAAC;EACrD,CAAC,MAAM,IAAIlC,QAAQ,KAAK,OAAO,EAAE;IAC/B8B,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,GAAG,CAAC,SAAS,CAAC;EACnD;;EAEA;EACA;EACA,MAAMC,kBAAkB,GAAG,CACzB,YAAY,EAAE,cAAc,EAAE,aAAa,EAC3C,WAAW,EAAE,aAAa,EAAE,cAAc,CAC3C;EACDL,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,MAAM,CAAC,GAAGE,kBAAkB,CAAC;EAChEL,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,GAAG,CAAC,SAASjC,WAAW,EAAE,CAAC;;EAE9D;EACA6B,QAAQ,CAACC,eAAe,CAACK,KAAK,CAACC,WAAW,CAAC,iBAAiB,EAAEpC,WAAW,CAAC;;EAE1E;EACAqC,kBAAkB,CAACrC,WAAW,CAAC;EAE/B,OAAO,IAAI;AACb,CAAC;;AAED;AACA,MAAMqC,kBAAkB,GAAIrC,WAAW,IAAK;EAC1C,MAAMsC,WAAW,GAAG;IAClB,MAAM,EAAE,SAAS;IACjB,QAAQ,EAAE,SAAS;IACnB,OAAO,EAAE,SAAS;IAClB,KAAK,EAAE,SAAS;IAChB,OAAO,EAAE,SAAS;IAClB,QAAQ,EAAE;EACZ,CAAC;EAED,MAAMC,KAAK,GAAGD,WAAW,CAACtC,WAAW,CAAC,IAAIsC,WAAW,CAACE,IAAI;;EAE1D;EACA,MAAMC,eAAe,GAAGZ,QAAQ,CAACa,aAAa,CAAC,kBAAkB,CAAC;EAElE,IAAID,eAAe,EAAE;IACnB;IACA,IAAIA,eAAe,CAACE,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC,EAAE;MACzCrB,OAAO,CAACsB,GAAG,CAAC,kCAAkC,CAAC;MAC/C;IACF;;IAEA;IACA;;IAEA;IACAtB,OAAO,CAACsB,GAAG,CAAC,+BAA+B7C,WAAW,qBAAqBuC,KAAK,EAAE,CAAC;EACrF;AACF,CAAC;;AAED;AACA,OAAO,MAAMO,UAAU,GAAGA,CAACC,UAAU,EAAEtB,QAAQ,KAAK;EAAA,IAAAuB,qBAAA;EAClD,IAAI,CAACD,UAAU,EAAE,OAAO,EAAE;EAE1B,MAAME,IAAI,GAAG,IAAIC,IAAI,CAACH,UAAU,CAAC;EACjC,MAAMI,MAAM,GAAG,CAAA1B,QAAQ,aAARA,QAAQ,wBAAAuB,qBAAA,GAARvB,QAAQ,CAAExB,WAAW,cAAA+C,qBAAA,uBAArBA,qBAAA,CAAuB7C,UAAU,KAAI,YAAY;EAEhE,QAAQgD,MAAM;IACZ,KAAK,YAAY;MACf,OAAO,GAAGC,OAAO,CAACH,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC,IAAID,OAAO,CAACH,IAAI,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,IAAIL,IAAI,CAACM,WAAW,CAAC,CAAC,EAAE;IAC3F,KAAK,YAAY;MACf,OAAO,GAAGN,IAAI,CAACM,WAAW,CAAC,CAAC,IAAIH,OAAO,CAACH,IAAI,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,IAAIF,OAAO,CAACH,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC,EAAE;IAC3F,KAAK,cAAc;MACjB,OAAO,GAAGG,YAAY,CAACP,IAAI,CAACK,QAAQ,CAAC,CAAC,CAAC,IAAIL,IAAI,CAACI,OAAO,CAAC,CAAC,KAAKJ,IAAI,CAACM,WAAW,CAAC,CAAC,EAAE;IACpF,KAAK,aAAa;MAChB,OAAO,GAAGN,IAAI,CAACI,OAAO,CAAC,CAAC,IAAIG,YAAY,CAACP,IAAI,CAACK,QAAQ,CAAC,CAAC,CAAC,IAAIL,IAAI,CAACM,WAAW,CAAC,CAAC,EAAE;IACnF,KAAK,YAAY;IACjB;MACE,OAAO,GAAGH,OAAO,CAACH,IAAI,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,IAAIF,OAAO,CAACH,IAAI,CAACI,OAAO,CAAC,CAAC,CAAC,IAAIJ,IAAI,CAACM,WAAW,CAAC,CAAC,EAAE;EAC7F;AACF,CAAC;;AAED;AACA,OAAO,MAAME,cAAc,GAAGA,CAACC,MAAM,EAAEjC,QAAQ,KAAK;EAAA,IAAAkC,sBAAA;EAClD,MAAMC,YAAY,GAAG,CAAAnC,QAAQ,aAARA,QAAQ,wBAAAkC,sBAAA,GAARlC,QAAQ,CAAExB,WAAW,cAAA0D,sBAAA,uBAArBA,sBAAA,CAAuBzD,eAAe,KAAI,KAAK;;EAEpE;EACA,MAAM2D,eAAe,GAAG;IACtB,KAAK,EAAE,GAAG;IACV,KAAK,EAAE,GAAG;IACV,KAAK,EAAE,GAAG;IACV,KAAK,EAAE,GAAG;IACV,KAAK,EAAE,KAAK;IACZ,KAAK,EAAE,KAAK;IACZ,KAAK,EAAE,GAAG;IACV,KAAK,EAAE;EACT,CAAC;EAED,MAAMC,MAAM,GAAGD,eAAe,CAACD,YAAY,CAAC,IAAIA,YAAY;;EAE5D;EACA,IAAIG,eAAe;EACnB,IAAIH,YAAY,KAAK,KAAK,IAAIA,YAAY,KAAK,KAAK,EAAE;IACpDG,eAAe,GAAGC,IAAI,CAACC,KAAK,CAACP,MAAM,CAAC,CAACQ,cAAc,CAAC,CAAC;EACvD,CAAC,MAAM;IACLH,eAAe,GAAGI,MAAM,CAACT,MAAM,CAAC,CAACU,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,mBAAmB,EAAE,KAAK,CAAC;EACjF;EAEA,OAAO,GAAGP,MAAM,GAAGC,eAAe,EAAE;AACtC,CAAC;;AAED;AACA,OAAO,MAAMO,iBAAiB,GAAGA,CAACC,OAAO,EAAE9C,QAAQ,KAAK;EAAA,IAAA+C,sBAAA;EACtD,MAAMC,IAAI,GAAG,CAAAhD,QAAQ,aAARA,QAAQ,wBAAA+C,sBAAA,GAAR/C,QAAQ,CAAExB,WAAW,cAAAuE,sBAAA,uBAArBA,sBAAA,CAAuBnE,eAAe,KAAI,YAAY;EAEnE,IAAIoE,IAAI,KAAK,SAAS,EAAE;IACtB,OAAO,GAAGT,IAAI,CAACC,KAAK,CAACM,OAAO,CAAC,IAAI;EACnC,CAAC,MAAM;IACL;IACA,MAAMG,UAAU,GAAIH,OAAO,GAAG,CAAC,GAAC,CAAC,GAAI,EAAE;IACvC,OAAO,GAAGP,IAAI,CAACC,KAAK,CAACS,UAAU,CAAC,IAAI;EACtC;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAGA,CAACC,UAAU,EAAEnD,QAAQ,KAAK;EAAA,IAAAoD,sBAAA;EACtD,MAAMJ,IAAI,GAAG,CAAAhD,QAAQ,aAARA,QAAQ,wBAAAoD,sBAAA,GAARpD,QAAQ,CAAExB,WAAW,cAAA4E,sBAAA,uBAArBA,sBAAA,CAAuBzE,YAAY,KAAI,OAAO;EAE3D,IAAIqE,IAAI,KAAK,YAAY,EAAE;IACzB,OAAO,GAAGG,UAAU,CAACR,OAAO,CAAC,CAAC,CAAC,KAAK;EACtC,CAAC,MAAM;IACL;IACA,MAAMU,KAAK,GAAGF,UAAU,GAAG,QAAQ;IACnC,OAAO,GAAGE,KAAK,CAACV,OAAO,CAAC,CAAC,CAAC,KAAK;EACjC;AACF,CAAC;;AAED;AACA,MAAMhB,OAAO,GAAI2B,GAAG,IAAK;EACvB,OAAOA,GAAG,CAACC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;AACxC,CAAC;AAED,MAAMzB,YAAY,GAAI0B,UAAU,IAAK;EACnC,MAAMC,MAAM,GAAG,CACb,SAAS,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EACtD,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,UAAU,CACjE;EACD,OAAOA,MAAM,CAACD,UAAU,CAAC;AAC3B,CAAC;;AAED;AACA,OAAO,MAAME,eAAe,GAAGA,CAAA,KAAM;EACnC,IAAIC,MAAM,CAACC,OAAO,CAAC,kIAAkI,CAAC,EAAE;IACtJ,IAAI;MACFpE,YAAY,CAACqE,KAAK,CAAC,CAAC;MACpB,OAAO,IAAI;IACb,CAAC,CAAC,OAAOjE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,OAAO,KAAK;IACd;EACF;EACA,OAAO,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMkE,cAAc,GAAGA,CAAA,KAAM;EAClC,IAAI;IACF,MAAMC,IAAI,GAAG;MACXC,KAAK,EAAEtE,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC,IAAI,IAAI,CAAC;MACrEwE,SAAS,EAAEvE,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC,IAAI,IAAI,CAAC;MACpEM,QAAQ,EAAEL,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC,IAAI,IAAI;IACnE,CAAC;IAED,MAAMyE,OAAO,GAAGxE,IAAI,CAACO,SAAS,CAAC8D,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;IAC7C,MAAMI,OAAO,GAAG,uCAAuCC,kBAAkB,CAACF,OAAO,CAAC,EAAE;IAEpF,MAAMG,cAAc,GAAG,qBAAqB,IAAI7C,IAAI,CAAC,CAAC,CAAC8C,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,OAAO;IAEzF,MAAMC,WAAW,GAAGrE,QAAQ,CAACsE,aAAa,CAAC,GAAG,CAAC;IAC/CD,WAAW,CAACE,YAAY,CAAC,MAAM,EAAEP,OAAO,CAAC;IACzCK,WAAW,CAACE,YAAY,CAAC,UAAU,EAAEL,cAAc,CAAC;IACpDG,WAAW,CAACG,KAAK,CAAC,CAAC;IAEnB,OAAO,IAAI;EACb,CAAC,CAAC,OAAO/E,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMgF,cAAc,GAAG,MAAOC,IAAI,IAAK;EAC5C,IAAI;IACF,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,MAAMC,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAE/BD,MAAM,CAACE,MAAM,GAAIC,KAAK,IAAK;QACzB,IAAI;UACF,MAAMrB,IAAI,GAAGrE,IAAI,CAACC,KAAK,CAACyF,KAAK,CAACC,MAAM,CAACC,MAAM,CAAC;;UAE5C;UACA,IAAI,CAACvB,IAAI,CAACC,KAAK,IAAI,CAACD,IAAI,CAACE,SAAS,IAAI,CAACF,IAAI,CAAChE,QAAQ,EAAE;YACpDiF,MAAM,CAAC,IAAIO,KAAK,CAAC,uEAAuE,CAAC,CAAC;YAC1F;UACF;;UAEA;UACA/F,YAAY,CAACQ,OAAO,CAAC,oBAAoB,EAAEN,IAAI,CAACO,SAAS,CAAC8D,IAAI,CAACC,KAAK,CAAC,CAAC;UACtExE,YAAY,CAACQ,OAAO,CAAC,eAAe,EAAEN,IAAI,CAACO,SAAS,CAAC8D,IAAI,CAACE,SAAS,CAAC,CAAC;UACrEzE,YAAY,CAACQ,OAAO,CAAC,cAAc,EAAEN,IAAI,CAACO,SAAS,CAAC8D,IAAI,CAAChE,QAAQ,CAAC,CAAC;UAEnEgF,OAAO,CAAC,IAAI,CAAC;QACf,CAAC,CAAC,OAAOnF,KAAK,EAAE;UACdoF,MAAM,CAAC,IAAIO,KAAK,CAAC,qCAAqC,GAAG3F,KAAK,CAAC4F,OAAO,CAAC,CAAC;QAC1E;MACF,CAAC;MAEDP,MAAM,CAACQ,OAAO,GAAG,MAAM;QACrBT,MAAM,CAAC,IAAIO,KAAK,CAAC,yBAAyB,CAAC,CAAC;MAC9C,CAAC;MAEDN,MAAM,CAACS,UAAU,CAACb,IAAI,CAAC;IACzB,CAAC,CAAC;EACJ,CAAC,CAAC,OAAOjF,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO,KAAK;EACd;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}