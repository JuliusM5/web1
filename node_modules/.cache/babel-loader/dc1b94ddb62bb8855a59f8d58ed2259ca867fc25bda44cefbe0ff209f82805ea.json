{"ast":null,"code":"// server/services/stripeService.js\n\nconst stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\nconst config = require('../config');\n\n/**\r\n * Service for Stripe payment processing\r\n */\nclass StripeService {\n  /**\r\n   * Create a Stripe checkout session for subscription purchase\r\n   */\n  async createCheckoutSession({\n    email,\n    priceId,\n    successUrl,\n    cancelUrl\n  }) {\n    try {\n      const session = await stripe.checkout.sessions.create({\n        payment_method_types: ['card'],\n        customer_email: email,\n        line_items: [{\n          price: priceId,\n          quantity: 1\n        }],\n        mode: 'subscription',\n        success_url: successUrl,\n        cancel_url: cancelUrl,\n        metadata: {\n          product_type: 'subscription'\n        }\n      });\n      return session;\n    } catch (error) {\n      console.error('Failed to create Stripe checkout session:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Retrieve a checkout session\r\n   */\n  async retrieveCheckoutSession(sessionId) {\n    try {\n      const session = await stripe.checkout.sessions.retrieve(sessionId, {\n        expand: ['line_items', 'customer']\n      });\n      return session;\n    } catch (error) {\n      console.error('Failed to retrieve Stripe checkout session:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Cancel a subscription\r\n   */\n  async cancelSubscription(subscriptionId) {\n    try {\n      const canceledSubscription = await stripe.subscriptions.del(subscriptionId);\n      return {\n        success: true,\n        subscription: canceledSubscription\n      };\n    } catch (error) {\n      console.error('Failed to cancel Stripe subscription:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Handle Stripe webhook events\r\n   */\n  async handleWebhookEvent(event) {\n    const eventType = event.type;\n    switch (eventType) {\n      case 'checkout.session.completed':\n        // Handle successful checkout\n        const session = event.data.object;\n        console.log('Checkout completed:', session.id);\n        return {\n          handled: true,\n          type: 'checkout.completed'\n        };\n      case 'customer.subscription.updated':\n        // Handle subscription update (renewal, plan change)\n        const updatedSubscription = event.data.object;\n        console.log('Subscription updated:', updatedSubscription.id);\n        return {\n          handled: true,\n          type: 'subscription.updated'\n        };\n      case 'customer.subscription.deleted':\n        // Handle subscription cancellation\n        const deletedSubscription = event.data.object;\n        console.log('Subscription canceled:', deletedSubscription.id);\n        return {\n          handled: true,\n          type: 'subscription.canceled'\n        };\n      case 'invoice.payment_failed':\n        // Handle failed payment\n        const failedInvoice = event.data.object;\n        console.log('Payment failed:', failedInvoice.id);\n        return {\n          handled: true,\n          type: 'payment.failed'\n        };\n      default:\n        // Unhandled event type\n        console.log('Unhandled event type:', eventType);\n        return {\n          handled: false,\n          type: eventType\n        };\n    }\n  }\n\n  /**\r\n   * Verify Stripe webhook signature\r\n   */\n  verifyWebhookSignature(payload, signature) {\n    try {\n      const event = stripe.webhooks.constructEvent(payload, signature, process.env.STRIPE_WEBHOOK_SECRET);\n      return {\n        valid: true,\n        event\n      };\n    } catch (error) {\n      console.error('Webhook signature verification failed:', error);\n      return {\n        valid: false,\n        error: error.message\n      };\n    }\n  }\n}\nmodule.exports = new StripeService();","map":{"version":3,"names":["stripe","require","process","env","STRIPE_SECRET_KEY","config","StripeService","createCheckoutSession","email","priceId","successUrl","cancelUrl","session","checkout","sessions","create","payment_method_types","customer_email","line_items","price","quantity","mode","success_url","cancel_url","metadata","product_type","error","console","retrieveCheckoutSession","sessionId","retrieve","expand","cancelSubscription","subscriptionId","canceledSubscription","subscriptions","del","success","subscription","handleWebhookEvent","event","eventType","type","data","object","log","id","handled","updatedSubscription","deletedSubscription","failedInvoice","verifyWebhookSignature","payload","signature","webhooks","constructEvent","STRIPE_WEBHOOK_SECRET","valid","message","module","exports"],"sources":["C:/Users/juliu/Desktop/web/src/services/stripeService.js"],"sourcesContent":["// server/services/stripeService.js\r\n\r\nconst stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);\r\nconst config = require('../config');\r\n\r\n/**\r\n * Service for Stripe payment processing\r\n */\r\nclass StripeService {\r\n  /**\r\n   * Create a Stripe checkout session for subscription purchase\r\n   */\r\n  async createCheckoutSession({ email, priceId, successUrl, cancelUrl }) {\r\n    try {\r\n      const session = await stripe.checkout.sessions.create({\r\n        payment_method_types: ['card'],\r\n        customer_email: email,\r\n        line_items: [\r\n          {\r\n            price: priceId,\r\n            quantity: 1,\r\n          },\r\n        ],\r\n        mode: 'subscription',\r\n        success_url: successUrl,\r\n        cancel_url: cancelUrl,\r\n        metadata: {\r\n          product_type: 'subscription',\r\n        },\r\n      });\r\n      \r\n      return session;\r\n    } catch (error) {\r\n      console.error('Failed to create Stripe checkout session:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve a checkout session\r\n   */\r\n  async retrieveCheckoutSession(sessionId) {\r\n    try {\r\n      const session = await stripe.checkout.sessions.retrieve(sessionId, {\r\n        expand: ['line_items', 'customer'],\r\n      });\r\n      \r\n      return session;\r\n    } catch (error) {\r\n      console.error('Failed to retrieve Stripe checkout session:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cancel a subscription\r\n   */\r\n  async cancelSubscription(subscriptionId) {\r\n    try {\r\n      const canceledSubscription = await stripe.subscriptions.del(subscriptionId);\r\n      return { success: true, subscription: canceledSubscription };\r\n    } catch (error) {\r\n      console.error('Failed to cancel Stripe subscription:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle Stripe webhook events\r\n   */\r\n  async handleWebhookEvent(event) {\r\n    const eventType = event.type;\r\n    \r\n    switch (eventType) {\r\n      case 'checkout.session.completed':\r\n        // Handle successful checkout\r\n        const session = event.data.object;\r\n        console.log('Checkout completed:', session.id);\r\n        return { handled: true, type: 'checkout.completed' };\r\n        \r\n      case 'customer.subscription.updated':\r\n        // Handle subscription update (renewal, plan change)\r\n        const updatedSubscription = event.data.object;\r\n        console.log('Subscription updated:', updatedSubscription.id);\r\n        return { handled: true, type: 'subscription.updated' };\r\n        \r\n      case 'customer.subscription.deleted':\r\n        // Handle subscription cancellation\r\n        const deletedSubscription = event.data.object;\r\n        console.log('Subscription canceled:', deletedSubscription.id);\r\n        return { handled: true, type: 'subscription.canceled' };\r\n        \r\n      case 'invoice.payment_failed':\r\n        // Handle failed payment\r\n        const failedInvoice = event.data.object;\r\n        console.log('Payment failed:', failedInvoice.id);\r\n        return { handled: true, type: 'payment.failed' };\r\n        \r\n      default:\r\n        // Unhandled event type\r\n        console.log('Unhandled event type:', eventType);\r\n        return { handled: false, type: eventType };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify Stripe webhook signature\r\n   */\r\n  verifyWebhookSignature(payload, signature) {\r\n    try {\r\n      const event = stripe.webhooks.constructEvent(\r\n        payload,\r\n        signature,\r\n        process.env.STRIPE_WEBHOOK_SECRET\r\n      );\r\n      \r\n      return { valid: true, event };\r\n    } catch (error) {\r\n      console.error('Webhook signature verification failed:', error);\r\n      return { valid: false, error: error.message };\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = new StripeService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}