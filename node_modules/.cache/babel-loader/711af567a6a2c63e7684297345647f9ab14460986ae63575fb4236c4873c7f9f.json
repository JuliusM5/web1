{"ast":null,"code":"/**\r\n * Real Weather Service\r\n * Provides weather data from Open-Meteo API\r\n */\n\n// Base API URL for Open-Meteo\nconst OPEN_METEO_API_BASE = 'https://api.open-meteo.com/v1/forecast';\n\n/**\r\n * Get weather forecast for a specific location\r\n * \r\n * @param {number} latitude Latitude coordinate\r\n * @param {number} longitude Longitude coordinate\r\n * @param {Object} options Additional options for the forecast\r\n * @returns {Promise<Object>} Promise that resolves to weather forecast data\r\n */\nexport const getWeatherForecast = async (latitude, longitude, options = {}) => {\n  if (!latitude || !longitude) {\n    throw new Error('Latitude and longitude are required');\n  }\n  try {\n    // Default parameters for the API request\n    const defaultParams = {\n      latitude,\n      longitude,\n      current: 'temperature_2m,relative_humidity_2m,apparent_temperature,weather_code,wind_speed_10m',\n      daily: 'temperature_2m_max,temperature_2m_min,weather_code',\n      timezone: 'auto',\n      forecast_days: 7\n    };\n\n    // Merge default parameters with options\n    const params = {\n      ...defaultParams,\n      ...options\n    };\n\n    // Build query string\n    const queryString = Object.entries(params).map(([key, value]) => `${key}=${value}`).join('&');\n\n    // Make API request\n    const response = await fetch(`${OPEN_METEO_API_BASE}?${queryString}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch weather data: ${response.status} ${response.statusText}`);\n    }\n\n    // Parse response\n    const data = await response.json();\n\n    // Transform the Open-Meteo data into a more usable format\n    return transformOpenMeteoData(data);\n  } catch (error) {\n    console.error('Error fetching weather forecast:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Transform Open-Meteo data into a format compatible with the application\r\n * \r\n * @param {Object} data Raw API response from Open-Meteo\r\n * @returns {Object} Transformed weather data\r\n */\nconst transformOpenMeteoData = data => {\n  // Extract location information\n  const location = {\n    latitude: data.latitude,\n    longitude: data.longitude,\n    timezone: data.timezone,\n    elevation: data.elevation\n  };\n\n  // Map weather codes to weather conditions\n  const getWeatherCondition = code => {\n    const weatherCodes = {\n      0: {\n        main: 'Clear',\n        description: 'clear sky'\n      },\n      1: {\n        main: 'Clear',\n        description: 'mainly clear'\n      },\n      2: {\n        main: 'Clouds',\n        description: 'partly cloudy'\n      },\n      3: {\n        main: 'Clouds',\n        description: 'overcast'\n      },\n      45: {\n        main: 'Fog',\n        description: 'fog'\n      },\n      48: {\n        main: 'Fog',\n        description: 'depositing rime fog'\n      },\n      51: {\n        main: 'Drizzle',\n        description: 'light drizzle'\n      },\n      53: {\n        main: 'Drizzle',\n        description: 'moderate drizzle'\n      },\n      55: {\n        main: 'Drizzle',\n        description: 'dense drizzle'\n      },\n      56: {\n        main: 'Drizzle',\n        description: 'light freezing drizzle'\n      },\n      57: {\n        main: 'Drizzle',\n        description: 'dense freezing drizzle'\n      },\n      61: {\n        main: 'Rain',\n        description: 'slight rain'\n      },\n      63: {\n        main: 'Rain',\n        description: 'moderate rain'\n      },\n      65: {\n        main: 'Rain',\n        description: 'heavy rain'\n      },\n      66: {\n        main: 'Rain',\n        description: 'light freezing rain'\n      },\n      67: {\n        main: 'Rain',\n        description: 'heavy freezing rain'\n      },\n      71: {\n        main: 'Snow',\n        description: 'slight snow fall'\n      },\n      73: {\n        main: 'Snow',\n        description: 'moderate snow fall'\n      },\n      75: {\n        main: 'Snow',\n        description: 'heavy snow fall'\n      },\n      77: {\n        main: 'Snow',\n        description: 'snow grains'\n      },\n      80: {\n        main: 'Rain',\n        description: 'slight rain showers'\n      },\n      81: {\n        main: 'Rain',\n        description: 'moderate rain showers'\n      },\n      82: {\n        main: 'Rain',\n        description: 'violent rain showers'\n      },\n      85: {\n        main: 'Snow',\n        description: 'slight snow showers'\n      },\n      86: {\n        main: 'Snow',\n        description: 'heavy snow showers'\n      },\n      95: {\n        main: 'Thunderstorm',\n        description: 'thunderstorm'\n      },\n      96: {\n        main: 'Thunderstorm',\n        description: 'thunderstorm with slight hail'\n      },\n      99: {\n        main: 'Thunderstorm',\n        description: 'thunderstorm with heavy hail'\n      }\n    };\n    return weatherCodes[code] || {\n      main: 'Unknown',\n      description: 'unknown weather'\n    };\n  };\n\n  // Transform current weather data\n  const currentWeather = {\n    temperature: data.current.temperature_2m,\n    feels_like: data.current.apparent_temperature,\n    humidity: data.current.relative_humidity_2m,\n    windspeed: data.current.wind_speed_10m,\n    weather: [getWeatherCondition(data.current.weather_code)]\n  };\n\n  // Transform daily forecast data\n  const dailyForecasts = [];\n  for (let i = 0; i < data.daily.time.length; i++) {\n    dailyForecasts.push({\n      dt_txt: data.daily.time[i],\n      main: {\n        temp_max: data.daily.temperature_2m_max[i],\n        temp_min: data.daily.temperature_2m_min[i]\n      },\n      weather: [getWeatherCondition(data.daily.weather_code[i])]\n    });\n  }\n\n  // Return transformed data\n  return {\n    city: {\n      name: location.timezone.split('/').pop().replace(/_/g, ' '),\n      coord: {\n        lat: location.latitude,\n        lon: location.longitude\n      },\n      timezone: location.timezone\n    },\n    current_weather: currentWeather,\n    list: dailyForecasts\n  };\n};\n\n/**\r\n * Get current UV index forecast for a location\r\n * \r\n * @param {number} latitude Latitude coordinate\r\n * @param {number} longitude Longitude coordinate\r\n * @returns {Promise<Object>} Promise that resolves to UV index data\r\n */\nexport const getUVIndexForecast = async (latitude, longitude) => {\n  if (!latitude || !longitude) {\n    throw new Error('Latitude and longitude are required');\n  }\n  try {\n    const params = {\n      latitude,\n      longitude,\n      daily: 'uv_index_max,uv_index_clear_sky_max',\n      timezone: 'auto'\n    };\n    const queryString = Object.entries(params).map(([key, value]) => `${key}=${value}`).join('&');\n    const response = await fetch(`${OPEN_METEO_API_BASE}?${queryString}`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch UV index data: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n    return {\n      city: {\n        name: data.timezone.split('/').pop().replace(/_/g, ' '),\n        coord: {\n          lat: data.latitude,\n          lon: data.longitude\n        }\n      },\n      daily: data.daily\n    };\n  } catch (error) {\n    console.error('Error fetching UV index forecast:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get air quality forecast for a location\r\n * \r\n * @param {number} latitude Latitude coordinate\r\n * @param {number} longitude Longitude coordinate\r\n * @returns {Promise<Object>} Promise that resolves to air quality data\r\n */\nexport const getAirQualityForecast = async (latitude, longitude) => {\n  if (!latitude || !longitude) {\n    throw new Error('Latitude and longitude are required');\n  }\n  try {\n    const response = await fetch(`https://air-quality-api.open-meteo.com/v1/air-quality?latitude=${latitude}&longitude=${longitude}&current=european_aqi,pm10,pm2_5,carbon_monoxide,nitrogen_dioxide,ozone&timezone=auto`);\n    if (!response.ok) {\n      throw new Error(`Failed to fetch air quality data: ${response.status} ${response.statusText}`);\n    }\n    const data = await response.json();\n\n    // Transform data\n    return {\n      city: {\n        name: data.timezone.split('/').pop().replace(/_/g, ' '),\n        coord: {\n          lat: data.latitude,\n          lon: data.longitude\n        }\n      },\n      current: {\n        aqi: data.current.european_aqi,\n        pm10: data.current.pm10,\n        pm2_5: data.current.pm2_5,\n        co: data.current.carbon_monoxide,\n        no2: data.current.nitrogen_dioxide,\n        o3: data.current.ozone,\n        timestamp: data.current.time\n      }\n    };\n  } catch (error) {\n    console.error('Error fetching air quality forecast:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Get weather alert warnings for a location\r\n * \r\n * @param {number} latitude Latitude coordinate\r\n * @param {number} longitude Longitude coordinate\r\n * @returns {Promise<Object>} Promise that resolves to weather alert data\r\n */\nexport const getWeatherAlerts = async (latitude, longitude) => {\n  // Note: Open-Meteo doesn't provide weather alerts\n  // This is a mock implementation\n\n  return {\n    alerts: [] // No alerts\n  };\n};","map":{"version":3,"names":["OPEN_METEO_API_BASE","getWeatherForecast","latitude","longitude","options","Error","defaultParams","current","daily","timezone","forecast_days","params","queryString","Object","entries","map","key","value","join","response","fetch","ok","status","statusText","data","json","transformOpenMeteoData","error","console","location","elevation","getWeatherCondition","code","weatherCodes","main","description","currentWeather","temperature","temperature_2m","feels_like","apparent_temperature","humidity","relative_humidity_2m","windspeed","wind_speed_10m","weather","weather_code","dailyForecasts","i","time","length","push","dt_txt","temp_max","temperature_2m_max","temp_min","temperature_2m_min","city","name","split","pop","replace","coord","lat","lon","current_weather","list","getUVIndexForecast","getAirQualityForecast","aqi","european_aqi","pm10","pm2_5","co","carbon_monoxide","no2","nitrogen_dioxide","o3","ozone","timestamp","getWeatherAlerts","alerts"],"sources":["C:/Users/juliu/Desktop/web/src/services/realWeatherService.js"],"sourcesContent":["/**\r\n * Real Weather Service\r\n * Provides weather data from Open-Meteo API\r\n */\r\n\r\n// Base API URL for Open-Meteo\r\nconst OPEN_METEO_API_BASE = 'https://api.open-meteo.com/v1/forecast';\r\n\r\n/**\r\n * Get weather forecast for a specific location\r\n * \r\n * @param {number} latitude Latitude coordinate\r\n * @param {number} longitude Longitude coordinate\r\n * @param {Object} options Additional options for the forecast\r\n * @returns {Promise<Object>} Promise that resolves to weather forecast data\r\n */\r\nexport const getWeatherForecast = async (latitude, longitude, options = {}) => {\r\n  if (!latitude || !longitude) {\r\n    throw new Error('Latitude and longitude are required');\r\n  }\r\n  \r\n  try {\r\n    // Default parameters for the API request\r\n    const defaultParams = {\r\n      latitude,\r\n      longitude,\r\n      current: 'temperature_2m,relative_humidity_2m,apparent_temperature,weather_code,wind_speed_10m',\r\n      daily: 'temperature_2m_max,temperature_2m_min,weather_code',\r\n      timezone: 'auto',\r\n      forecast_days: 7\r\n    };\r\n    \r\n    // Merge default parameters with options\r\n    const params = { ...defaultParams, ...options };\r\n    \r\n    // Build query string\r\n    const queryString = Object.entries(params)\r\n      .map(([key, value]) => `${key}=${value}`)\r\n      .join('&');\r\n    \r\n    // Make API request\r\n    const response = await fetch(`${OPEN_METEO_API_BASE}?${queryString}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch weather data: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    // Parse response\r\n    const data = await response.json();\r\n    \r\n    // Transform the Open-Meteo data into a more usable format\r\n    return transformOpenMeteoData(data);\r\n  } catch (error) {\r\n    console.error('Error fetching weather forecast:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Transform Open-Meteo data into a format compatible with the application\r\n * \r\n * @param {Object} data Raw API response from Open-Meteo\r\n * @returns {Object} Transformed weather data\r\n */\r\nconst transformOpenMeteoData = (data) => {\r\n  // Extract location information\r\n  const location = {\r\n    latitude: data.latitude,\r\n    longitude: data.longitude,\r\n    timezone: data.timezone,\r\n    elevation: data.elevation\r\n  };\r\n  \r\n  // Map weather codes to weather conditions\r\n  const getWeatherCondition = (code) => {\r\n    const weatherCodes = {\r\n      0: { main: 'Clear', description: 'clear sky' },\r\n      1: { main: 'Clear', description: 'mainly clear' },\r\n      2: { main: 'Clouds', description: 'partly cloudy' },\r\n      3: { main: 'Clouds', description: 'overcast' },\r\n      45: { main: 'Fog', description: 'fog' },\r\n      48: { main: 'Fog', description: 'depositing rime fog' },\r\n      51: { main: 'Drizzle', description: 'light drizzle' },\r\n      53: { main: 'Drizzle', description: 'moderate drizzle' },\r\n      55: { main: 'Drizzle', description: 'dense drizzle' },\r\n      56: { main: 'Drizzle', description: 'light freezing drizzle' },\r\n      57: { main: 'Drizzle', description: 'dense freezing drizzle' },\r\n      61: { main: 'Rain', description: 'slight rain' },\r\n      63: { main: 'Rain', description: 'moderate rain' },\r\n      65: { main: 'Rain', description: 'heavy rain' },\r\n      66: { main: 'Rain', description: 'light freezing rain' },\r\n      67: { main: 'Rain', description: 'heavy freezing rain' },\r\n      71: { main: 'Snow', description: 'slight snow fall' },\r\n      73: { main: 'Snow', description: 'moderate snow fall' },\r\n      75: { main: 'Snow', description: 'heavy snow fall' },\r\n      77: { main: 'Snow', description: 'snow grains' },\r\n      80: { main: 'Rain', description: 'slight rain showers' },\r\n      81: { main: 'Rain', description: 'moderate rain showers' },\r\n      82: { main: 'Rain', description: 'violent rain showers' },\r\n      85: { main: 'Snow', description: 'slight snow showers' },\r\n      86: { main: 'Snow', description: 'heavy snow showers' },\r\n      95: { main: 'Thunderstorm', description: 'thunderstorm' },\r\n      96: { main: 'Thunderstorm', description: 'thunderstorm with slight hail' },\r\n      99: { main: 'Thunderstorm', description: 'thunderstorm with heavy hail' }\r\n    };\r\n    \r\n    return weatherCodes[code] || { main: 'Unknown', description: 'unknown weather' };\r\n  };\r\n  \r\n  // Transform current weather data\r\n  const currentWeather = {\r\n    temperature: data.current.temperature_2m,\r\n    feels_like: data.current.apparent_temperature,\r\n    humidity: data.current.relative_humidity_2m,\r\n    windspeed: data.current.wind_speed_10m,\r\n    weather: [getWeatherCondition(data.current.weather_code)]\r\n  };\r\n  \r\n  // Transform daily forecast data\r\n  const dailyForecasts = [];\r\n  for (let i = 0; i < data.daily.time.length; i++) {\r\n    dailyForecasts.push({\r\n      dt_txt: data.daily.time[i],\r\n      main: {\r\n        temp_max: data.daily.temperature_2m_max[i],\r\n        temp_min: data.daily.temperature_2m_min[i]\r\n      },\r\n      weather: [getWeatherCondition(data.daily.weather_code[i])]\r\n    });\r\n  }\r\n  \r\n  // Return transformed data\r\n  return {\r\n    city: {\r\n      name: location.timezone.split('/').pop().replace(/_/g, ' '),\r\n      coord: {\r\n        lat: location.latitude,\r\n        lon: location.longitude\r\n      },\r\n      timezone: location.timezone\r\n    },\r\n    current_weather: currentWeather,\r\n    list: dailyForecasts\r\n  };\r\n};\r\n\r\n/**\r\n * Get current UV index forecast for a location\r\n * \r\n * @param {number} latitude Latitude coordinate\r\n * @param {number} longitude Longitude coordinate\r\n * @returns {Promise<Object>} Promise that resolves to UV index data\r\n */\r\nexport const getUVIndexForecast = async (latitude, longitude) => {\r\n  if (!latitude || !longitude) {\r\n    throw new Error('Latitude and longitude are required');\r\n  }\r\n  \r\n  try {\r\n    const params = {\r\n      latitude,\r\n      longitude,\r\n      daily: 'uv_index_max,uv_index_clear_sky_max',\r\n      timezone: 'auto'\r\n    };\r\n    \r\n    const queryString = Object.entries(params)\r\n      .map(([key, value]) => `${key}=${value}`)\r\n      .join('&');\r\n    \r\n    const response = await fetch(`${OPEN_METEO_API_BASE}?${queryString}`);\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch UV index data: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    return {\r\n      city: {\r\n        name: data.timezone.split('/').pop().replace(/_/g, ' '),\r\n        coord: {\r\n          lat: data.latitude,\r\n          lon: data.longitude\r\n        }\r\n      },\r\n      daily: data.daily\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching UV index forecast:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get air quality forecast for a location\r\n * \r\n * @param {number} latitude Latitude coordinate\r\n * @param {number} longitude Longitude coordinate\r\n * @returns {Promise<Object>} Promise that resolves to air quality data\r\n */\r\nexport const getAirQualityForecast = async (latitude, longitude) => {\r\n  if (!latitude || !longitude) {\r\n    throw new Error('Latitude and longitude are required');\r\n  }\r\n  \r\n  try {\r\n    const response = await fetch(\r\n      `https://air-quality-api.open-meteo.com/v1/air-quality?latitude=${latitude}&longitude=${longitude}&current=european_aqi,pm10,pm2_5,carbon_monoxide,nitrogen_dioxide,ozone&timezone=auto`\r\n    );\r\n    \r\n    if (!response.ok) {\r\n      throw new Error(`Failed to fetch air quality data: ${response.status} ${response.statusText}`);\r\n    }\r\n    \r\n    const data = await response.json();\r\n    \r\n    // Transform data\r\n    return {\r\n      city: {\r\n        name: data.timezone.split('/').pop().replace(/_/g, ' '),\r\n        coord: {\r\n          lat: data.latitude,\r\n          lon: data.longitude\r\n        }\r\n      },\r\n      current: {\r\n        aqi: data.current.european_aqi,\r\n        pm10: data.current.pm10,\r\n        pm2_5: data.current.pm2_5,\r\n        co: data.current.carbon_monoxide,\r\n        no2: data.current.nitrogen_dioxide,\r\n        o3: data.current.ozone,\r\n        timestamp: data.current.time\r\n      }\r\n    };\r\n  } catch (error) {\r\n    console.error('Error fetching air quality forecast:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Get weather alert warnings for a location\r\n * \r\n * @param {number} latitude Latitude coordinate\r\n * @param {number} longitude Longitude coordinate\r\n * @returns {Promise<Object>} Promise that resolves to weather alert data\r\n */\r\nexport const getWeatherAlerts = async (latitude, longitude) => {\r\n  // Note: Open-Meteo doesn't provide weather alerts\r\n  // This is a mock implementation\r\n  \r\n  return {\r\n    alerts: [] // No alerts\r\n  };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}