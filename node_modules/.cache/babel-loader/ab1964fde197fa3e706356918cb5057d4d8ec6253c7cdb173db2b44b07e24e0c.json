{"ast":null,"code":"// src/services/offersService.js\n\n// Available offer categories\nexport const offerCategories = {\n  destinationType: ['Beach Getaway', 'Mountain Retreat', 'Urban Exploration', 'Cultural Heritage', 'Island Escape', 'Desert Adventure', 'Countryside Retreat'],\n  tripDuration: ['Weekend Break (2-3 days)', 'Short Getaway (4-6 days)', 'Extended Vacation (7-14 days)', 'Long-term Journey (15+ days)'],\n  travelStyle: ['Luxury Vacation', 'Budget-Friendly', 'Family Package', 'Romantic Getaway', 'Solo Traveler', 'Group Adventure', 'Senior-Friendly'],\n  experienceType: ['Adventure Travel', 'Culinary Experience', 'Wellness Retreat', 'Educational Tour', 'Wildlife & Nature', 'Photography Tour', 'Festival & Event'],\n  seasonalSpecial: ['Summer Escape', 'Winter Wonderland', 'Spring Bloom', 'Fall/Autumn Getaway', 'Holiday Season'],\n  transportFeature: ['All-Inclusive', 'Cruise Package', 'Road Trip', 'Train Journey', 'Sailing Adventure'],\n  specialInterest: ['Sports Tourism', 'Eco-Tourism', 'Historical Expedition', 'Art & Architecture', 'Music & Festival', 'Wine & Brewery Tour', 'Wildlife Safari']\n};\n\n// Default offers if none exist in localStorage\n\n// Initialize offers - only called once to set up default data\nexport const initializeOffers = () => {\n  if (cachedOffers !== null) {\n    return cachedOffers;\n  }\n  try {\n    const storedOffers = localStorage.getItem('offers');\n    if (!storedOffers) {\n      localStorage.setItem('offers', JSON.stringify(defaultOffers));\n      cachedOffers = [...defaultOffers];\n      return cachedOffers;\n    }\n    cachedOffers = JSON.parse(storedOffers);\n    return cachedOffers;\n  } catch (error) {\n    console.error('Error initializing offers:', error);\n    cachedOffers = [...defaultOffers];\n    return cachedOffers;\n  }\n};\n\n// Get all offers - uses cached version when available\nexport const getOffers = () => {\n  // Return cached offers if available\n  if (cachedOffers !== null) {\n    return cachedOffers;\n  }\n\n  // Initialize if not yet done\n  return initializeOffers();\n};\n\n// Get featured offers - derived from the main offers\nexport const getFeaturedOffers = () => {\n  const offers = getOffers();\n  return offers.filter(offer => offer.featured);\n};\n\n// Get offers by category\nexport const getOffersByCategory = category => {\n  const offers = getOffers();\n  return offers.filter(offer => offer.categories && offer.categories.includes(category));\n};\n\n// Create new offer - updates both localStorage and cache\nexport const createOffer = offerData => {\n  try {\n    const offers = getOffers();\n\n    // Generate a new ID\n    const maxId = offers.reduce((max, offer) => offer.id > max ? offer.id : max, 0);\n    const newOffer = {\n      ...offerData,\n      id: maxId + 1,\n      // Ensure categories exists\n      categories: offerData.categories || []\n    };\n\n    // Update cache and localStorage\n    cachedOffers = [...offers, newOffer];\n    localStorage.setItem('offers', JSON.stringify(cachedOffers));\n    return newOffer;\n  } catch (error) {\n    console.error('Error creating offer:', error);\n    throw error;\n  }\n};\n\n// Update existing offer - updates both localStorage and cache\nexport const updateOffer = (id, offerData) => {\n  try {\n    const offers = getOffers();\n    const updatedOffers = offers.map(offer => offer.id === id ? {\n      ...offer,\n      ...offerData,\n      id,\n      // Ensure categories exists\n      categories: offerData.categories || offer.categories || []\n    } : offer);\n\n    // Update cache and localStorage\n    cachedOffers = updatedOffers;\n    localStorage.setItem('offers', JSON.stringify(updatedOffers));\n    return updatedOffers.find(offer => offer.id === id);\n  } catch (error) {\n    console.error('Error updating offer:', error);\n    throw error;\n  }\n};\n\n// Delete offer - updates both localStorage and cache\nexport const deleteOffer = id => {\n  try {\n    const offers = getOffers();\n    const updatedOffers = offers.filter(offer => offer.id !== id);\n\n    // Update cache and localStorage\n    cachedOffers = updatedOffers;\n    localStorage.setItem('offers', JSON.stringify(updatedOffers));\n    return true;\n  } catch (error) {\n    console.error('Error deleting offer:', error);\n    throw error;\n  }\n};\n\n// Search offers - doesn't modify any state\nexport const searchOffers = query => {\n  if (!query || query.trim() === '') return [];\n  const offers = getOffers();\n  const lowerQuery = query.toLowerCase();\n  return offers.filter(offer => offer.title.toLowerCase().includes(lowerQuery) || offer.destination.toLowerCase().includes(lowerQuery) || offer.description.toLowerCase().includes(lowerQuery) || offer.categories && offer.categories.some(cat => cat.toLowerCase().includes(lowerQuery)));\n};\n\n// Reset offers to defaults (for testing)\nexport const resetOffers = () => {\n  cachedOffers = [...defaultOffers];\n  localStorage.setItem('offers', JSON.stringify(defaultOffers));\n  return [...defaultOffers];\n};","map":{"version":3,"names":["offerCategories","destinationType","tripDuration","travelStyle","experienceType","seasonalSpecial","transportFeature","specialInterest","initializeOffers","cachedOffers","storedOffers","localStorage","getItem","setItem","JSON","stringify","defaultOffers","parse","error","console","getOffers","getFeaturedOffers","offers","filter","offer","featured","getOffersByCategory","category","categories","includes","createOffer","offerData","maxId","reduce","max","id","newOffer","updateOffer","updatedOffers","map","find","deleteOffer","searchOffers","query","trim","lowerQuery","toLowerCase","title","destination","description","some","cat","resetOffers"],"sources":["C:/Users/juliu/Desktop/web/src/services/offersService.js"],"sourcesContent":["// src/services/offersService.js\r\n\r\n// Available offer categories\r\nexport const offerCategories = {\r\n  destinationType: [\r\n    'Beach Getaway',\r\n    'Mountain Retreat',\r\n    'Urban Exploration',\r\n    'Cultural Heritage',\r\n    'Island Escape',\r\n    'Desert Adventure',\r\n    'Countryside Retreat'\r\n  ],\r\n  tripDuration: [\r\n    'Weekend Break (2-3 days)',\r\n    'Short Getaway (4-6 days)',\r\n    'Extended Vacation (7-14 days)',\r\n    'Long-term Journey (15+ days)'\r\n  ],\r\n  travelStyle: [\r\n    'Luxury Vacation',\r\n    'Budget-Friendly',\r\n    'Family Package',\r\n    'Romantic Getaway',\r\n    'Solo Traveler',\r\n    'Group Adventure',\r\n    'Senior-Friendly'\r\n  ],\r\n  experienceType: [\r\n    'Adventure Travel',\r\n    'Culinary Experience',\r\n    'Wellness Retreat',\r\n    'Educational Tour',\r\n    'Wildlife & Nature',\r\n    'Photography Tour',\r\n    'Festival & Event'\r\n  ],\r\n  seasonalSpecial: [\r\n    'Summer Escape',\r\n    'Winter Wonderland',\r\n    'Spring Bloom',\r\n    'Fall/Autumn Getaway',\r\n    'Holiday Season'\r\n  ],\r\n  transportFeature: [\r\n    'All-Inclusive',\r\n    'Cruise Package',\r\n    'Road Trip',\r\n    'Train Journey',\r\n    'Sailing Adventure'\r\n  ],\r\n  specialInterest: [\r\n    'Sports Tourism',\r\n    'Eco-Tourism',\r\n    'Historical Expedition',\r\n    'Art & Architecture',\r\n    'Music & Festival',\r\n    'Wine & Brewery Tour',\r\n    'Wildlife Safari'\r\n  ]\r\n};\r\n\r\n// Default offers if none exist in localStorage\r\n\r\n// Initialize offers - only called once to set up default data\r\nexport const initializeOffers = () => {\r\n  if (cachedOffers !== null) {\r\n    return cachedOffers;\r\n  }\r\n  \r\n  try {\r\n    const storedOffers = localStorage.getItem('offers');\r\n    \r\n    if (!storedOffers) {\r\n      localStorage.setItem('offers', JSON.stringify(defaultOffers));\r\n      cachedOffers = [...defaultOffers];\r\n      return cachedOffers;\r\n    }\r\n    \r\n    cachedOffers = JSON.parse(storedOffers);\r\n    return cachedOffers;\r\n  } catch (error) {\r\n    console.error('Error initializing offers:', error);\r\n    cachedOffers = [...defaultOffers];\r\n    return cachedOffers;\r\n  }\r\n};\r\n\r\n// Get all offers - uses cached version when available\r\nexport const getOffers = () => {\r\n  // Return cached offers if available\r\n  if (cachedOffers !== null) {\r\n    return cachedOffers;\r\n  }\r\n  \r\n  // Initialize if not yet done\r\n  return initializeOffers();\r\n};\r\n\r\n// Get featured offers - derived from the main offers\r\nexport const getFeaturedOffers = () => {\r\n  const offers = getOffers();\r\n  return offers.filter(offer => offer.featured);\r\n};\r\n\r\n// Get offers by category\r\nexport const getOffersByCategory = (category) => {\r\n  const offers = getOffers();\r\n  return offers.filter(offer => \r\n    offer.categories && offer.categories.includes(category)\r\n  );\r\n};\r\n\r\n// Create new offer - updates both localStorage and cache\r\nexport const createOffer = (offerData) => {\r\n  try {\r\n    const offers = getOffers();\r\n    \r\n    // Generate a new ID\r\n    const maxId = offers.reduce((max, offer) => (offer.id > max ? offer.id : max), 0);\r\n    const newOffer = { \r\n      ...offerData, \r\n      id: maxId + 1,\r\n      // Ensure categories exists\r\n      categories: offerData.categories || []\r\n    };\r\n    \r\n    // Update cache and localStorage\r\n    cachedOffers = [...offers, newOffer];\r\n    localStorage.setItem('offers', JSON.stringify(cachedOffers));\r\n    \r\n    return newOffer;\r\n  } catch (error) {\r\n    console.error('Error creating offer:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Update existing offer - updates both localStorage and cache\r\nexport const updateOffer = (id, offerData) => {\r\n  try {\r\n    const offers = getOffers();\r\n    const updatedOffers = offers.map(offer => \r\n      offer.id === id ? { \r\n        ...offer, \r\n        ...offerData, \r\n        id,\r\n        // Ensure categories exists\r\n        categories: offerData.categories || offer.categories || []\r\n      } : offer\r\n    );\r\n    \r\n    // Update cache and localStorage\r\n    cachedOffers = updatedOffers;\r\n    localStorage.setItem('offers', JSON.stringify(updatedOffers));\r\n    \r\n    return updatedOffers.find(offer => offer.id === id);\r\n  } catch (error) {\r\n    console.error('Error updating offer:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Delete offer - updates both localStorage and cache\r\nexport const deleteOffer = (id) => {\r\n  try {\r\n    const offers = getOffers();\r\n    const updatedOffers = offers.filter(offer => offer.id !== id);\r\n    \r\n    // Update cache and localStorage\r\n    cachedOffers = updatedOffers;\r\n    localStorage.setItem('offers', JSON.stringify(updatedOffers));\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('Error deleting offer:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Search offers - doesn't modify any state\r\nexport const searchOffers = (query) => {\r\n  if (!query || query.trim() === '') return [];\r\n  \r\n  const offers = getOffers();\r\n  const lowerQuery = query.toLowerCase();\r\n  \r\n  return offers.filter(offer => \r\n    offer.title.toLowerCase().includes(lowerQuery) ||\r\n    offer.destination.toLowerCase().includes(lowerQuery) ||\r\n    offer.description.toLowerCase().includes(lowerQuery) ||\r\n    (offer.categories && offer.categories.some(cat => \r\n      cat.toLowerCase().includes(lowerQuery)\r\n    ))\r\n  );\r\n};\r\n\r\n// Reset offers to defaults (for testing)\r\nexport const resetOffers = () => {\r\n  cachedOffers = [...defaultOffers];\r\n  localStorage.setItem('offers', JSON.stringify(defaultOffers));\r\n  return [...defaultOffers];\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}