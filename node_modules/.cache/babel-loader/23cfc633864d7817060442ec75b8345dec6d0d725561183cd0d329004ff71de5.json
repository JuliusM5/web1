{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\context\\\\SubscriptionContext.jsx\",\n  _s2 = $RefreshSig$();\n// src/context/SubscriptionContext.jsx\n\nimport React, { createContext, useState, useEffect, useContext } from 'react';\nimport subscriptionService from '../services/SubscriptionService';\nimport AuthContext from './AuthContext';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SubscriptionContext = /*#__PURE__*/createContext(null);\nexport const SubscriptionProvider = ({\n  children\n}) => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [subscription, setSubscription] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [plans, setPlans] = useState([]);\n  const [freeAlertsRemaining, setFreeAlertsRemaining] = useState(3);\n  const {\n    user,\n    isAuthenticated\n  } = useContext(AuthContext);\n\n  // Load subscription status when user is authenticated\n  useEffect(() => {\n    const loadSubscription = async () => {\n      if (!isAuthenticated) {\n        setSubscription(null);\n        setLoading(false);\n        return;\n      }\n      setLoading(true);\n      try {\n        // Get current subscription\n        const status = await subscriptionService.getSubscriptionStatus();\n        setSubscription(status);\n\n        // Get remaining free alerts\n        if (!status.isActive) {\n          const remainingAlerts = await subscriptionService.getRemainingFreeAlerts();\n          setFreeAlertsRemaining(remainingAlerts);\n        }\n\n        // Get available plans\n        setPlans(subscriptionService.getPlans());\n      } catch (error) {\n        console.error('Error loading subscription:', error);\n        setError('Failed to load subscription details');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadSubscription();\n  }, [isAuthenticated, user]);\n\n  // Subscribe to a plan\n  const subscribe = async (planId, paymentMethod) => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await subscriptionService.subscribe(planId, paymentMethod);\n      setSubscription(result);\n      return {\n        success: true,\n        subscription: result\n      };\n    } catch (error) {\n      console.error('Subscription error:', error);\n      setError(error.message || 'Failed to create subscription');\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Cancel subscription\n  const cancelSubscription = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await subscriptionService.cancelSubscription();\n      setSubscription(prev => ({\n        ...prev,\n        isActive: false\n      }));\n      return {\n        success: true,\n        result\n      };\n    } catch (error) {\n      console.error('Cancellation error:', error);\n      setError(error.message || 'Failed to cancel subscription');\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Use a free alert\n  const useFreeAlert = async () => {\n    _s();\n    if (subscription !== null && subscription !== void 0 && subscription.isActive) {\n      return {\n        success: true,\n        unlimited: true\n      };\n    }\n    if (freeAlertsRemaining <= 0) {\n      return {\n        success: false,\n        reason: 'no-alerts-remaining'\n      };\n    }\n    try {\n      const result = await subscriptionService.useFreeAlert();\n      setFreeAlertsRemaining(prev => Math.max(0, prev - 1));\n      return {\n        success: true,\n        remaining: freeAlertsRemaining - 1\n      };\n    } catch (error) {\n      console.error('Error using free alert:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  };\n\n  // Check if a user can create an alert (either subscribed or has free alerts)\n  _s(useFreeAlert, \"alJklMp7pU6BvCv6gJqmuLzwV2o=\", false, function () {\n    return [subscriptionService.useFreeAlert];\n  });\n  const canCreateAlert = () => {\n    if (subscription !== null && subscription !== void 0 && subscription.isActive) {\n      return true;\n    }\n    return freeAlertsRemaining > 0;\n  };\n  return /*#__PURE__*/_jsxDEV(SubscriptionContext.Provider, {\n    value: {\n      subscription,\n      loading,\n      error,\n      plans,\n      freeAlertsRemaining,\n      subscribe,\n      cancelSubscription,\n      useFreeAlert,\n      canCreateAlert,\n      isSubscribed: (subscription === null || subscription === void 0 ? void 0 : subscription.isActive) || false\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n_s2(SubscriptionProvider, \"GDy5yh8QX8vX6HzlZiL1c2GrhzU=\");\n_c = SubscriptionProvider;\nexport default SubscriptionContext;\nvar _c;\n$RefreshReg$(_c, \"SubscriptionProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","subscriptionService","AuthContext","jsxDEV","_jsxDEV","SubscriptionContext","SubscriptionProvider","children","_s2","_s","$RefreshSig$","subscription","setSubscription","loading","setLoading","error","setError","plans","setPlans","freeAlertsRemaining","setFreeAlertsRemaining","user","isAuthenticated","loadSubscription","status","getSubscriptionStatus","isActive","remainingAlerts","getRemainingFreeAlerts","getPlans","console","subscribe","planId","paymentMethod","result","success","message","cancelSubscription","prev","useFreeAlert","unlimited","reason","Math","max","remaining","canCreateAlert","Provider","value","isSubscribed","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/context/SubscriptionContext.jsx"],"sourcesContent":["// src/context/SubscriptionContext.jsx\r\n\r\nimport React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport subscriptionService from '../services/SubscriptionService';\r\nimport AuthContext from './AuthContext';\r\n\r\n// Create context\r\nexport const SubscriptionContext = createContext(null);\r\n\r\nexport const SubscriptionProvider = ({ children }) => {\r\n  const [subscription, setSubscription] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [plans, setPlans] = useState([]);\r\n  const [freeAlertsRemaining, setFreeAlertsRemaining] = useState(3);\r\n  \r\n  const { user, isAuthenticated } = useContext(AuthContext);\r\n  \r\n  // Load subscription status when user is authenticated\r\n  useEffect(() => {\r\n    const loadSubscription = async () => {\r\n      if (!isAuthenticated) {\r\n        setSubscription(null);\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      setLoading(true);\r\n      \r\n      try {\r\n        // Get current subscription\r\n        const status = await subscriptionService.getSubscriptionStatus();\r\n        setSubscription(status);\r\n        \r\n        // Get remaining free alerts\r\n        if (!status.isActive) {\r\n          const remainingAlerts = await subscriptionService.getRemainingFreeAlerts();\r\n          setFreeAlertsRemaining(remainingAlerts);\r\n        }\r\n        \r\n        // Get available plans\r\n        setPlans(subscriptionService.getPlans());\r\n      } catch (error) {\r\n        console.error('Error loading subscription:', error);\r\n        setError('Failed to load subscription details');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadSubscription();\r\n  }, [isAuthenticated, user]);\r\n  \r\n  // Subscribe to a plan\r\n  const subscribe = async (planId, paymentMethod) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const result = await subscriptionService.subscribe(planId, paymentMethod);\r\n      setSubscription(result);\r\n      return { success: true, subscription: result };\r\n    } catch (error) {\r\n      console.error('Subscription error:', error);\r\n      setError(error.message || 'Failed to create subscription');\r\n      return { success: false, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Cancel subscription\r\n  const cancelSubscription = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const result = await subscriptionService.cancelSubscription();\r\n      setSubscription(prev => ({ ...prev, isActive: false }));\r\n      return { success: true, result };\r\n    } catch (error) {\r\n      console.error('Cancellation error:', error);\r\n      setError(error.message || 'Failed to cancel subscription');\r\n      return { success: false, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Use a free alert\r\n  const useFreeAlert = async () => {\r\n    if (subscription?.isActive) {\r\n      return { success: true, unlimited: true };\r\n    }\r\n    \r\n    if (freeAlertsRemaining <= 0) {\r\n      return { success: false, reason: 'no-alerts-remaining' };\r\n    }\r\n    \r\n    try {\r\n      const result = await subscriptionService.useFreeAlert();\r\n      setFreeAlertsRemaining(prev => Math.max(0, prev - 1));\r\n      return { success: true, remaining: freeAlertsRemaining - 1 };\r\n    } catch (error) {\r\n      console.error('Error using free alert:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  };\r\n  \r\n  // Check if a user can create an alert (either subscribed or has free alerts)\r\n  const canCreateAlert = () => {\r\n    if (subscription?.isActive) {\r\n      return true;\r\n    }\r\n    \r\n    return freeAlertsRemaining > 0;\r\n  };\r\n  \r\n  return (\r\n    <SubscriptionContext.Provider\r\n      value={{\r\n        subscription,\r\n        loading,\r\n        error,\r\n        plans,\r\n        freeAlertsRemaining,\r\n        subscribe,\r\n        cancelSubscription,\r\n        useFreeAlert,\r\n        canCreateAlert,\r\n        isSubscribed: subscription?.isActive || false\r\n      }}\r\n    >\r\n      {children}\r\n    </SubscriptionContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SubscriptionContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}