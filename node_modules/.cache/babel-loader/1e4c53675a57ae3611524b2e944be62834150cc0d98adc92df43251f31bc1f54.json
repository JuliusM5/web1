{"ast":null,"code":"// src/services/platforms/IOSSubscriptionHandler.js\n\nimport { Platform } from 'react-native';\nimport * as StoreKit from 'react-native-iap';\n\n/**\r\n * iOS specific subscription handling using StoreKit\r\n */\nexport class IOSSubscriptionHandler {\n  constructor() {\n    this.products = [];\n    this.isInitialized = false;\n    this.productIds = ['com.yourapp.monthly_premium', 'com.yourapp.yearly_premium'];\n  }\n\n  /**\r\n   * Initialize StoreKit\r\n   */\n  async initialize() {\n    if (Platform.OS !== 'ios') return;\n    try {\n      await StoreKit.initConnection();\n      this.isInitialized = true;\n\n      // Pre-load product information\n      await this.getProducts();\n\n      // Set up purchase listener\n      this.purchaseUpdateSubscription = StoreKit.purchaseUpdatedListener(purchase => {\n        // Handle purchase updates in real-time\n        const receipt = purchase.transactionReceipt;\n        if (receipt) {\n          // Finish the transaction after saving the receipt\n          StoreKit.finishTransaction(purchase);\n        }\n      });\n      this.purchaseErrorSubscription = StoreKit.purchaseErrorListener(error => {\n        console.error('Purchase error:', error);\n      });\n      return true;\n    } catch (error) {\n      console.error('StoreKit initialization failed:', error);\n      return false;\n    }\n  }\n\n  /**\r\n   * Get available subscription products from App Store\r\n   */\n  async getProducts() {\n    if (!this.isInitialized) await this.initialize();\n    try {\n      this.products = await StoreKit.getSubscriptions(this.productIds);\n      return this.products;\n    } catch (error) {\n      console.error('Failed to get products:', error);\n      return [];\n    }\n  }\n\n  /**\r\n   * Purchase a subscription\r\n   */\n  async purchaseSubscription(productId) {\n    if (!this.isInitialized) await this.initialize();\n    try {\n      // Request the purchase\n      const purchase = await StoreKit.requestSubscription(productId);\n      if (purchase && purchase.transactionReceipt) {\n        return {\n          success: true,\n          receipt: purchase.transactionReceipt,\n          productId\n        };\n      }\n      return {\n        success: false,\n        error: 'Purchase did not complete'\n      };\n    } catch (error) {\n      console.error('Purchase failed:', error);\n      return {\n        success: false,\n        error: error.message || 'Purchase failed'\n      };\n    }\n  }\n\n  /**\r\n   * Verify receipt locally (basic checks)\r\n   * For true validation, use the server verification\r\n   */\n  async verifyReceipt(receipt, productId) {\n    if (!this.isInitialized) await this.initialize();\n    try {\n      // Check if receipt is still valid (basic validation)\n      // This uses StoreKit's validation capabilities\n      const validationResult = await StoreKit.validateReceiptIos({\n        receiptBody: receipt\n      });\n      if (validationResult && validationResult.isValid) {\n        // Find the matching subscription in the validation result\n        const subscription = validationResult.purchases.find(p => p.productId === productId && new Date(p.expirationDate) > new Date());\n        if (subscription) {\n          return {\n            isValid: true,\n            expiresAt: subscription.expirationDate\n          };\n        }\n      }\n      return {\n        isValid: false\n      };\n    } catch (error) {\n      console.error('Receipt verification failed:', error);\n      return {\n        isValid: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\r\n   * Restore previous purchases\r\n   */\n  async restorePurchases() {\n    if (!this.isInitialized) await this.initialize();\n    try {\n      // Get available purchases from iOS\n      const availablePurchases = await StoreKit.getAvailablePurchases();\n      if (availablePurchases && availablePurchases.length > 0) {\n        // Filter for valid subscriptions\n        const subscriptions = await Promise.all(availablePurchases.map(async purchase => {\n          const verification = await this.verifyReceipt(purchase.transactionReceipt, purchase.productId);\n          return {\n            productId: purchase.productId,\n            receipt: purchase.transactionReceipt,\n            isActive: verification.isValid,\n            expiresAt: verification.expiresAt\n          };\n        }));\n        return {\n          success: true,\n          purchases: subscriptions\n        };\n      }\n      return {\n        success: true,\n        purchases: []\n      };\n    } catch (error) {\n      console.error('Restore failed:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  /**\r\n   * Cleanup method to remove listeners\r\n   */\n  cleanup() {\n    if (this.purchaseUpdateSubscription) {\n      this.purchaseUpdateSubscription.remove();\n    }\n    if (this.purchaseErrorSubscription) {\n      this.purchaseErrorSubscription.remove();\n    }\n\n    // End StoreKit connection\n    StoreKit.endConnection();\n  }\n}","map":{"version":3,"names":["Platform","StoreKit","IOSSubscriptionHandler","constructor","products","isInitialized","productIds","initialize","OS","initConnection","getProducts","purchaseUpdateSubscription","purchaseUpdatedListener","purchase","receipt","transactionReceipt","finishTransaction","purchaseErrorSubscription","purchaseErrorListener","error","console","getSubscriptions","purchaseSubscription","productId","requestSubscription","success","message","verifyReceipt","validationResult","validateReceiptIos","receiptBody","isValid","subscription","purchases","find","p","Date","expirationDate","expiresAt","restorePurchases","availablePurchases","getAvailablePurchases","length","subscriptions","Promise","all","map","verification","isActive","cleanup","remove","endConnection"],"sources":["C:/Users/juliu/Desktop/web/src/services/platforms/IOSSubscriptionHandler.js"],"sourcesContent":["// src/services/platforms/IOSSubscriptionHandler.js\r\n\r\nimport { Platform } from 'react-native';\r\nimport * as StoreKit from 'react-native-iap';\r\n\r\n/**\r\n * iOS specific subscription handling using StoreKit\r\n */\r\nexport class IOSSubscriptionHandler {\r\n  constructor() {\r\n    this.products = [];\r\n    this.isInitialized = false;\r\n    this.productIds = [\r\n      'com.yourapp.monthly_premium',\r\n      'com.yourapp.yearly_premium'\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Initialize StoreKit\r\n   */\r\n  async initialize() {\r\n    if (Platform.OS !== 'ios') return;\r\n    \r\n    try {\r\n      await StoreKit.initConnection();\r\n      this.isInitialized = true;\r\n      \r\n      // Pre-load product information\r\n      await this.getProducts();\r\n      \r\n      // Set up purchase listener\r\n      this.purchaseUpdateSubscription = StoreKit.purchaseUpdatedListener(\r\n        (purchase) => {\r\n          // Handle purchase updates in real-time\r\n          const receipt = purchase.transactionReceipt;\r\n          if (receipt) {\r\n            // Finish the transaction after saving the receipt\r\n            StoreKit.finishTransaction(purchase);\r\n          }\r\n        }\r\n      );\r\n      \r\n      this.purchaseErrorSubscription = StoreKit.purchaseErrorListener(\r\n        (error) => {\r\n          console.error('Purchase error:', error);\r\n        }\r\n      );\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('StoreKit initialization failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get available subscription products from App Store\r\n   */\r\n  async getProducts() {\r\n    if (!this.isInitialized) await this.initialize();\r\n    \r\n    try {\r\n      this.products = await StoreKit.getSubscriptions(this.productIds);\r\n      return this.products;\r\n    } catch (error) {\r\n      console.error('Failed to get products:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Purchase a subscription\r\n   */\r\n  async purchaseSubscription(productId) {\r\n    if (!this.isInitialized) await this.initialize();\r\n    \r\n    try {\r\n      // Request the purchase\r\n      const purchase = await StoreKit.requestSubscription(productId);\r\n      \r\n      if (purchase && purchase.transactionReceipt) {\r\n        return {\r\n          success: true,\r\n          receipt: purchase.transactionReceipt,\r\n          productId\r\n        };\r\n      }\r\n      \r\n      return { success: false, error: 'Purchase did not complete' };\r\n    } catch (error) {\r\n      console.error('Purchase failed:', error);\r\n      return { success: false, error: error.message || 'Purchase failed' };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Verify receipt locally (basic checks)\r\n   * For true validation, use the server verification\r\n   */\r\n  async verifyReceipt(receipt, productId) {\r\n    if (!this.isInitialized) await this.initialize();\r\n    \r\n    try {\r\n      // Check if receipt is still valid (basic validation)\r\n      // This uses StoreKit's validation capabilities\r\n      const validationResult = await StoreKit.validateReceiptIos({\r\n        receiptBody: receipt,\r\n      });\r\n      \r\n      if (validationResult && validationResult.isValid) {\r\n        // Find the matching subscription in the validation result\r\n        const subscription = validationResult.purchases.find(\r\n          p => p.productId === productId && new Date(p.expirationDate) > new Date()\r\n        );\r\n        \r\n        if (subscription) {\r\n          return {\r\n            isValid: true,\r\n            expiresAt: subscription.expirationDate\r\n          };\r\n        }\r\n      }\r\n      \r\n      return { isValid: false };\r\n    } catch (error) {\r\n      console.error('Receipt verification failed:', error);\r\n      return { isValid: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restore previous purchases\r\n   */\r\n  async restorePurchases() {\r\n    if (!this.isInitialized) await this.initialize();\r\n    \r\n    try {\r\n      // Get available purchases from iOS\r\n      const availablePurchases = await StoreKit.getAvailablePurchases();\r\n      \r\n      if (availablePurchases && availablePurchases.length > 0) {\r\n        // Filter for valid subscriptions\r\n        const subscriptions = await Promise.all(\r\n          availablePurchases.map(async (purchase) => {\r\n            const verification = await this.verifyReceipt(\r\n              purchase.transactionReceipt,\r\n              purchase.productId\r\n            );\r\n            \r\n            return {\r\n              productId: purchase.productId,\r\n              receipt: purchase.transactionReceipt,\r\n              isActive: verification.isValid,\r\n              expiresAt: verification.expiresAt\r\n            };\r\n          })\r\n        );\r\n        \r\n        return {\r\n          success: true,\r\n          purchases: subscriptions\r\n        };\r\n      }\r\n      \r\n      return { success: true, purchases: [] };\r\n    } catch (error) {\r\n      console.error('Restore failed:', error);\r\n      return { success: false, error: error.message };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cleanup method to remove listeners\r\n   */\r\n  cleanup() {\r\n    if (this.purchaseUpdateSubscription) {\r\n      this.purchaseUpdateSubscription.remove();\r\n    }\r\n    \r\n    if (this.purchaseErrorSubscription) {\r\n      this.purchaseErrorSubscription.remove();\r\n    }\r\n    \r\n    // End StoreKit connection\r\n    StoreKit.endConnection();\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}