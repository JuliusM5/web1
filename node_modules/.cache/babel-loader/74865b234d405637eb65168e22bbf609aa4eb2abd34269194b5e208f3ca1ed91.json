{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\context\\\\MobileSubscriptionContext.jsx\",\n  _s = $RefreshSig$();\n// src/context/MobileSubscriptionContext.jsx\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\nimport { isMobileDevice, isIOS, isAndroid } from '../utils/deviceDetection';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MobileSubscriptionContext = /*#__PURE__*/createContext(null);\n\n// Provider component\nexport const MobileSubscriptionProvider = ({\n  children\n}) => {\n  _s();\n  const [subscription, setSubscription] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Detect device platform\n  const isMobile = isMobileDevice();\n  const platform = isIOS() ? 'ios' : isAndroid() ? 'android' : 'web';\n\n  // Function to check mobile subscription status\n  const checkMobileSubscription = useCallback(() => {\n    setLoading(true);\n    try {\n      // Check localStorage for any mobile subscription code\n      const mobileCode = localStorage.getItem('mobileSubscriptionCode');\n      if (mobileCode) {\n        // In a real app, this would verify the code with a server\n        setSubscription({\n          status: 'active',\n          platform,\n          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n          // 30 days from now\n          activatedAt: localStorage.getItem('mobileSubscriptionActivated') || new Date().toISOString()\n        });\n      } else {\n        setSubscription(null);\n      }\n      setError(null);\n    } catch (err) {\n      console.error('Error checking mobile subscription:', err);\n      setError('Failed to check mobile subscription status');\n      setSubscription(null);\n    } finally {\n      setLoading(false);\n    }\n  }, [platform]);\n\n  // Check for mobile subscription on mount\n  useEffect(() => {\n    if (isMobile) {\n      checkMobileSubscription();\n    } else {\n      // Not a mobile device, still check for activation codes\n      checkMobileSubscription();\n      setLoading(false);\n    }\n  }, [isMobile, checkMobileSubscription]);\n\n  // Refresh subscription data - can be called from outside to force a refresh\n  const refreshSubscription = useCallback(() => {\n    checkMobileSubscription();\n  }, [checkMobileSubscription]);\n\n  // Activate subscription\n  const activateSubscription = async code => {\n    setLoading(true);\n    try {\n      // In a real app, this would verify the code with a server\n      localStorage.setItem('mobileSubscriptionCode', code);\n      localStorage.setItem('mobileSubscriptionActivated', new Date().toISOString());\n      const newSubscription = {\n        status: 'active',\n        platform,\n        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),\n        // 30 days from now\n        activatedAt: new Date().toISOString()\n      };\n      setSubscription(newSubscription);\n      setError(null);\n      setLoading(false);\n      return newSubscription;\n    } catch (err) {\n      console.error('Error activating mobile subscription:', err);\n      setError('Failed to activate mobile subscription');\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  // Deactivate subscription\n  const deactivateSubscription = async () => {\n    setLoading(true);\n    try {\n      localStorage.removeItem('mobileSubscriptionCode');\n      localStorage.removeItem('mobileSubscriptionActivated');\n      setSubscription(null);\n      setError(null);\n      setLoading(false);\n      return true;\n    } catch (err) {\n      console.error('Error deactivating mobile subscription:', err);\n      setError('Failed to deactivate mobile subscription');\n      setLoading(false);\n      throw err;\n    }\n  };\n\n  // Context value\n  const value = {\n    subscription,\n    loading,\n    error,\n    activateSubscription,\n    deactivateSubscription,\n    refreshSubscription,\n    // Add the refresh function\n    hasActiveSubscription: Boolean(subscription && subscription.status === 'active'),\n    platform\n  };\n  return /*#__PURE__*/_jsxDEV(MobileSubscriptionContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n_s(MobileSubscriptionProvider, \"5Upv5pdAeBczQeDU4ZX3RU8HH9c=\");\n_c = MobileSubscriptionProvider;\nexport default MobileSubscriptionContext;\nvar _c;\n$RefreshReg$(_c, \"MobileSubscriptionProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","useCallback","isMobileDevice","isIOS","isAndroid","jsxDEV","_jsxDEV","MobileSubscriptionContext","MobileSubscriptionProvider","children","_s","subscription","setSubscription","loading","setLoading","error","setError","isMobile","platform","checkMobileSubscription","mobileCode","localStorage","getItem","status","expiresAt","Date","now","toISOString","activatedAt","err","console","refreshSubscription","activateSubscription","code","setItem","newSubscription","deactivateSubscription","removeItem","value","hasActiveSubscription","Boolean","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/context/MobileSubscriptionContext.jsx"],"sourcesContent":["// src/context/MobileSubscriptionContext.jsx\r\nimport React, { createContext, useState, useEffect, useCallback } from 'react';\r\nimport { isMobileDevice, isIOS, isAndroid } from '../utils/deviceDetection';\r\n\r\n// Create context\r\nexport const MobileSubscriptionContext = createContext(null);\r\n\r\n// Provider component\r\nexport const MobileSubscriptionProvider = ({ children }) => {\r\n  const [subscription, setSubscription] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Detect device platform\r\n  const isMobile = isMobileDevice();\r\n  const platform = isIOS() ? 'ios' : (isAndroid() ? 'android' : 'web');\r\n\r\n  // Function to check mobile subscription status\r\n  const checkMobileSubscription = useCallback(() => {\r\n    setLoading(true);\r\n    try {\r\n      // Check localStorage for any mobile subscription code\r\n      const mobileCode = localStorage.getItem('mobileSubscriptionCode');\r\n      \r\n      if (mobileCode) {\r\n        // In a real app, this would verify the code with a server\r\n        setSubscription({\r\n          status: 'active',\r\n          platform,\r\n          expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days from now\r\n          activatedAt: localStorage.getItem('mobileSubscriptionActivated') || new Date().toISOString()\r\n        });\r\n      } else {\r\n        setSubscription(null);\r\n      }\r\n      \r\n      setError(null);\r\n    } catch (err) {\r\n      console.error('Error checking mobile subscription:', err);\r\n      setError('Failed to check mobile subscription status');\r\n      setSubscription(null);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [platform]);\r\n\r\n  // Check for mobile subscription on mount\r\n  useEffect(() => {\r\n    if (isMobile) {\r\n      checkMobileSubscription();\r\n    } else {\r\n      // Not a mobile device, still check for activation codes\r\n      checkMobileSubscription();\r\n      setLoading(false);\r\n    }\r\n  }, [isMobile, checkMobileSubscription]);\r\n\r\n  // Refresh subscription data - can be called from outside to force a refresh\r\n  const refreshSubscription = useCallback(() => {\r\n    checkMobileSubscription();\r\n  }, [checkMobileSubscription]);\r\n\r\n  // Activate subscription\r\n  const activateSubscription = async (code) => {\r\n    setLoading(true);\r\n    try {\r\n      // In a real app, this would verify the code with a server\r\n      localStorage.setItem('mobileSubscriptionCode', code);\r\n      localStorage.setItem('mobileSubscriptionActivated', new Date().toISOString());\r\n      \r\n      const newSubscription = {\r\n        status: 'active',\r\n        platform,\r\n        expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(), // 30 days from now\r\n        activatedAt: new Date().toISOString()\r\n      };\r\n      \r\n      setSubscription(newSubscription);\r\n      setError(null);\r\n      setLoading(false);\r\n      return newSubscription;\r\n    } catch (err) {\r\n      console.error('Error activating mobile subscription:', err);\r\n      setError('Failed to activate mobile subscription');\r\n      setLoading(false);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Deactivate subscription\r\n  const deactivateSubscription = async () => {\r\n    setLoading(true);\r\n    try {\r\n      localStorage.removeItem('mobileSubscriptionCode');\r\n      localStorage.removeItem('mobileSubscriptionActivated');\r\n      \r\n      setSubscription(null);\r\n      setError(null);\r\n      setLoading(false);\r\n      return true;\r\n    } catch (err) {\r\n      console.error('Error deactivating mobile subscription:', err);\r\n      setError('Failed to deactivate mobile subscription');\r\n      setLoading(false);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    subscription,\r\n    loading,\r\n    error,\r\n    activateSubscription,\r\n    deactivateSubscription,\r\n    refreshSubscription, // Add the refresh function\r\n    hasActiveSubscription: Boolean(subscription && subscription.status === 'active'),\r\n    platform\r\n  };\r\n\r\n  return (\r\n    <MobileSubscriptionContext.Provider value={value}>\r\n      {children}\r\n    </MobileSubscriptionContext.Provider>\r\n  );\r\n};\r\n\r\nexport default MobileSubscriptionContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}