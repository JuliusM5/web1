{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\n\n// Create the auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Mock user data for demo purposes\nconst mockUsers = [{\n  id: 1,\n  username: 'admin',\n  password: 'admin123',\n  isAdmin: true\n}, {\n  id: 2,\n  username: 'user',\n  password: 'user123',\n  isAdmin: false\n}];\n\n// AuthProvider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // Get user from localStorage or set to null\n  const [currentUser, setCurrentUser] = useState(null);\n\n  // Read from localStorage on initial load\n  useEffect(() => {\n    const savedUser = localStorage.getItem('currentUser');\n    if (savedUser) {\n      try {\n        setCurrentUser(JSON.parse(savedUser));\n      } catch (e) {\n        console.error('Error parsing saved user', e);\n        localStorage.removeItem('currentUser');\n      }\n    }\n  }, []);\n\n  // Login function\n  const login = (username, password) => {\n    // Find user with matching credentials\n    const user = mockUsers.find(u => u.username === username && u.password === password);\n    if (user) {\n      // Create a user object without the password for security\n      const userWithoutPassword = {\n        id: user.id,\n        username: user.username,\n        isAdmin: user.isAdmin\n      };\n\n      // Set the current user\n      setCurrentUser(userWithoutPassword);\n\n      // Save to localStorage for persistence\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\n      return true;\n    }\n    return false;\n  };\n\n  // Logout function\n  const logout = () => {\n    setCurrentUser(null);\n    localStorage.removeItem('currentUser');\n  };\n\n  // Check if user is admin\n  const isAdmin = () => {\n    return (currentUser === null || currentUser === void 0 ? void 0 : currentUser.isAdmin) === true;\n  };\n\n  // Create the context value\n  const value = {\n    currentUser,\n    login,\n    logout,\n    isAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the auth context\n_s(AuthProvider, \"Y5F2pQQk2LZA5WRO2+bvRm5iRuo=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsxDEV","_jsxDEV","AuthContext","mockUsers","id","username","password","isAdmin","AuthProvider","children","_s","currentUser","setCurrentUser","savedUser","localStorage","getItem","JSON","parse","e","console","error","removeItem","login","user","find","u","userWithoutPassword","setItem","stringify","logout","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\n\r\n// Create the auth context\r\nconst AuthContext = createContext();\r\n\r\n// Mock user data for demo purposes\r\nconst mockUsers = [\r\n  { id: 1, username: 'admin', password: 'admin123', isAdmin: true },\r\n  { id: 2, username: 'user', password: 'user123', isAdmin: false }\r\n];\r\n\r\n// AuthProvider component\r\nexport const AuthProvider = ({ children }) => {\r\n  // Get user from localStorage or set to null\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  \r\n  // Read from localStorage on initial load\r\n  useEffect(() => {\r\n    const savedUser = localStorage.getItem('currentUser');\r\n    if (savedUser) {\r\n      try {\r\n        setCurrentUser(JSON.parse(savedUser));\r\n      } catch (e) {\r\n        console.error('Error parsing saved user', e);\r\n        localStorage.removeItem('currentUser');\r\n      }\r\n    }\r\n  }, []);\r\n  \r\n  // Login function\r\n  const login = (username, password) => {\r\n    // Find user with matching credentials\r\n    const user = mockUsers.find(u => \r\n      u.username === username && u.password === password\r\n    );\r\n    \r\n    if (user) {\r\n      // Create a user object without the password for security\r\n      const userWithoutPassword = { \r\n        id: user.id, \r\n        username: user.username, \r\n        isAdmin: user.isAdmin \r\n      };\r\n      \r\n      // Set the current user\r\n      setCurrentUser(userWithoutPassword);\r\n      \r\n      // Save to localStorage for persistence\r\n      localStorage.setItem('currentUser', JSON.stringify(userWithoutPassword));\r\n      \r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  };\r\n  \r\n  // Logout function\r\n  const logout = () => {\r\n    setCurrentUser(null);\r\n    localStorage.removeItem('currentUser');\r\n  };\r\n  \r\n  // Check if user is admin\r\n  const isAdmin = () => {\r\n    return currentUser?.isAdmin === true;\r\n  };\r\n  \r\n  // Create the context value\r\n  const value = {\r\n    currentUser,\r\n    login,\r\n    logout,\r\n    isAdmin\r\n  };\r\n  \r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n\r\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}