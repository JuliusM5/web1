{"ast":null,"code":"// src/utils/errorMonitoring.js\n// npm install @sentry/react @sentry/tracing\nimport * as Sentry from '@sentry/react';\nimport { BrowserTracing } from '@sentry/tracing';\nconst initErrorMonitoring = () => {\n  // Only initialize in production\n  if (process.env.NODE_ENV === 'production') {\n    Sentry.init({\n      dsn: process.env.REACT_APP_SENTRY_DSN,\n      integrations: [new BrowserTracing()],\n      // Performance monitoring sample rate\n      tracesSampleRate: 0.1,\n      // Set to false in production\n      debug: false,\n      environment: process.env.REACT_APP_ENVIRONMENT || 'production',\n      // Only catch errors in production\n      enabled: process.env.NODE_ENV === 'production',\n      // Capture user information for better error tracking\n      beforeSend(event) {\n        // Remove sensitive data from error reports\n        if (event.request && event.request.headers) {\n          delete event.request.headers.Authorization;\n          delete event.request.headers.Cookie;\n        }\n        return event;\n      }\n    });\n  }\n};\nexport const captureError = (error, extraInfo = {}) => {\n  console.error('Error captured:', error);\n  if (process.env.NODE_ENV === 'production') {\n    Sentry.captureException(error, {\n      extra: extraInfo\n    });\n  }\n};\nexport const setErrorUser = user => {\n  if (process.env.NODE_ENV === 'production' && user) {\n    // Don't send sensitive information, just minimal tracking details\n    Sentry.setUser({\n      id: user.id,\n      // Or other unique identifier\n      subscription: user.hasSubscription ? 'active' : 'inactive' // Only track subscription state, not details\n    });\n  }\n};\nexport const clearErrorUser = () => {\n  if (process.env.NODE_ENV === 'production') {\n    Sentry.configureScope(scope => scope.setUser(null));\n  }\n};\nexport default initErrorMonitoring;","map":{"version":3,"names":["Sentry","BrowserTracing","initErrorMonitoring","process","env","NODE_ENV","init","dsn","REACT_APP_SENTRY_DSN","integrations","tracesSampleRate","debug","environment","REACT_APP_ENVIRONMENT","enabled","beforeSend","event","request","headers","Authorization","Cookie","captureError","error","extraInfo","console","captureException","extra","setErrorUser","user","setUser","id","subscription","hasSubscription","clearErrorUser","configureScope","scope"],"sources":["C:/Users/juliu/Desktop/web/src/utils/errorMonitoring.js"],"sourcesContent":["// src/utils/errorMonitoring.js\r\n// npm install @sentry/react @sentry/tracing\r\nimport * as Sentry from '@sentry/react';\r\nimport { BrowserTracing } from '@sentry/tracing';\r\n\r\nconst initErrorMonitoring = () => {\r\n  // Only initialize in production\r\n  if (process.env.NODE_ENV === 'production') {\r\n    Sentry.init({\r\n      dsn: process.env.REACT_APP_SENTRY_DSN,\r\n      integrations: [new BrowserTracing()],\r\n      // Performance monitoring sample rate\r\n      tracesSampleRate: 0.1,\r\n      // Set to false in production\r\n      debug: false,\r\n      environment: process.env.REACT_APP_ENVIRONMENT || 'production',\r\n      // Only catch errors in production\r\n      enabled: process.env.NODE_ENV === 'production',\r\n      // Capture user information for better error tracking\r\n      beforeSend(event) {\r\n        // Remove sensitive data from error reports\r\n        if (event.request && event.request.headers) {\r\n          delete event.request.headers.Authorization;\r\n          delete event.request.headers.Cookie;\r\n        }\r\n        return event;\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport const captureError = (error, extraInfo = {}) => {\r\n  console.error('Error captured:', error);\r\n  if (process.env.NODE_ENV === 'production') {\r\n    Sentry.captureException(error, {\r\n      extra: extraInfo\r\n    });\r\n  }\r\n};\r\n\r\nexport const setErrorUser = (user) => {\r\n  if (process.env.NODE_ENV === 'production' && user) {\r\n    // Don't send sensitive information, just minimal tracking details\r\n    Sentry.setUser({\r\n      id: user.id, // Or other unique identifier\r\n      subscription: user.hasSubscription ? 'active' : 'inactive' // Only track subscription state, not details\r\n    });\r\n  }\r\n};\r\n\r\nexport const clearErrorUser = () => {\r\n  if (process.env.NODE_ENV === 'production') {\r\n    Sentry.configureScope(scope => scope.setUser(null));\r\n  }\r\n};\r\n\r\nexport default initErrorMonitoring;"],"mappings":"AAAA;AACA;AACA,OAAO,KAAKA,MAAM,MAAM,eAAe;AACvC,SAASC,cAAc,QAAQ,iBAAiB;AAEhD,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAChC;EACA,IAAIC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzCL,MAAM,CAACM,IAAI,CAAC;MACVC,GAAG,EAAEJ,OAAO,CAACC,GAAG,CAACI,oBAAoB;MACrCC,YAAY,EAAE,CAAC,IAAIR,cAAc,CAAC,CAAC,CAAC;MACpC;MACAS,gBAAgB,EAAE,GAAG;MACrB;MACAC,KAAK,EAAE,KAAK;MACZC,WAAW,EAAET,OAAO,CAACC,GAAG,CAACS,qBAAqB,IAAI,YAAY;MAC9D;MACAC,OAAO,EAAEX,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY;MAC9C;MACAU,UAAUA,CAACC,KAAK,EAAE;QAChB;QACA,IAAIA,KAAK,CAACC,OAAO,IAAID,KAAK,CAACC,OAAO,CAACC,OAAO,EAAE;UAC1C,OAAOF,KAAK,CAACC,OAAO,CAACC,OAAO,CAACC,aAAa;UAC1C,OAAOH,KAAK,CAACC,OAAO,CAACC,OAAO,CAACE,MAAM;QACrC;QACA,OAAOJ,KAAK;MACd;IACF,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMK,YAAY,GAAGA,CAACC,KAAK,EAAEC,SAAS,GAAG,CAAC,CAAC,KAAK;EACrDC,OAAO,CAACF,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;EACvC,IAAInB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzCL,MAAM,CAACyB,gBAAgB,CAACH,KAAK,EAAE;MAC7BI,KAAK,EAAEH;IACT,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMI,YAAY,GAAIC,IAAI,IAAK;EACpC,IAAIzB,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,IAAIuB,IAAI,EAAE;IACjD;IACA5B,MAAM,CAAC6B,OAAO,CAAC;MACbC,EAAE,EAAEF,IAAI,CAACE,EAAE;MAAE;MACbC,YAAY,EAAEH,IAAI,CAACI,eAAe,GAAG,QAAQ,GAAG,UAAU,CAAC;IAC7D,CAAC,CAAC;EACJ;AACF,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAClC,IAAI9B,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,YAAY,EAAE;IACzCL,MAAM,CAACkC,cAAc,CAACC,KAAK,IAAIA,KAAK,CAACN,OAAO,CAAC,IAAI,CAAC,CAAC;EACrD;AACF,CAAC;AAED,eAAe3B,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}