{"ast":null,"code":"// src/services/notificationService.js\n\nclass NotificationService {\n  constructor() {\n    this.permission = Notification.permission;\n    this.supportsPush = 'PushManager' in window;\n    this.vapidPublicKey = 'BLG_vES54CYlmkBgn7mWxE8QKakFL_9-_TrT_Z1hXXXXXXXXXXXXXXXXXXXXXXX'; // Replace with your public key\n  }\n\n  // Request permission to show notifications\n  async requestPermission() {\n    if (!('Notification' in window)) {\n      return {\n        granted: false,\n        reason: 'notifications-not-supported'\n      };\n    }\n    try {\n      const permission = await Notification.requestPermission();\n      this.permission = permission;\n      return {\n        granted: permission === 'granted'\n      };\n    } catch (error) {\n      console.error('Error requesting notification permission:', error);\n      return {\n        granted: false,\n        error\n      };\n    }\n  }\n\n  // Check if notifications are enabled\n  async checkPermission() {\n    if (!('Notification' in window)) {\n      return {\n        granted: false,\n        reason: 'notifications-not-supported'\n      };\n    }\n\n    // Update stored permission\n    this.permission = Notification.permission;\n    return {\n      granted: this.permission === 'granted',\n      permission: this.permission\n    };\n  }\n\n  // Subscribe to push notifications\n  async subscribeToPush() {\n    if (!this.supportsPush) {\n      return {\n        success: false,\n        reason: 'push-not-supported'\n      };\n    }\n    try {\n      // Request permission if not granted\n      if (this.permission !== 'granted') {\n        const permissionResult = await this.requestPermission();\n        if (!permissionResult.granted) {\n          return {\n            success: false,\n            reason: 'permission-denied'\n          };\n        }\n      }\n\n      // Get service worker registration\n      const registration = await navigator.serviceWorker.ready;\n\n      // Get existing subscription or create new one\n      let subscription = await registration.pushManager.getSubscription();\n      if (!subscription) {\n        // Convert VAPID public key to Uint8Array\n        const applicationServerKey = this.urlBase64ToUint8Array(this.vapidPublicKey);\n\n        // Create new subscription\n        subscription = await registration.pushManager.subscribe({\n          userVisibleOnly: true,\n          applicationServerKey\n        });\n      }\n\n      // Send subscription to server\n      const response = await fetch('/api/push/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          subscription,\n          deviceType: this.detectDeviceType()\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Failed to register push subscription with server');\n      }\n      return {\n        success: true,\n        subscription\n      };\n    } catch (error) {\n      console.error('Error subscribing to push notifications:', error);\n      return {\n        success: false,\n        error\n      };\n    }\n  }\n\n  // Unsubscribe from push notifications\n  async unsubscribeFromPush() {\n    try {\n      const registration = await navigator.serviceWorker.ready;\n      const subscription = await registration.pushManager.getSubscription();\n      if (!subscription) {\n        return {\n          success: true,\n          reason: 'not-subscribed'\n        };\n      }\n\n      // Unsubscribe locally\n      const result = await subscription.unsubscribe();\n\n      // Notify server\n      await fetch('/api/push/unregister', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          subscription\n        })\n      });\n      return {\n        success: result\n      };\n    } catch (error) {\n      console.error('Error unsubscribing from push notifications:', error);\n      return {\n        success: false,\n        error\n      };\n    }\n  }\n\n  // Show a local notification\n  showNotification(title, options = {}) {\n    if (this.permission !== 'granted') {\n      return Promise.reject(new Error('Notification permission not granted'));\n    }\n    return navigator.serviceWorker.ready.then(registration => {\n      return registration.showNotification(title, {\n        icon: '/logo192.png',\n        badge: '/badge.png',\n        vibrate: [100, 50, 100],\n        ...options\n      });\n    });\n  }\n\n  // Helper function to detect device type\n  detectDeviceType() {\n    const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n    if (/android/i.test(userAgent)) {\n      return 'android';\n    }\n    if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {\n      return 'ios';\n    }\n    return 'web';\n  }\n\n  // Helper to convert base64 to Uint8Array for VAPID key\n  urlBase64ToUint8Array(base64String) {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n  }\n}\nexport default new NotificationService();","map":{"version":3,"names":["NotificationService","constructor","permission","Notification","supportsPush","window","vapidPublicKey","requestPermission","granted","reason","error","console","checkPermission","subscribeToPush","success","permissionResult","registration","navigator","serviceWorker","ready","subscription","pushManager","getSubscription","applicationServerKey","urlBase64ToUint8Array","subscribe","userVisibleOnly","response","fetch","method","headers","body","JSON","stringify","deviceType","detectDeviceType","ok","Error","unsubscribeFromPush","result","unsubscribe","showNotification","title","options","Promise","reject","then","icon","badge","vibrate","userAgent","vendor","opera","test","MSStream","base64String","padding","repeat","length","base64","replace","rawData","atob","outputArray","Uint8Array","i","charCodeAt"],"sources":["C:/Users/juliu/Desktop/web/src/services/notificationService.js"],"sourcesContent":["// src/services/notificationService.js\r\n\r\nclass NotificationService {\r\n    constructor() {\r\n      this.permission = Notification.permission;\r\n      this.supportsPush = 'PushManager' in window;\r\n      this.vapidPublicKey = 'BLG_vES54CYlmkBgn7mWxE8QKakFL_9-_TrT_Z1hXXXXXXXXXXXXXXXXXXXXXXX'; // Replace with your public key\r\n    }\r\n    \r\n    // Request permission to show notifications\r\n    async requestPermission() {\r\n      if (!('Notification' in window)) {\r\n        return { granted: false, reason: 'notifications-not-supported' };\r\n      }\r\n      \r\n      try {\r\n        const permission = await Notification.requestPermission();\r\n        this.permission = permission;\r\n        return { granted: permission === 'granted' };\r\n      } catch (error) {\r\n        console.error('Error requesting notification permission:', error);\r\n        return { granted: false, error };\r\n      }\r\n    }\r\n    \r\n    // Check if notifications are enabled\r\n    async checkPermission() {\r\n      if (!('Notification' in window)) {\r\n        return { granted: false, reason: 'notifications-not-supported' };\r\n      }\r\n      \r\n      // Update stored permission\r\n      this.permission = Notification.permission;\r\n      \r\n      return { \r\n        granted: this.permission === 'granted',\r\n        permission: this.permission\r\n      };\r\n    }\r\n    \r\n    // Subscribe to push notifications\r\n    async subscribeToPush() {\r\n      if (!this.supportsPush) {\r\n        return { success: false, reason: 'push-not-supported' };\r\n      }\r\n      \r\n      try {\r\n        // Request permission if not granted\r\n        if (this.permission !== 'granted') {\r\n          const permissionResult = await this.requestPermission();\r\n          if (!permissionResult.granted) {\r\n            return { success: false, reason: 'permission-denied' };\r\n          }\r\n        }\r\n        \r\n        // Get service worker registration\r\n        const registration = await navigator.serviceWorker.ready;\r\n        \r\n        // Get existing subscription or create new one\r\n        let subscription = await registration.pushManager.getSubscription();\r\n        \r\n        if (!subscription) {\r\n          // Convert VAPID public key to Uint8Array\r\n          const applicationServerKey = this.urlBase64ToUint8Array(this.vapidPublicKey);\r\n          \r\n          // Create new subscription\r\n          subscription = await registration.pushManager.subscribe({\r\n            userVisibleOnly: true,\r\n            applicationServerKey\r\n          });\r\n        }\r\n        \r\n        // Send subscription to server\r\n        const response = await fetch('/api/push/register', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            subscription,\r\n            deviceType: this.detectDeviceType()\r\n          }),\r\n        });\r\n        \r\n        if (!response.ok) {\r\n          throw new Error('Failed to register push subscription with server');\r\n        }\r\n        \r\n        return { success: true, subscription };\r\n      } catch (error) {\r\n        console.error('Error subscribing to push notifications:', error);\r\n        return { success: false, error };\r\n      }\r\n    }\r\n    \r\n    // Unsubscribe from push notifications\r\n    async unsubscribeFromPush() {\r\n      try {\r\n        const registration = await navigator.serviceWorker.ready;\r\n        const subscription = await registration.pushManager.getSubscription();\r\n        \r\n        if (!subscription) {\r\n          return { success: true, reason: 'not-subscribed' };\r\n        }\r\n        \r\n        // Unsubscribe locally\r\n        const result = await subscription.unsubscribe();\r\n        \r\n        // Notify server\r\n        await fetch('/api/push/unregister', {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({ subscription }),\r\n        });\r\n        \r\n        return { success: result };\r\n      } catch (error) {\r\n        console.error('Error unsubscribing from push notifications:', error);\r\n        return { success: false, error };\r\n      }\r\n    }\r\n    \r\n    // Show a local notification\r\n    showNotification(title, options = {}) {\r\n      if (this.permission !== 'granted') {\r\n        return Promise.reject(new Error('Notification permission not granted'));\r\n      }\r\n      \r\n      return navigator.serviceWorker.ready.then(registration => {\r\n        return registration.showNotification(title, {\r\n          icon: '/logo192.png',\r\n          badge: '/badge.png',\r\n          vibrate: [100, 50, 100],\r\n          ...options\r\n        });\r\n      });\r\n    }\r\n    \r\n    // Helper function to detect device type\r\n    detectDeviceType() {\r\n      const userAgent = navigator.userAgent || navigator.vendor || window.opera;\r\n      \r\n      if (/android/i.test(userAgent)) {\r\n        return 'android';\r\n      }\r\n      \r\n      if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {\r\n        return 'ios';\r\n      }\r\n      \r\n      return 'web';\r\n    }\r\n    \r\n    // Helper to convert base64 to Uint8Array for VAPID key\r\n    urlBase64ToUint8Array(base64String) {\r\n      const padding = '='.repeat((4 - base64String.length % 4) % 4);\r\n      const base64 = (base64String + padding)\r\n        .replace(/-/g, '+')\r\n        .replace(/_/g, '/');\r\n      \r\n      const rawData = window.atob(base64);\r\n      const outputArray = new Uint8Array(rawData.length);\r\n      \r\n      for (let i = 0; i < rawData.length; ++i) {\r\n        outputArray[i] = rawData.charCodeAt(i);\r\n      }\r\n      \r\n      return outputArray;\r\n    }\r\n  }\r\n  \r\n  export default new NotificationService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}