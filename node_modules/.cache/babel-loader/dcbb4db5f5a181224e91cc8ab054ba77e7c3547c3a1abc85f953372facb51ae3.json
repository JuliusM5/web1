{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\juliu\\\\Desktop\\\\web\\\\src\\\\context\\\\SubscriptionContext.jsx\",\n  _s = $RefreshSig$();\n// src/context/SubscriptionContext.jsx\nimport React, { createContext, useState, useEffect } from 'react';\nimport subscriptionService from '../services/SubscriptionService';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SubscriptionContext = /*#__PURE__*/createContext(null);\n\n// Provider component\nexport const SubscriptionProvider = ({\n  children\n}) => {\n  _s();\n  const [subscription, setSubscription] = useState(null);\n  const [isInitialized, setIsInitialized] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initialize subscription status on mount\n  useEffect(() => {\n    const initSubscription = async () => {\n      setIsLoading(true);\n      try {\n        const currentSubscription = await subscriptionService.checkSubscription();\n        setSubscription(currentSubscription);\n        setError(null);\n      } catch (error) {\n        console.error('Error initializing subscription:', error);\n        setError('Failed to check subscription status');\n      } finally {\n        setIsInitialized(true);\n        setIsLoading(false);\n      }\n    };\n    initSubscription();\n  }, []);\n\n  // Context value\n  const value = {\n    subscription,\n    setSubscription,\n    isInitialized,\n    isLoading,\n    error,\n    hasActiveSubscription: Boolean(subscription && subscription.status === 'active')\n  };\n  return /*#__PURE__*/_jsxDEV(SubscriptionContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(SubscriptionProvider, \"IFFAz0+0nvt7U8eYvaSFrSbynQc=\");\n_c = SubscriptionProvider;\nexport default SubscriptionContext;\nvar _c;\n$RefreshReg$(_c, \"SubscriptionProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","subscriptionService","jsxDEV","_jsxDEV","SubscriptionContext","SubscriptionProvider","children","_s","subscription","setSubscription","isInitialized","setIsInitialized","isLoading","setIsLoading","error","setError","initSubscription","currentSubscription","checkSubscription","console","value","hasActiveSubscription","Boolean","status","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/juliu/Desktop/web/src/context/SubscriptionContext.jsx"],"sourcesContent":["// src/context/SubscriptionContext.jsx\r\nimport React, { createContext, useState, useEffect } from 'react';\r\nimport subscriptionService from '../services/SubscriptionService';\r\n\r\n// Create context\r\nexport const SubscriptionContext = createContext(null);\r\n\r\n// Provider component\r\nexport const SubscriptionProvider = ({ children }) => {\r\n  const [subscription, setSubscription] = useState(null);\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  \r\n  // Initialize subscription status on mount\r\n  useEffect(() => {\r\n    const initSubscription = async () => {\r\n      setIsLoading(true);\r\n      try {\r\n        const currentSubscription = await subscriptionService.checkSubscription();\r\n        setSubscription(currentSubscription);\r\n        setError(null);\r\n      } catch (error) {\r\n        console.error('Error initializing subscription:', error);\r\n        setError('Failed to check subscription status');\r\n      } finally {\r\n        setIsInitialized(true);\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    \r\n    initSubscription();\r\n  }, []);\r\n  \r\n  // Context value\r\n  const value = {\r\n    subscription,\r\n    setSubscription,\r\n    isInitialized,\r\n    isLoading,\r\n    error,\r\n    hasActiveSubscription: Boolean(subscription && subscription.status === 'active')\r\n  };\r\n  \r\n  return (\r\n    <SubscriptionContext.Provider value={value}>\r\n      {children}\r\n    </SubscriptionContext.Provider>\r\n  );\r\n};\r\n\r\nexport default SubscriptionContext;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AACjE,OAAOC,mBAAmB,MAAM,iCAAiC;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,mBAAmB,gBAAGN,aAAa,CAAC,IAAI,CAAC;;AAEtD;AACA,OAAO,MAAMO,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACpD,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACe,KAAK,EAAEC,QAAQ,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;;EAExC;EACAC,SAAS,CAAC,MAAM;IACd,MAAMgB,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnCH,YAAY,CAAC,IAAI,CAAC;MAClB,IAAI;QACF,MAAMI,mBAAmB,GAAG,MAAMhB,mBAAmB,CAACiB,iBAAiB,CAAC,CAAC;QACzET,eAAe,CAACQ,mBAAmB,CAAC;QACpCF,QAAQ,CAAC,IAAI,CAAC;MAChB,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdK,OAAO,CAACL,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;QACxDC,QAAQ,CAAC,qCAAqC,CAAC;MACjD,CAAC,SAAS;QACRJ,gBAAgB,CAAC,IAAI,CAAC;QACtBE,YAAY,CAAC,KAAK,CAAC;MACrB;IACF,CAAC;IAEDG,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMI,KAAK,GAAG;IACZZ,YAAY;IACZC,eAAe;IACfC,aAAa;IACbE,SAAS;IACTE,KAAK;IACLO,qBAAqB,EAAEC,OAAO,CAACd,YAAY,IAAIA,YAAY,CAACe,MAAM,KAAK,QAAQ;EACjF,CAAC;EAED,oBACEpB,OAAA,CAACC,mBAAmB,CAACoB,QAAQ;IAACJ,KAAK,EAAEA,KAAM;IAAAd,QAAA,EACxCA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAEnC,CAAC;AAACrB,EAAA,CAzCWF,oBAAoB;AAAAwB,EAAA,GAApBxB,oBAAoB;AA2CjC,eAAeD,mBAAmB;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}