{"ast":null,"code":"/**\r\n * Services index\r\n * Export all services from a single file for easy import\r\n */\n\n// Geocoding Service\nexport { geocodeLocation, reverseGeocode, getLocationSuggestions, calculateDistance } from './geocodingService';\n\n// Weather Services\nexport { getWeatherForecast, getUVIndexForecast, getAirQualityForecast, getWeatherAlerts } from './realWeatherService';\n\n// Travel Advisory Service\nexport { getAllTravelAdvisories, getCountryTravelAdvisory, getDestinationTravelAdvisory, getRiskLevel, getSafetyTips } from './travelAdvisoryService';\n\n// API Service (for general API calls)\nexport { get, post, put, del, request } from './apiService';\n\n/**\r\n * Mock data services for development\r\n * These are used when real API services are unavailable or for testing\r\n */\nexport const mockServices = {\n  // Weather mock data\n  getMockWeatherForecast: destination => {\n    console.log(`Getting mock weather for ${destination}`);\n\n    // Return mock weather data\n    return {\n      city: {\n        name: destination.split(',')[0]\n      },\n      current_weather: {\n        temperature: 25,\n        feels_like: 27,\n        humidity: 65,\n        windspeed: 12,\n        weather: [{\n          main: 'Clear',\n          description: 'clear sky'\n        }]\n      },\n      list: [{\n        dt_txt: new Date().toISOString().split('T')[0],\n        main: {\n          temp_max: 28,\n          temp_min: 22\n        },\n        weather: [{\n          main: 'Clear'\n        }]\n      }, {\n        dt_txt: new Date(Date.now() + 86400000).toISOString().split('T')[0],\n        main: {\n          temp_max: 29,\n          temp_min: 23\n        },\n        weather: [{\n          main: 'Clouds'\n        }]\n      }, {\n        dt_txt: new Date(Date.now() + 172800000).toISOString().split('T')[0],\n        main: {\n          temp_max: 26,\n          temp_min: 20\n        },\n        weather: [{\n          main: 'Rain'\n        }]\n      }, {\n        dt_txt: new Date(Date.now() + 259200000).toISOString().split('T')[0],\n        main: {\n          temp_max: 24,\n          temp_min: 19\n        },\n        weather: [{\n          main: 'Clouds'\n        }]\n      }, {\n        dt_txt: new Date(Date.now() + 345600000).toISOString().split('T')[0],\n        main: {\n          temp_max: 25,\n          temp_min: 20\n        },\n        weather: [{\n          main: 'Clear'\n        }]\n      }]\n    };\n  },\n  // Travel advisory mock data\n  getMockTravelAdvisory: destination => {\n    return {\n      name: destination,\n      iso_alpha2: 'XX',\n      continent: 'Unknown',\n      advisory: {\n        score: 2,\n        // Low risk\n        sources_active: 1,\n        message: 'Exercise normal security precautions',\n        updated: new Date().toISOString(),\n        source: 'TravelEase (Mock)'\n      },\n      risk_level: 'Low',\n      safety_tips: ['Research local conditions before traveling', 'Register with your embassy or consulate', 'Purchase comprehensive travel insurance', 'Keep copies of important documents']\n    };\n  }\n};","map":{"version":3,"names":["geocodeLocation","reverseGeocode","getLocationSuggestions","calculateDistance","getWeatherForecast","getUVIndexForecast","getAirQualityForecast","getWeatherAlerts","getAllTravelAdvisories","getCountryTravelAdvisory","getDestinationTravelAdvisory","getRiskLevel","getSafetyTips","get","post","put","del","request","mockServices","getMockWeatherForecast","destination","console","log","city","name","split","current_weather","temperature","feels_like","humidity","windspeed","weather","main","description","list","dt_txt","Date","toISOString","temp_max","temp_min","now","getMockTravelAdvisory","iso_alpha2","continent","advisory","score","sources_active","message","updated","source","risk_level","safety_tips"],"sources":["C:/Users/juliu/Desktop/web/src/services/index.js"],"sourcesContent":["/**\r\n * Services index\r\n * Export all services from a single file for easy import\r\n */\r\n\r\n// Geocoding Service\r\nexport { \r\n    geocodeLocation, \r\n    reverseGeocode, \r\n    getLocationSuggestions,\r\n    calculateDistance\r\n  } from './geocodingService';\r\n  \r\n  // Weather Services\r\n  export { \r\n    getWeatherForecast, \r\n    getUVIndexForecast,\r\n    getAirQualityForecast,\r\n    getWeatherAlerts\r\n  } from './realWeatherService';\r\n  \r\n  // Travel Advisory Service\r\n  export {\r\n    getAllTravelAdvisories,\r\n    getCountryTravelAdvisory, \r\n    getDestinationTravelAdvisory,\r\n    getRiskLevel,\r\n    getSafetyTips\r\n  } from './travelAdvisoryService';\r\n  \r\n  // API Service (for general API calls)\r\n  export {\r\n    get,\r\n    post,\r\n    put,\r\n    del,\r\n    request\r\n  } from './apiService';\r\n  \r\n  /**\r\n   * Mock data services for development\r\n   * These are used when real API services are unavailable or for testing\r\n   */\r\n  export const mockServices = {\r\n    // Weather mock data\r\n    getMockWeatherForecast: (destination) => {\r\n      console.log(`Getting mock weather for ${destination}`);\r\n      \r\n      // Return mock weather data\r\n      return {\r\n        city: {\r\n          name: destination.split(',')[0]\r\n        },\r\n        current_weather: {\r\n          temperature: 25,\r\n          feels_like: 27,\r\n          humidity: 65,\r\n          windspeed: 12,\r\n          weather: [\r\n            {\r\n              main: 'Clear',\r\n              description: 'clear sky'\r\n            }\r\n          ]\r\n        },\r\n        list: [\r\n          {\r\n            dt_txt: new Date().toISOString().split('T')[0],\r\n            main: {\r\n              temp_max: 28,\r\n              temp_min: 22\r\n            },\r\n            weather: [{ main: 'Clear' }]\r\n          },\r\n          {\r\n            dt_txt: new Date(Date.now() + 86400000).toISOString().split('T')[0],\r\n            main: {\r\n              temp_max: 29,\r\n              temp_min: 23\r\n            },\r\n            weather: [{ main: 'Clouds' }]\r\n          },\r\n          {\r\n            dt_txt: new Date(Date.now() + 172800000).toISOString().split('T')[0],\r\n            main: {\r\n              temp_max: 26,\r\n              temp_min: 20\r\n            },\r\n            weather: [{ main: 'Rain' }]\r\n          },\r\n          {\r\n            dt_txt: new Date(Date.now() + 259200000).toISOString().split('T')[0],\r\n            main: {\r\n              temp_max: 24,\r\n              temp_min: 19\r\n            },\r\n            weather: [{ main: 'Clouds' }]\r\n          },\r\n          {\r\n            dt_txt: new Date(Date.now() + 345600000).toISOString().split('T')[0],\r\n            main: {\r\n              temp_max: 25,\r\n              temp_min: 20\r\n            },\r\n            weather: [{ main: 'Clear' }]\r\n          }\r\n        ]\r\n      };\r\n    },\r\n    \r\n    // Travel advisory mock data\r\n    getMockTravelAdvisory: (destination) => {\r\n      return {\r\n        name: destination,\r\n        iso_alpha2: 'XX',\r\n        continent: 'Unknown',\r\n        advisory: {\r\n          score: 2, // Low risk\r\n          sources_active: 1,\r\n          message: 'Exercise normal security precautions',\r\n          updated: new Date().toISOString(),\r\n          source: 'TravelEase (Mock)'\r\n        },\r\n        risk_level: 'Low',\r\n        safety_tips: [\r\n          'Research local conditions before traveling',\r\n          'Register with your embassy or consulate',\r\n          'Purchase comprehensive travel insurance',\r\n          'Keep copies of important documents'\r\n        ]\r\n      };\r\n    }\r\n  };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}